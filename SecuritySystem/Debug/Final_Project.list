
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008250  08008250  00009250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c8  080086c8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080086c8  080086c8  000096c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d0  080086d0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d0  080086d0  000096d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d4  080086d4  000096d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080086d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000254  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd0e  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002035  00000000  00000000  00016f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  00018f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000782  00000000  00000000  00019910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c32e  00000000  00000000  0001a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d862  00000000  00000000  000363c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4240  00000000  00000000  00043c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e7e62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003810  00000000  00000000  000e7ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000eb6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008234 	.word	0x08008234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008234 	.word	0x08008234

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_GPIO_EXTI_Callback>:
	TRIGGERED_State

} eSystemState;

/* Prototype Event Handlers */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick();
 8000bb2:	f000 ff07 	bl	80019c4 <HAL_GetTick>
 8000bb6:	60f8      	str	r0, [r7, #12]
	if(GPIO_Pin == BUTTON1_Pin && currentTime - lastButtonPressTime > 50) {
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	2b20      	cmp	r3, #32
 8000bbc:	d10e      	bne.n	8000bdc <HAL_GPIO_EXTI_Callback+0x34>
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b32      	cmp	r3, #50	@ 0x32
 8000bc8:	d908      	bls.n	8000bdc <HAL_GPIO_EXTI_Callback+0x34>
		button1Pressed = 1;
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <HAL_GPIO_EXTI_Callback+0x64>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
		lastButtonPressTime = HAL_GetTick();
 8000bd0:	f000 fef8 	bl	80019c4 <HAL_GetTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bd8:	6013      	str	r3, [r2, #0]
	} else if(GPIO_Pin == BUTTON2_Pin && currentTime - lastButtonPressTime > 50) {
		button2Pressed = 1;
		lastButtonPressTime = HAL_GetTick();
	}
}
 8000bda:	e010      	b.n	8000bfe <HAL_GPIO_EXTI_Callback+0x56>
	} else if(GPIO_Pin == BUTTON2_Pin && currentTime - lastButtonPressTime > 50) {
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	2b40      	cmp	r3, #64	@ 0x40
 8000be0:	d10d      	bne.n	8000bfe <HAL_GPIO_EXTI_Callback+0x56>
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b32      	cmp	r3, #50	@ 0x32
 8000bec:	d907      	bls.n	8000bfe <HAL_GPIO_EXTI_Callback+0x56>
		button2Pressed = 1;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_GPIO_EXTI_Callback+0x68>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
		lastButtonPressTime = HAL_GetTick();
 8000bf4:	f000 fee6 	bl	80019c4 <HAL_GetTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a03      	ldr	r2, [pc, #12]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bfc:	6013      	str	r3, [r2, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001f4 	.word	0x200001f4
 8000c0c:	200001f0 	.word	0x200001f0
 8000c10:	200001f1 	.word	0x200001f1

08000c14 <PassCode_Handler>:

uint8_t PassCode_Handler() {
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
	uint32_t TIMEOUT_TIMER = 5000;
 8000c1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c1e:	61fb      	str	r3, [r7, #28]
	uint8_t PASSWORD_LENGTH = 4;
 8000c20:	2304      	movs	r3, #4
 8000c22:	76fb      	strb	r3, [r7, #27]
	int password[4] = {1,1,1,1};
 8000c24:	4b64      	ldr	r3, [pc, #400]	@ (8000db8 <PassCode_Handler+0x1a4>)
 8000c26:	f107 0408 	add.w	r4, r7, #8
 8000c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	volatile uint8_t passwordIndex = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
	button1Pressed = 0;
 8000c34:	4b61      	ldr	r3, [pc, #388]	@ (8000dbc <PassCode_Handler+0x1a8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
	button2Pressed = 0;
 8000c3a:	4b61      	ldr	r3, [pc, #388]	@ (8000dc0 <PassCode_Handler+0x1ac>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
	lastButtonPressTime = HAL_GetTick();
 8000c40:	f000 fec0 	bl	80019c4 <HAL_GetTick>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4a5f      	ldr	r2, [pc, #380]	@ (8000dc4 <PassCode_Handler+0x1b0>)
 8000c48:	6013      	str	r3, [r2, #0]

	while(1) {
		//Correct Password Entered
		if(passwordIndex == PASSWORD_LENGTH) {
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	7efa      	ldrb	r2, [r7, #27]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d122      	bne.n	8000c9a <PassCode_Handler+0x86>
			HAL_GPIO_WritePin(GPIOA, ARMED_GREEN_LED_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5e:	f002 f965 	bl	8002f2c <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c66:	f000 feb9 	bl	80019dc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, ARMED_GREEN_LED_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f002 f95a 	bl	8002f2c <HAL_GPIO_WritePin>
			value = 'P';
 8000c78:	4b53      	ldr	r3, [pc, #332]	@ (8000dc8 <PassCode_Handler+0x1b4>)
 8000c7a:	2250      	movs	r2, #80	@ 0x50
 8000c7c:	701a      	strb	r2, [r3, #0]
			UART_Handler(value);
 8000c7e:	4b52      	ldr	r3, [pc, #328]	@ (8000dc8 <PassCode_Handler+0x1b4>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f8a3 	bl	8000dd0 <UART_Handler>
			button1Pressed = 0;
 8000c8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000dbc <PassCode_Handler+0x1a8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
			button2Pressed = 0;
 8000c90:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc0 <PassCode_Handler+0x1ac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
			return 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e089      	b.n	8000dae <PassCode_Handler+0x19a>
		}
		//If 5 seconds elapses since last button input, leaves the passcode handler
		if(HAL_GetTick() - lastButtonPressTime >= TIMEOUT_TIMER) {
 8000c9a:	f000 fe93 	bl	80019c4 <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	4b48      	ldr	r3, [pc, #288]	@ (8000dc4 <PassCode_Handler+0x1b0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d807      	bhi.n	8000cbc <PassCode_Handler+0xa8>
			button1Pressed = 0;
 8000cac:	4b43      	ldr	r3, [pc, #268]	@ (8000dbc <PassCode_Handler+0x1a8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
			button2Pressed = 0;
 8000cb2:	4b43      	ldr	r3, [pc, #268]	@ (8000dc0 <PassCode_Handler+0x1ac>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			return 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e078      	b.n	8000dae <PassCode_Handler+0x19a>
		}
		//Checks if button1 was the correct choice
		if(button1Pressed) {
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dbc <PassCode_Handler+0x1a8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d036      	beq.n	8000d34 <PassCode_Handler+0x120>
			if(passwordIndex < PASSWORD_LENGTH && password[passwordIndex] == 1) {
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	7efa      	ldrb	r2, [r7, #27]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d911      	bls.n	8000cf4 <PassCode_Handler+0xe0>
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	3320      	adds	r3, #32
 8000cd8:	443b      	add	r3, r7
 8000cda:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d108      	bne.n	8000cf4 <PassCode_Handler+0xe0>
				passwordIndex++;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	71fb      	strb	r3, [r7, #7]
				button1Pressed = 0;
 8000cec:	4b33      	ldr	r3, [pc, #204]	@ (8000dbc <PassCode_Handler+0x1a8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e7aa      	b.n	8000c4a <PassCode_Handler+0x36>
				//Incorrect
			} else {
				HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	4834      	ldr	r0, [pc, #208]	@ (8000dcc <PassCode_Handler+0x1b8>)
 8000cfa:	f002 f917 	bl	8002f2c <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000cfe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d02:	f000 fe6b 	bl	80019dc <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4830      	ldr	r0, [pc, #192]	@ (8000dcc <PassCode_Handler+0x1b8>)
 8000d0c:	f002 f90e 	bl	8002f2c <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000d10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d14:	f000 fe62 	bl	80019dc <HAL_Delay>
				value = 'p';
 8000d18:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <PassCode_Handler+0x1b4>)
 8000d1a:	2270      	movs	r2, #112	@ 0x70
 8000d1c:	701a      	strb	r2, [r3, #0]
				UART_Handler(value);
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <PassCode_Handler+0x1b4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f853 	bl	8000dd0 <UART_Handler>
				button1Pressed = 0;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <PassCode_Handler+0x1a8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
				return 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e03c      	b.n	8000dae <PassCode_Handler+0x19a>
			}
			//Checks if button2 was the correct choice
		}else if(button2Pressed) {
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <PassCode_Handler+0x1ac>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d085      	beq.n	8000c4a <PassCode_Handler+0x36>
			if(passwordIndex < PASSWORD_LENGTH && password[passwordIndex] == 0) {
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	7efa      	ldrb	r2, [r7, #27]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d911      	bls.n	8000d6c <PassCode_Handler+0x158>
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	3320      	adds	r3, #32
 8000d50:	443b      	add	r3, r7
 8000d52:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d108      	bne.n	8000d6c <PassCode_Handler+0x158>
				passwordIndex++;
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	71fb      	strb	r3, [r7, #7]
				button2Pressed = 0;
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <PassCode_Handler+0x1ac>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e01f      	b.n	8000dac <PassCode_Handler+0x198>
				//Incorrect
			} else {
				HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <PassCode_Handler+0x1b8>)
 8000d72:	f002 f8db 	bl	8002f2c <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000d76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d7a:	f000 fe2f 	bl	80019dc <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2110      	movs	r1, #16
 8000d82:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <PassCode_Handler+0x1b8>)
 8000d84:	f002 f8d2 	bl	8002f2c <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000d88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d8c:	f000 fe26 	bl	80019dc <HAL_Delay>
				value = 'p';
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <PassCode_Handler+0x1b4>)
 8000d92:	2270      	movs	r2, #112	@ 0x70
 8000d94:	701a      	strb	r2, [r3, #0]
				UART_Handler(value);
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <PassCode_Handler+0x1b4>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f817 	bl	8000dd0 <UART_Handler>
				button2Pressed = 0;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <PassCode_Handler+0x1ac>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
				return 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	e000      	b.n	8000dae <PassCode_Handler+0x19a>
		if(passwordIndex == PASSWORD_LENGTH) {
 8000dac:	e74d      	b.n	8000c4a <PassCode_Handler+0x36>
			}
		}
	}
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	08008250 	.word	0x08008250
 8000dbc:	200001f0 	.word	0x200001f0
 8000dc0:	200001f1 	.word	0x200001f1
 8000dc4:	200001f4 	.word	0x200001f4
 8000dc8:	200001fa 	.word	0x200001fa
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <UART_Handler>:

void UART_Handler(char value) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0a4      	sub	sp, #144	@ 0x90
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	char data[128];
	uint8_t time = HAL_GetTick()/1000;
 8000dda:	f000 fdf3 	bl	80019c4 <HAL_GetTick>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a7e      	ldr	r2, [pc, #504]	@ (8000fdc <UART_Handler+0x20c>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	099b      	lsrs	r3, r3, #6
 8000de8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	switch(value) {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	3b41      	subs	r3, #65	@ 0x41
 8000df0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000df2:	f200 80ed 	bhi.w	8000fd0 <UART_Handler+0x200>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <UART_Handler+0x2c>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000f47 	.word	0x08000f47
 8000e00:	08000fd1 	.word	0x08000fd1
 8000e04:	08000fd1 	.word	0x08000fd1
 8000e08:	08000fd1 	.word	0x08000fd1
 8000e0c:	08000fd1 	.word	0x08000fd1
 8000e10:	08000fd1 	.word	0x08000fd1
 8000e14:	08000fd1 	.word	0x08000fd1
 8000e18:	08000fd1 	.word	0x08000fd1
 8000e1c:	08000f19 	.word	0x08000f19
 8000e20:	08000fd1 	.word	0x08000fd1
 8000e24:	08000fd1 	.word	0x08000fd1
 8000e28:	08000fa3 	.word	0x08000fa3
 8000e2c:	08000f75 	.word	0x08000f75
 8000e30:	08000fd1 	.word	0x08000fd1
 8000e34:	08000fd1 	.word	0x08000fd1
 8000e38:	08000eeb 	.word	0x08000eeb
 8000e3c:	08000fd1 	.word	0x08000fd1
 8000e40:	08000fd1 	.word	0x08000fd1
 8000e44:	08000fd1 	.word	0x08000fd1
 8000e48:	08000fd1 	.word	0x08000fd1
 8000e4c:	08000fd1 	.word	0x08000fd1
 8000e50:	08000fd1 	.word	0x08000fd1
 8000e54:	08000fd1 	.word	0x08000fd1
 8000e58:	08000fd1 	.word	0x08000fd1
 8000e5c:	08000fd1 	.word	0x08000fd1
 8000e60:	08000fd1 	.word	0x08000fd1
 8000e64:	08000fd1 	.word	0x08000fd1
 8000e68:	08000fd1 	.word	0x08000fd1
 8000e6c:	08000fd1 	.word	0x08000fd1
 8000e70:	08000fd1 	.word	0x08000fd1
 8000e74:	08000fd1 	.word	0x08000fd1
 8000e78:	08000fd1 	.word	0x08000fd1
 8000e7c:	08000fd1 	.word	0x08000fd1
 8000e80:	08000fd1 	.word	0x08000fd1
 8000e84:	08000fd1 	.word	0x08000fd1
 8000e88:	08000fd1 	.word	0x08000fd1
 8000e8c:	08000fd1 	.word	0x08000fd1
 8000e90:	08000fd1 	.word	0x08000fd1
 8000e94:	08000fd1 	.word	0x08000fd1
 8000e98:	08000fd1 	.word	0x08000fd1
 8000e9c:	08000fd1 	.word	0x08000fd1
 8000ea0:	08000fd1 	.word	0x08000fd1
 8000ea4:	08000fd1 	.word	0x08000fd1
 8000ea8:	08000fd1 	.word	0x08000fd1
 8000eac:	08000fd1 	.word	0x08000fd1
 8000eb0:	08000fd1 	.word	0x08000fd1
 8000eb4:	08000fd1 	.word	0x08000fd1
 8000eb8:	08000ebd 	.word	0x08000ebd
	case 'p': {
		sprintf(data, "%d : Password Entered Incorrectly\r\n", time);
 8000ebc:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4946      	ldr	r1, [pc, #280]	@ (8000fe0 <UART_Handler+0x210>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 ffc4 	bl	8005e54 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f9cd 	bl	8000270 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f107 010c 	add.w	r1, r7, #12
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee2:	4840      	ldr	r0, [pc, #256]	@ (8000fe4 <UART_Handler+0x214>)
 8000ee4:	f003 fc3a 	bl	800475c <HAL_UART_Transmit>
		break;
 8000ee8:	e073      	b.n	8000fd2 <UART_Handler+0x202>
	}
	case 'P': {
		sprintf(data, "%d : Password Entered Correctly\r\n", time);
 8000eea:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	493d      	ldr	r1, [pc, #244]	@ (8000fe8 <UART_Handler+0x218>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 ffad 	bl	8005e54 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f9b6 	bl	8000270 <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f107 010c 	add.w	r1, r7, #12
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f10:	4834      	ldr	r0, [pc, #208]	@ (8000fe4 <UART_Handler+0x214>)
 8000f12:	f003 fc23 	bl	800475c <HAL_UART_Transmit>
		break;
 8000f16:	e05c      	b.n	8000fd2 <UART_Handler+0x202>
	}
	case 'I': {
		sprintf(data, "%d : Security System Unarmed\r\n", time);
 8000f18:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4932      	ldr	r1, [pc, #200]	@ (8000fec <UART_Handler+0x21c>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 ff96 	bl	8005e54 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f99f 	bl	8000270 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f107 010c 	add.w	r1, r7, #12
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3e:	4829      	ldr	r0, [pc, #164]	@ (8000fe4 <UART_Handler+0x214>)
 8000f40:	f003 fc0c 	bl	800475c <HAL_UART_Transmit>
		break;
 8000f44:	e045      	b.n	8000fd2 <UART_Handler+0x202>
	}
	case 'A': {
		sprintf(data, "%d : Security System Armed\r\n", time);
 8000f46:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4928      	ldr	r1, [pc, #160]	@ (8000ff0 <UART_Handler+0x220>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 ff7f 	bl	8005e54 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f988 	bl	8000270 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f107 010c 	add.w	r1, r7, #12
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f6c:	481d      	ldr	r0, [pc, #116]	@ (8000fe4 <UART_Handler+0x214>)
 8000f6e:	f003 fbf5 	bl	800475c <HAL_UART_Transmit>
		break;
 8000f72:	e02e      	b.n	8000fd2 <UART_Handler+0x202>
	}
	case 'M': {
		sprintf(data, "%d : Motion Detected!\r\n", time);
 8000f74:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	491d      	ldr	r1, [pc, #116]	@ (8000ff4 <UART_Handler+0x224>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 ff68 	bl	8005e54 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f971 	bl	8000270 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f107 010c 	add.w	r1, r7, #12
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f9a:	4812      	ldr	r0, [pc, #72]	@ (8000fe4 <UART_Handler+0x214>)
 8000f9c:	f003 fbde 	bl	800475c <HAL_UART_Transmit>
		break;
 8000fa0:	e017      	b.n	8000fd2 <UART_Handler+0x202>
	}
	case 'L': {
		sprintf(data, "%d : Light Change Detected!\r\n", time);
 8000fa2:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4913      	ldr	r1, [pc, #76]	@ (8000ff8 <UART_Handler+0x228>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 ff51 	bl	8005e54 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f95a 	bl	8000270 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f107 010c 	add.w	r1, r7, #12
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fc8:	4806      	ldr	r0, [pc, #24]	@ (8000fe4 <UART_Handler+0x214>)
 8000fca:	f003 fbc7 	bl	800475c <HAL_UART_Transmit>
		break;
 8000fce:	e000      	b.n	8000fd2 <UART_Handler+0x202>
	}
	default: break;
 8000fd0:	bf00      	nop
	}
	return;
 8000fd2:	bf00      	nop
}
 8000fd4:	3790      	adds	r7, #144	@ 0x90
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	10624dd3 	.word	0x10624dd3
 8000fe0:	08008260 	.word	0x08008260
 8000fe4:	2000024c 	.word	0x2000024c
 8000fe8:	08008284 	.word	0x08008284
 8000fec:	080082a8 	.word	0x080082a8
 8000ff0:	080082c8 	.word	0x080082c8
 8000ff4:	080082e8 	.word	0x080082e8
 8000ff8:	08008300 	.word	0x08008300

08000ffc <Sensor_Handler>:

uint8_t Sensor_Handler() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    HAL_ADC_Init(&hadc1);
 8001000:	4815      	ldr	r0, [pc, #84]	@ (8001058 <Sensor_Handler+0x5c>)
 8001002:	f000 fd0f 	bl	8001a24 <HAL_ADC_Init>
    HAL_ADC_Start(&hadc1);
 8001006:	4814      	ldr	r0, [pc, #80]	@ (8001058 <Sensor_Handler+0x5c>)
 8001008:	f000 fe9e 	bl	8001d48 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800100c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001010:	4811      	ldr	r0, [pc, #68]	@ (8001058 <Sensor_Handler+0x5c>)
 8001012:	f000 ff4f 	bl	8001eb4 <HAL_ADC_PollForConversion>
	rawValue = HAL_ADC_GetValue(&hadc1);
 8001016:	4810      	ldr	r0, [pc, #64]	@ (8001058 <Sensor_Handler+0x5c>)
 8001018:	f001 f81a 	bl	8002050 <HAL_ADC_GetValue>
 800101c:	4603      	mov	r3, r0
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <Sensor_Handler+0x60>)
 8001022:	801a      	strh	r2, [r3, #0]

	while(1) {
		//If rawValue = 2482 (Voltage = 2V) then trigger Security Alarm
		if(rawValue >= 100) {
 8001024:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <Sensor_Handler+0x60>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	2b63      	cmp	r3, #99	@ 0x63
 800102c:	d904      	bls.n	8001038 <Sensor_Handler+0x3c>
			value = 'L';
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <Sensor_Handler+0x64>)
 8001030:	224c      	movs	r2, #76	@ 0x4c
 8001032:	701a      	strb	r2, [r3, #0]
			return 1;
 8001034:	2301      	movs	r3, #1
 8001036:	e00c      	b.n	8001052 <Sensor_Handler+0x56>
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) {
 8001038:	2108      	movs	r1, #8
 800103a:	480a      	ldr	r0, [pc, #40]	@ (8001064 <Sensor_Handler+0x68>)
 800103c:	f001 ff5e 	bl	8002efc <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <Sensor_Handler+0x54>
			value = 'M';
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <Sensor_Handler+0x64>)
 8001048:	224d      	movs	r2, #77	@ 0x4d
 800104a:	701a      	strb	r2, [r3, #0]
			return 1;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <Sensor_Handler+0x56>
		}

		else {
			return 0;
 8001050:	2300      	movs	r3, #0
		}
	}
	return 0;
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001fc 	.word	0x200001fc
 800105c:	200001f8 	.word	0x200001f8
 8001060:	200001fa 	.word	0x200001fa
 8001064:	48000400 	.word	0x48000400

08001068 <IDLE_Handler>:

eSystemState IDLE_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, ARMED_GREEN_LED_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001076:	f001 ff59 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IDLE_YELLOW_LED_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2120      	movs	r1, #32
 800107e:	480f      	ldr	r0, [pc, #60]	@ (80010bc <IDLE_Handler+0x54>)
 8001080:	f001 ff54 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2110      	movs	r1, #16
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <IDLE_Handler+0x54>)
 800108a:	f001 ff4f 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2108      	movs	r1, #8
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f001 ff49 	bl	8002f2c <HAL_GPIO_WritePin>

	value = 'I';
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <IDLE_Handler+0x58>)
 800109c:	2249      	movs	r2, #73	@ 0x49
 800109e:	701a      	strb	r2, [r3, #0]
	UART_Handler(value);
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <IDLE_Handler+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe92 	bl	8000dd0 <UART_Handler>

	while(1) {
		if(PassCode_Handler() == 1) {
 80010ac:	f7ff fdb2 	bl	8000c14 <PassCode_Handler>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d1fa      	bne.n	80010ac <IDLE_Handler+0x44>
			return ARMED_State;
 80010b6:	2301      	movs	r3, #1
		}
	}
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	48000400 	.word	0x48000400
 80010c0:	200001fa 	.word	0x200001fa

080010c4 <ARMED_Handler>:

eSystemState ARMED_Handler(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	//So owner has time to leave room before alarm is set
	int i;
	for(i = 0; i < 3; i= i + 1) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	e018      	b.n	8001102 <ARMED_Handler+0x3e>
		HAL_GPIO_WritePin(GPIOA, ARMED_GREEN_LED_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010da:	f001 ff27 	bl	8002f2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80010de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010e2:	f000 fc7b 	bl	80019dc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, ARMED_GREEN_LED_Pin,GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f001 ff1c 	bl	8002f2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80010f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010f8:	f000 fc70 	bl	80019dc <HAL_Delay>
	for(i = 0; i < 3; i= i + 1) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b02      	cmp	r3, #2
 8001106:	dde3      	ble.n	80010d0 <ARMED_Handler+0xc>
	}
	HAL_GPIO_WritePin(GPIOB, IDLE_YELLOW_LED_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	4810      	ldr	r0, [pc, #64]	@ (8001150 <ARMED_Handler+0x8c>)
 800110e:	f001 ff0d 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2110      	movs	r1, #16
 8001116:	480e      	ldr	r0, [pc, #56]	@ (8001150 <ARMED_Handler+0x8c>)
 8001118:	f001 ff08 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ARMED_GREEN_LED_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001126:	f001 ff01 	bl	8002f2c <HAL_GPIO_WritePin>

	value = 'A';
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <ARMED_Handler+0x90>)
 800112c:	2241      	movs	r2, #65	@ 0x41
 800112e:	701a      	strb	r2, [r3, #0]
	UART_Handler(value);
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <ARMED_Handler+0x90>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fe4a 	bl	8000dd0 <UART_Handler>

	while(1) {
		if(Sensor_Handler() == 1) {
 800113c:	f7ff ff5e 	bl	8000ffc <Sensor_Handler>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d1fa      	bne.n	800113c <ARMED_Handler+0x78>
			return TRIGGERED_State;
 8001146:	2302      	movs	r3, #2
		}
	}
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400
 8001154:	200001fa 	.word	0x200001fa

08001158 <TRIGGERED_Handler>:

eSystemState TRIGGERED_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	//Visually depicts current state
	HAL_GPIO_WritePin(GPIOB, IDLE_YELLOW_LED_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2120      	movs	r1, #32
 8001160:	4813      	ldr	r0, [pc, #76]	@ (80011b0 <TRIGGERED_Handler+0x58>)
 8001162:	f001 fee3 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ARMED_GREEN_LED_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800116c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001170:	f001 fedc 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <TRIGGERED_Handler+0x58>)
 800117a:	f001 fed7 	bl	8002f2c <HAL_GPIO_WritePin>
	//Alarm Buzzer Triggers
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2108      	movs	r1, #8
 8001182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001186:	f001 fed1 	bl	8002f2c <HAL_GPIO_WritePin>

	UART_Handler(value);
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <TRIGGERED_Handler+0x5c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fe1d 	bl	8000dd0 <UART_Handler>

	while(1) {
		HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2110      	movs	r1, #16
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <TRIGGERED_Handler+0x58>)
 800119c:	f001 fec6 	bl	8002f2c <HAL_GPIO_WritePin>
		//Input Password to disarm
		if(PassCode_Handler() == 1)
 80011a0:	f7ff fd38 	bl	8000c14 <PassCode_Handler>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d1f5      	bne.n	8001196 <TRIGGERED_Handler+0x3e>
		{
			return IDLE_State;
 80011aa:	2300      	movs	r3, #0
		}
	}
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	48000400 	.word	0x48000400
 80011b4:	200001fa 	.word	0x200001fa

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f000 fba7 	bl	8001910 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f82f 	bl	8001224 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f000 f925 	bl	8001414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ca:	f000 f8f3 	bl	80013b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011ce:	f000 f881 	bl	80012d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* Declare eNextState and initialize it to IDLE_State */
    eSystemState eNextState = IDLE_State;
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]

    HAL_ADC_Init(&hadc1);
 80011d6:	4812      	ldr	r0, [pc, #72]	@ (8001220 <main+0x68>)
 80011d8:	f000 fc24 	bl	8001a24 <HAL_ADC_Init>
    HAL_ADC_Start(&hadc1);
 80011dc:	4810      	ldr	r0, [pc, #64]	@ (8001220 <main+0x68>)
 80011de:	f000 fdb3 	bl	8001d48 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    	switch(eNextState)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d010      	beq.n	800120a <main+0x52>
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	dc13      	bgt.n	8001214 <main+0x5c>
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <main+0x3e>
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d005      	beq.n	8001200 <main+0x48>
 80011f4:	e00e      	b.n	8001214 <main+0x5c>
    	{
    		case IDLE_State:
    			eNextState = IDLE_Handler();
 80011f6:	f7ff ff37 	bl	8001068 <IDLE_Handler>
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
    	  	break;
 80011fe:	e00e      	b.n	800121e <main+0x66>

    	  	case ARMED_State:
    	  		eNextState = ARMED_Handler();
 8001200:	f7ff ff60 	bl	80010c4 <ARMED_Handler>
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
    	  	break;
 8001208:	e009      	b.n	800121e <main+0x66>

    	  	case TRIGGERED_State:
    	  		eNextState = TRIGGERED_Handler();
 800120a:	f7ff ffa5 	bl	8001158 <TRIGGERED_Handler>
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    	  	break;
 8001212:	e004      	b.n	800121e <main+0x66>

    	  	default:
    	  		eNextState = IDLE_Handler();
 8001214:	f7ff ff28 	bl	8001068 <IDLE_Handler>
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
    	  	break;
 800121c:	bf00      	nop
    	switch(eNextState)
 800121e:	e7e0      	b.n	80011e2 <main+0x2a>
 8001220:	200001fc 	.word	0x200001fc

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b096      	sub	sp, #88	@ 0x58
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800122e:	2228      	movs	r2, #40	@ 0x28
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fef0 	bl	8006018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800126c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001270:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fe88 	bl	8002f8c <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001282:	f000 f94b 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	230f      	movs	r3, #15
 8001288:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 feb1 	bl	8004008 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012ac:	f000 f936 	bl	800151c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80012b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 f8d9 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80012c8:	f000 f928 	bl	800151c <Error_Handler>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3758      	adds	r7, #88	@ 0x58
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 80012f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001312:	2201      	movs	r2, #1
 8001314:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001316:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800131e:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001326:	2201      	movs	r2, #1
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132a:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001332:	2201      	movs	r2, #1
 8001334:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001340:	2204      	movs	r2, #4
 8001342:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001346:	2200      	movs	r2, #0
 8001348:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 800134c:	2200      	movs	r2, #0
 800134e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001350:	4817      	ldr	r0, [pc, #92]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001352:	f000 fb67 	bl	8001a24 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800135c:	f000 f8de 	bl	800151c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4811      	ldr	r0, [pc, #68]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 800136c:	f001 f93c 	bl	80025e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001376:	f000 f8d1 	bl	800151c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800137a:	2301      	movs	r3, #1
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137e:	2301      	movs	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <MX_ADC1_Init+0xdc>)
 8001398:	f000 fe68 	bl	800206c <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80013a2:	f000 f8bb 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	@ 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013ba:	4a15      	ldr	r2, [pc, #84]	@ (8001410 <MX_USART2_UART_Init+0x5c>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013c0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART2_UART_Init+0x58>)
 80013f8:	f003 f962 	bl	80046c0 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001402:	f000 f88b 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000024c 	.word	0x2000024c
 8001410:	40004400 	.word	0x40004400

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142a:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <MX_GPIO_Init+0x100>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a39      	ldr	r2, [pc, #228]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001430:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a33      	ldr	r2, [pc, #204]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <MX_GPIO_Init+0x100>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a2d      	ldr	r2, [pc, #180]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_OUPUT_Pin|ARMED_GREEN_LED_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f640 0108 	movw	r1, #2056	@ 0x808
 8001478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147c:	f001 fd56 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGGERED_RED_LED_Pin|IDLE_YELLOW_LED_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2130      	movs	r1, #48	@ 0x30
 8001484:	4824      	ldr	r0, [pc, #144]	@ (8001518 <MX_GPIO_Init+0x104>)
 8001486:	f001 fd51 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_OUPUT_Pin ARMED_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BUZZER_OUPUT_Pin|ARMED_GREEN_LED_Pin;
 800148a:	f640 0308 	movw	r3, #2056	@ 0x808
 800148e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f001 fbb7 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80014aa:	2360      	movs	r3, #96	@ 0x60
 80014ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f001 fba9 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_OUTPUT_Pin */
  GPIO_InitStruct.Pin = MOTION_OUTPUT_Pin;
 80014c6:	2308      	movs	r3, #8
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	480f      	ldr	r0, [pc, #60]	@ (8001518 <MX_GPIO_Init+0x104>)
 80014da:	f001 fb9d 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGERED_RED_LED_Pin IDLE_YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = TRIGGERED_RED_LED_Pin|IDLE_YELLOW_LED_Pin;
 80014de:	2330      	movs	r3, #48	@ 0x30
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	4808      	ldr	r0, [pc, #32]	@ (8001518 <MX_GPIO_Init+0x104>)
 80014f6:	f001 fb8f 	bl	8002c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2017      	movs	r0, #23
 8001500:	f001 fadd 	bl	8002abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001504:	2017      	movs	r0, #23
 8001506:	f001 faf6 	bl	8002af6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	48000400 	.word	0x48000400

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_MspInit+0x44>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <HAL_MspInit+0x44>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_MspInit+0x44>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_MspInit+0x44>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001594:	d124      	bne.n	80015e0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <HAL_ADC_MspInit+0x74>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <HAL_ADC_MspInit+0x74>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	6153      	str	r3, [r2, #20]
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_ADC_MspInit+0x74>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_ADC_MspInit+0x74>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <HAL_ADC_MspInit+0x74>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	6153      	str	r3, [r2, #20]
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_ADC_MspInit+0x74>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f001 fb1c 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <HAL_UART_MspInit+0x90>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d131      	bne.n	8001672 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <HAL_UART_MspInit+0x94>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a1b      	ldr	r2, [pc, #108]	@ (8001680 <HAL_UART_MspInit+0x94>)
 8001614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_UART_MspInit+0x94>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_UART_MspInit+0x94>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <HAL_UART_MspInit+0x94>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_UART_MspInit+0x94>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800163e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001650:	2307      	movs	r3, #7
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f001 fadb 	bl	8002c18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2026      	movs	r0, #38	@ 0x26
 8001668:	f001 fa29 	bl	8002abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800166c:	2026      	movs	r0, #38	@ 0x26
 800166e:	f001 fa42 	bl	8002af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004400 	.word	0x40004400
 8001680:	40021000 	.word	0x40021000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <NMI_Handler+0x4>

0800168c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <MemManage_Handler+0x4>

0800169c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <UsageFault_Handler+0x4>

080016ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 f95f 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 80016e6:	2020      	movs	r0, #32
 80016e8:	f001 fc38 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 80016ec:	2040      	movs	r0, #64	@ 0x40
 80016ee:	f001 fc35 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f003 f8b7 	bl	8004870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000024c 	.word	0x2000024c

0800170c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return 1;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_kill>:

int _kill(int pid, int sig)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001726:	f004 fc83 	bl	8006030 <__errno>
 800172a:	4603      	mov	r3, r0
 800172c:	2216      	movs	r2, #22
 800172e:	601a      	str	r2, [r3, #0]
  return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_exit>:

void _exit (int status)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001744:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffe7 	bl	800171c <_kill>
  while (1) {}    /* Make sure we hang here */
 800174e:	bf00      	nop
 8001750:	e7fd      	b.n	800174e <_exit+0x12>

08001752 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e00a      	b.n	800177a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001764:	f3af 8000 	nop.w
 8001768:	4601      	mov	r1, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	60ba      	str	r2, [r7, #8]
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	dbf0      	blt.n	8001764 <_read+0x12>
  }

  return len;
 8001782:	687b      	ldr	r3, [r7, #4]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e009      	b.n	80017b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbf1      	blt.n	800179e <_write+0x12>
  }
  return len;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_close>:

int _close(int file)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ec:	605a      	str	r2, [r3, #4]
  return 0;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_isatty>:

int _isatty(int file)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f004 fbe8 	bl	8006030 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20003000 	.word	0x20003000
 800188c:	00000400 	.word	0x00000400
 8001890:	200002d4 	.word	0x200002d4
 8001894:	20000428 	.word	0x20000428

08001898 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c0:	f7ff ffea 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	@ (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f004 fba7 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ee:	f7ff fc63 	bl	80011b8 <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001900:	080086d8 	.word	0x080086d8
  ldr r2, =_sbss
 8001904:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001908:	20000428 	.word	0x20000428

0800190c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_2_IRQHandler>
	...

08001910 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_Init+0x28>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_Init+0x28>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f001 f8c1 	bl	8002aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fdfe 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f001 f8d9 	bl	8002b12 <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001978:	f001 f8a1 	bl	8002abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	@ (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	20000008 	.word	0x20000008
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008
 80019c0:	200002d8 	.word	0x200002d8

080019c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200002d8 	.word	0x200002d8

080019dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff ffee 	bl	80019c4 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <HAL_Delay+0x44>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffde 	bl	80019c4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008

08001a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b09a      	sub	sp, #104	@ 0x68
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e172      	b.n	8001d2a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d176      	bne.n	8001b44 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d152      	bne.n	8001b04 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fd7b 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d13b      	bne.n	8001b04 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fed5 	bl	800283c <ADC_Disable>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d12f      	bne.n	8001b04 <HAL_ADC_Init+0xe0>
 8001aa4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d12b      	bne.n	8001b04 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ab4:	f023 0302 	bic.w	r3, r3, #2
 8001ab8:	f043 0202 	orr.w	r2, r3, #2
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ace:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ade:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae0:	4b94      	ldr	r3, [pc, #592]	@ (8001d34 <HAL_ADC_Init+0x310>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a94      	ldr	r2, [pc, #592]	@ (8001d38 <HAL_ADC_Init+0x314>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0c9a      	lsrs	r2, r3, #18
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001af6:	e002      	b.n	8001afe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f9      	bne.n	8001af8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b20:	d110      	bne.n	8001b44 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f023 0312 	bic.w	r3, r3, #18
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 80df 	bne.w	8001d10 <HAL_ADC_Init+0x2ec>
 8001b52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 80da 	bne.w	8001d10 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 80d2 	bne.w	8001d10 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b74:	f043 0202 	orr.w	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d3c <HAL_ADC_Init+0x318>)
 8001b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b88:	d102      	bne.n	8001b90 <HAL_ADC_Init+0x16c>
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d40 <HAL_ADC_Init+0x31c>)
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e002      	b.n	8001b96 <HAL_ADC_Init+0x172>
 8001b90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b94:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d108      	bne.n	8001bb6 <HAL_ADC_Init+0x192>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Init+0x192>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_ADC_Init+0x194>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11c      	bne.n	8001bf6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_ADC_Init+0x1ba>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Init+0x1ba>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_ADC_Init+0x1bc>
 8001bde:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d108      	bne.n	8001bf6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bf4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e5b      	ldrb	r3, [r3, #25]
 8001bfa:	035b      	lsls	r3, r3, #13
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c00:	2a01      	cmp	r2, #1
 8001c02:	d002      	beq.n	8001c0a <HAL_ADC_Init+0x1e6>
 8001c04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c08:	e000      	b.n	8001c0c <HAL_ADC_Init+0x1e8>
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d11b      	bne.n	8001c62 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7e5b      	ldrb	r3, [r3, #25]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	3b01      	subs	r3, #1
 8001c38:	045a      	lsls	r2, r3, #17
 8001c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c42:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c44:	e00d      	b.n	8001c62 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d007      	beq.n	8001c7a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c72:	4313      	orrs	r3, r2
 8001c74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c76:	4313      	orrs	r3, r2
 8001c78:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d114      	bne.n	8001cb2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c96:	f023 0302 	bic.w	r3, r3, #2
 8001c9a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ca0:	039a      	lsls	r2, r3, #14
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4313      	orrs	r3, r2
 8001cac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_ADC_Init+0x320>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	f023 010f 	bic.w	r1, r3, #15
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ce6:	e007      	b.n	8001cf8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020f 	bic.w	r2, r2, #15
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f023 0303 	bic.w	r3, r3, #3
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d0e:	e00a      	b.n	8001d26 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	f023 0312 	bic.w	r3, r3, #18
 8001d18:	f043 0210 	orr.w	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3768      	adds	r7, #104	@ 0x68
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000000 	.word	0x20000000
 8001d38:	431bde83 	.word	0x431bde83
 8001d3c:	50000300 	.word	0x50000300
 8001d40:	50000100 	.word	0x50000100
 8001d44:	fff0c007 	.word	0xfff0c007

08001d48 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 809c 	bne.w	8001e9c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Start+0x2a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e097      	b.n	8001ea2 <HAL_ADC_Start+0x15a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fcfa 	bl	8002774 <ADC_Enable>
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 8083 	bne.w	8001e92 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001da0:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <HAL_ADC_Start+0x164>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_ADC_Start+0x6e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db4:	d115      	bne.n	8001de2 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d027      	beq.n	8001e20 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dd8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001de0:	e01e      	b.n	8001e20 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001df6:	d004      	beq.n	8001e02 <HAL_ADC_Start+0xba>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb0 <HAL_ADC_Start+0x168>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10e      	bne.n	8001e20 <HAL_ADC_Start+0xd8>
 8001e02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e18:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e2c:	d106      	bne.n	8001e3c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	f023 0206 	bic.w	r2, r3, #6
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e3a:	e002      	b.n	8001e42 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	221c      	movs	r2, #28
 8001e50:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <HAL_ADC_Start+0x164>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_ADC_Start+0x138>
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_ADC_Start+0x164>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d00a      	beq.n	8001e80 <HAL_ADC_Start+0x138>
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_ADC_Start+0x164>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	d004      	beq.n	8001e80 <HAL_ADC_Start+0x138>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0204 	orr.w	r2, r2, #4
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e006      	b.n	8001ea0 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001e9a:	e001      	b.n	8001ea0 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	50000300 	.word	0x50000300
 8001eb0:	50000100 	.word	0x50000100

08001eb4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d102      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001eca:	2308      	movs	r3, #8
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e02e      	b.n	8001f2e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800204c <HAL_ADC_PollForConversion+0x198>)
 8001ed2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d112      	bne.n	8001f06 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d11d      	bne.n	8001f2a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f043 0220 	orr.w	r2, r3, #32
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e09d      	b.n	8002042 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f043 0220 	orr.w	r2, r3, #32
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e08b      	b.n	8002042 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_ADC_PollForConversion+0x198>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_ADC_PollForConversion+0x90>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f42:	d104      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	e003      	b.n	8001f56 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001f56:	f7ff fd35 	bl	80019c4 <HAL_GetTick>
 8001f5a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f5c:	e021      	b.n	8001fa2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f64:	d01d      	beq.n	8001fa2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_ADC_PollForConversion+0xc8>
 8001f6c:	f7ff fd2a 	bl	80019c4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d212      	bcs.n	8001fa2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10b      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f043 0204 	orr.w	r2, r3, #4
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04f      	b.n	8002042 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0d6      	beq.n	8001f5e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d131      	bne.n	800202e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d12c      	bne.n	800202e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d125      	bne.n	800202e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d112      	bne.n	8002016 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d112      	bne.n	800202e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40
 8002014:	e00b      	b.n	800202e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	50000300 	.word	0x50000300

08002050 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800206c:	b480      	push	{r7}
 800206e:	b09b      	sub	sp, #108	@ 0x6c
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x22>
 800208a:	2302      	movs	r3, #2
 800208c:	e2a1      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x566>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 8285 	bne.w	80025b0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d81c      	bhi.n	80020e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	461a      	mov	r2, r3
 80020c2:	231f      	movs	r3, #31
 80020c4:	4093      	lsls	r3, r2
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4019      	ands	r1, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e6:	e063      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d81e      	bhi.n	800212e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	3b1e      	subs	r3, #30
 8002104:	221f      	movs	r2, #31
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	4019      	ands	r1, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	3b1e      	subs	r3, #30
 8002120:	fa00 f203 	lsl.w	r2, r0, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	@ 0x34
 800212c:	e040      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b0e      	cmp	r3, #14
 8002134:	d81e      	bhi.n	8002174 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	3b3c      	subs	r3, #60	@ 0x3c
 800214a:	221f      	movs	r2, #31
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	4019      	ands	r1, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	3b3c      	subs	r3, #60	@ 0x3c
 8002166:	fa00 f203 	lsl.w	r2, r0, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38
 8002172:	e01d      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	3b5a      	subs	r3, #90	@ 0x5a
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	4019      	ands	r1, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	3b5a      	subs	r3, #90	@ 0x5a
 80021a4:	fa00 f203 	lsl.w	r2, r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80e5 	bne.w	800238a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d91c      	bls.n	8002202 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6999      	ldr	r1, [r3, #24]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	3b1e      	subs	r3, #30
 80021da:	2207      	movs	r2, #7
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4019      	ands	r1, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6898      	ldr	r0, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	619a      	str	r2, [r3, #24]
 8002200:	e019      	b.n	8002236 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6898      	ldr	r0, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	3b01      	subs	r3, #1
 8002254:	2b03      	cmp	r3, #3
 8002256:	d84f      	bhi.n	80022f8 <HAL_ADC_ConfigChannel+0x28c>
 8002258:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <HAL_ADC_ConfigChannel+0x1f4>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002271 	.word	0x08002271
 8002264:	08002293 	.word	0x08002293
 8002268:	080022b5 	.word	0x080022b5
 800226c:	080022d7 	.word	0x080022d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002276:	4b9c      	ldr	r3, [pc, #624]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 8002278:	4013      	ands	r3, r2
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	0691      	lsls	r1, r2, #26
 8002280:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002282:	430a      	orrs	r2, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800228e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002290:	e07b      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002298:	4b93      	ldr	r3, [pc, #588]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	0691      	lsls	r1, r2, #26
 80022a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022b0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b2:	e06a      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022ba:	4b8b      	ldr	r3, [pc, #556]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 80022bc:	4013      	ands	r3, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	0691      	lsls	r1, r2, #26
 80022c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022c6:	430a      	orrs	r2, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022d2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022d4:	e059      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022dc:	4b82      	ldr	r3, [pc, #520]	@ (80024e8 <HAL_ADC_ConfigChannel+0x47c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	0691      	lsls	r1, r2, #26
 80022e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022e8:	430a      	orrs	r2, r1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022f4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022f6:	e048      	b.n	800238a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	069b      	lsls	r3, r3, #26
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800231a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800233e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	069b      	lsls	r3, r3, #26
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002362:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002386:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002388:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x33e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x33e>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_ADC_ConfigChannel+0x340>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 810a 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d00f      	beq.n	80023da <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80023d8:	e049      	b.n	800246e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d91c      	bls.n	8002436 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	3b1b      	subs	r3, #27
 800240e:	2207      	movs	r2, #7
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	4019      	ands	r1, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6898      	ldr	r0, [r3, #8]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	3b1b      	subs	r3, #27
 8002428:	fa00 f203 	lsl.w	r2, r0, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	619a      	str	r2, [r3, #24]
 8002434:	e01b      	b.n	800246e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6959      	ldr	r1, [r3, #20]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	2207      	movs	r2, #7
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	4019      	ands	r1, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6898      	ldr	r0, [r3, #8]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	fa00 f203 	lsl.w	r2, r0, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246e:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <HAL_ADC_ConfigChannel+0x480>)
 8002470:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d105      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800247a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	d015      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800248a:	2b11      	cmp	r3, #17
 800248c:	d105      	bne.n	800249a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800248e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800249e:	2b12      	cmp	r3, #18
 80024a0:	f040 8091 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 808a 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ba:	d102      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x456>
 80024bc:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_ADC_ConfigChannel+0x484>)
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e002      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x45c>
 80024c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024c6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10e      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x488>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x488>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e006      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x48a>
 80024e8:	83fff000 	.word	0x83fff000
 80024ec:	50000300 	.word	0x50000300
 80024f0:	50000100 	.word	0x50000100
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d150      	bne.n	800259c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_ADC_ConfigChannel+0x4b0>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x4b0>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_ADC_ConfigChannel+0x4b2>
 800251c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	d13c      	bne.n	800259c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b10      	cmp	r3, #16
 8002528:	d11d      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x4fa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002532:	d118      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800253c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800253e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002540:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <HAL_ADC_ConfigChannel+0x574>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a27      	ldr	r2, [pc, #156]	@ (80025e4 <HAL_ADC_ConfigChannel+0x578>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9a      	lsrs	r2, r3, #18
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002556:	e002      	b.n	800255e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3b01      	subs	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002564:	e02e      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b11      	cmp	r3, #17
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x51a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002576:	d106      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002582:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002584:	e01e      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b12      	cmp	r3, #18
 800258c:	d11a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800258e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002598:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800259a:	e013      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80025ae:	e00a      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80025c2:	e000      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	376c      	adds	r7, #108	@ 0x6c
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b099      	sub	sp, #100	@ 0x64
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002600:	d102      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002602:	4b5a      	ldr	r3, [pc, #360]	@ (800276c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	e002      	b.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002608:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800260c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0a2      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002622:	2302      	movs	r3, #2
 8002624:	e09b      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d17f      	bne.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d179      	bne.n	800273c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002648:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800264a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d040      	beq.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002666:	035b      	lsls	r3, r3, #13
 8002668:	430b      	orrs	r3, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800266e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d15c      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80026b2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d14b      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026c0:	f023 030f 	bic.w	r3, r3, #15
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	e03c      	b.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d108      	bne.n	8002702 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002724:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	d112      	bne.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800272a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002732:	f023 030f 	bic.w	r3, r3, #15
 8002736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002738:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800273a:	e009      	b.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800274e:	e000      	b.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002750:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800275a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800275e:	4618      	mov	r0, r3
 8002760:	3764      	adds	r7, #100	@ 0x64
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	50000100 	.word	0x50000100
 8002770:	50000300 	.word	0x50000300

08002774 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <ADC_Enable+0x2c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <ADC_Enable+0x2c>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <ADC_Enable+0x2e>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d143      	bne.n	800282e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <ADC_Enable+0xc4>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e02f      	b.n	8002830 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027e0:	f7ff f8f0 	bl	80019c4 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027e6:	e01b      	b.n	8002820 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027e8:	f7ff f8ec 	bl	80019c4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d914      	bls.n	8002820 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d00d      	beq.n	8002820 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0210 	orr.w	r2, r3, #16
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e007      	b.n	8002830 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d1dc      	bne.n	80027e8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	8000003f 	.word	0x8000003f

0800283c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d108      	bne.n	8002868 <ADC_Disable+0x2c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <ADC_Disable+0x2c>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <ADC_Disable+0x2e>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d047      	beq.n	80028fe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030d 	and.w	r3, r3, #13
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10f      	bne.n	800289c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0202 	orr.w	r2, r2, #2
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2203      	movs	r2, #3
 8002892:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002894:	f7ff f896 	bl	80019c4 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800289a:	e029      	b.n	80028f0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0210 	orr.w	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e023      	b.n	8002900 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028b8:	f7ff f884 	bl	80019c4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d914      	bls.n	80028f0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10d      	bne.n	80028f0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f043 0210 	orr.w	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e007      	b.n	8002900 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d0dc      	beq.n	80028b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002918:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293a:	4a04      	ldr	r2, [pc, #16]	@ (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	60d3      	str	r3, [r2, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <__NVIC_GetPriorityGrouping+0x18>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 0307 	and.w	r3, r3, #7
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	2b00      	cmp	r3, #0
 800297c:	db0b      	blt.n	8002996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4907      	ldr	r1, [pc, #28]	@ (80029a4 <__NVIC_EnableIRQ+0x38>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2001      	movs	r0, #1
 800298e:	fa00 f202 	lsl.w	r2, r0, r2
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db0a      	blt.n	80029d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	490c      	ldr	r1, [pc, #48]	@ (80029f4 <__NVIC_SetPriority+0x4c>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d0:	e00a      	b.n	80029e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4908      	ldr	r1, [pc, #32]	@ (80029f8 <__NVIC_SetPriority+0x50>)
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3b04      	subs	r3, #4
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	440b      	add	r3, r1
 80029e6:	761a      	strb	r2, [r3, #24]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000e100 	.word	0xe000e100
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f1c3 0307 	rsb	r3, r3, #7
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf28      	it	cs
 8002a1a:	2304      	movcs	r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d902      	bls.n	8002a2c <NVIC_EncodePriority+0x30>
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b03      	subs	r3, #3
 8002a2a:	e000      	b.n	8002a2e <NVIC_EncodePriority+0x32>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	401a      	ands	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	4313      	orrs	r3, r2
         );
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	@ 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a74:	d301      	bcc.n	8002a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00f      	b.n	8002a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <SysTick_Config+0x40>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a82:	210f      	movs	r1, #15
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a88:	f7ff ff8e 	bl	80029a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <SysTick_Config+0x40>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a92:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <SysTick_Config+0x40>)
 8002a94:	2207      	movs	r2, #7
 8002a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	e000e010 	.word	0xe000e010

08002aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff29 	bl	8002908 <__NVIC_SetPriorityGrouping>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad0:	f7ff ff3e 	bl	8002950 <__NVIC_GetPriorityGrouping>
 8002ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7ff ff8e 	bl	80029fc <NVIC_EncodePriority>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff5d 	bl	80029a8 <__NVIC_SetPriority>
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff31 	bl	800296c <__NVIC_EnableIRQ>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ffa2 	bl	8002a64 <SysTick_Config>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d008      	beq.n	8002b4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e020      	b.n	8002b90 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 020e 	bic.w	r2, r2, #14
 8002b5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d005      	beq.n	8002bbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	e027      	b.n	8002c0e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 020e 	bic.w	r2, r2, #14
 8002bcc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
    } 
  }
  return status;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c26:	e14e      	b.n	8002ec6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8140 	beq.w	8002ec0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d005      	beq.n	8002c58 <HAL_GPIO_Init+0x40>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d130      	bne.n	8002cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c8e:	2201      	movs	r2, #1
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0201 	and.w	r2, r3, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d017      	beq.n	8002cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d123      	bne.n	8002d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	6939      	ldr	r1, [r7, #16]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 809a 	beq.w	8002ec0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ee4 <HAL_GPIO_Init+0x2cc>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4a54      	ldr	r2, [pc, #336]	@ (8002ee4 <HAL_GPIO_Init+0x2cc>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6193      	str	r3, [r2, #24]
 8002d98:	4b52      	ldr	r3, [pc, #328]	@ (8002ee4 <HAL_GPIO_Init+0x2cc>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002da4:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <HAL_GPIO_Init+0x2d0>)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dce:	d013      	beq.n	8002df8 <HAL_GPIO_Init+0x1e0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a46      	ldr	r2, [pc, #280]	@ (8002eec <HAL_GPIO_Init+0x2d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00d      	beq.n	8002df4 <HAL_GPIO_Init+0x1dc>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a45      	ldr	r2, [pc, #276]	@ (8002ef0 <HAL_GPIO_Init+0x2d8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <HAL_GPIO_Init+0x1d8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a44      	ldr	r2, [pc, #272]	@ (8002ef4 <HAL_GPIO_Init+0x2dc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_GPIO_Init+0x1d4>
 8002de8:	2303      	movs	r3, #3
 8002dea:	e006      	b.n	8002dfa <HAL_GPIO_Init+0x1e2>
 8002dec:	2305      	movs	r3, #5
 8002dee:	e004      	b.n	8002dfa <HAL_GPIO_Init+0x1e2>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e002      	b.n	8002dfa <HAL_GPIO_Init+0x1e2>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_GPIO_Init+0x1e2>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	f002 0203 	and.w	r2, r2, #3
 8002e00:	0092      	lsls	r2, r2, #2
 8002e02:	4093      	lsls	r3, r2
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e0a:	4937      	ldr	r1, [pc, #220]	@ (8002ee8 <HAL_GPIO_Init+0x2d0>)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e18:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e66:	4a24      	ldr	r2, [pc, #144]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002eba:	4a0f      	ldr	r2, [pc, #60]	@ (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f47f aea9 	bne.w	8002c28 <HAL_GPIO_Init+0x10>
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	48000400 	.word	0x48000400
 8002ef0:	48000800 	.word	0x48000800
 8002ef4:	48000c00 	.word	0x48000c00
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f66:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fe14 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40010400 	.word	0x40010400

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f001 b823 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 817d 	beq.w	80032c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fc8:	4bbc      	ldr	r3, [pc, #752]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d00c      	beq.n	8002fee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd4:	4bb9      	ldr	r3, [pc, #740]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d15c      	bne.n	800309a <HAL_RCC_OscConfig+0x10e>
 8002fe0:	4bb6      	ldr	r3, [pc, #728]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fec:	d155      	bne.n	800309a <HAL_RCC_OscConfig+0x10e>
 8002fee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ff2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003002:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d102      	bne.n	8003020 <HAL_RCC_OscConfig+0x94>
 800301a:	4ba8      	ldr	r3, [pc, #672]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	e015      	b.n	800304c <HAL_RCC_OscConfig+0xc0>
 8003020:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003024:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003034:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003038:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800303c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003048:	4b9c      	ldr	r3, [pc, #624]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003050:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003054:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003058:	fa92 f2a2 	rbit	r2, r2
 800305c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003060:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f002 021f 	and.w	r2, r2, #31
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 811f 	beq.w	80032c0 <HAL_RCC_OscConfig+0x334>
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8116 	bne.w	80032c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f000 bfaf 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x12e>
 80030ac:	4b83      	ldr	r3, [pc, #524]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a82      	ldr	r2, [pc, #520]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	e036      	b.n	8003128 <HAL_RCC_OscConfig+0x19c>
 80030ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x158>
 80030ca:	4b7c      	ldr	r3, [pc, #496]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7b      	ldr	r2, [pc, #492]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b79      	ldr	r3, [pc, #484]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a78      	ldr	r2, [pc, #480]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e021      	b.n	8003128 <HAL_RCC_OscConfig+0x19c>
 80030e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x184>
 80030f6:	4b71      	ldr	r3, [pc, #452]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a70      	ldr	r2, [pc, #448]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b6e      	ldr	r3, [pc, #440]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6d      	ldr	r2, [pc, #436]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0x19c>
 8003110:	4b6a      	ldr	r3, [pc, #424]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a69      	ldr	r2, [pc, #420]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b67      	ldr	r3, [pc, #412]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a66      	ldr	r2, [pc, #408]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003126:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003128:	4b64      	ldr	r3, [pc, #400]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	f023 020f 	bic.w	r2, r3, #15
 8003130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	495f      	ldr	r1, [pc, #380]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 800313e:	4313      	orrs	r3, r2
 8003140:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d059      	beq.n	8003206 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe fc37 	bl	80019c4 <HAL_GetTick>
 8003156:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe fc32 	bl	80019c4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b64      	cmp	r3, #100	@ 0x64
 800316a:	d902      	bls.n	8003172 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	f000 bf43 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003172:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003176:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003186:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_OscConfig+0x218>
 800319e:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e015      	b.n	80031d0 <HAL_RCC_OscConfig+0x244>
 80031a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031a8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80031b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031bc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80031c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80031cc:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031d4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80031d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80031dc:	fa92 f2a2 	rbit	r2, r2
 80031e0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80031e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80031e8:	fab2 f282 	clz	r2, r2
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f042 0220 	orr.w	r2, r2, #32
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f002 021f 	and.w	r2, r2, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ab      	beq.n	800315c <HAL_RCC_OscConfig+0x1d0>
 8003204:	e05d      	b.n	80032c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fe fbdd 	bl	80019c4 <HAL_GetTick>
 800320a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fbd8 	bl	80019c4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b64      	cmp	r3, #100	@ 0x64
 800321e:	d902      	bls.n	8003226 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	f000 bee9 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003226:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800322a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800323a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0x2cc>
 8003252:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	e015      	b.n	8003284 <HAL_RCC_OscConfig+0x2f8>
 8003258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800325c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800326c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003270:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003274:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_RCC_OscConfig+0x330>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003288:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800328c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003298:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f002 021f 	and.w	r2, r2, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ab      	bne.n	8003210 <HAL_RCC_OscConfig+0x284>
 80032b8:	e003      	b.n	80032c2 <HAL_RCC_OscConfig+0x336>
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 817d 	beq.w	80035d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032d8:	4ba6      	ldr	r3, [pc, #664]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032e4:	4ba3      	ldr	r3, [pc, #652]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d172      	bne.n	80033d6 <HAL_RCC_OscConfig+0x44a>
 80032f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d16c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x44a>
 80032fc:	2302      	movs	r3, #2
 80032fe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800330e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <HAL_RCC_OscConfig+0x3a0>
 8003326:	4b93      	ldr	r3, [pc, #588]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	e013      	b.n	8003354 <HAL_RCC_OscConfig+0x3c8>
 800332c:	2302      	movs	r3, #2
 800332e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800333e:	2302      	movs	r3, #2
 8003340:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003344:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003350:	4b88      	ldr	r3, [pc, #544]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	2202      	movs	r2, #2
 8003356:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800335a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003366:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800336a:	fab2 f282 	clz	r2, r2
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	f042 0220 	orr.w	r2, r2, #32
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	f002 021f 	and.w	r2, r2, #31
 800337a:	2101      	movs	r1, #1
 800337c:	fa01 f202 	lsl.w	r2, r1, r2
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCC_OscConfig+0x410>
 8003386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d002      	beq.n	800339c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f000 be2e 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b75      	ldr	r3, [pc, #468]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	21f8      	movs	r1, #248	@ 0xf8
 80033b2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80033ba:	fa91 f1a1 	rbit	r1, r1
 80033be:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80033c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80033c6:	fab1 f181 	clz	r1, r1
 80033ca:	b2c9      	uxtb	r1, r1
 80033cc:	408b      	lsls	r3, r1
 80033ce:	4969      	ldr	r1, [pc, #420]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d4:	e0fd      	b.n	80035d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8088 	beq.w	80034f8 <HAL_RCC_OscConfig+0x56c>
 80033e8:	2301      	movs	r3, #1
 80033ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80033fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003408:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	2301      	movs	r3, #1
 8003412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe fad6 	bl	80019c4 <HAL_GetTick>
 8003418:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe fad1 	bl	80019c4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	f000 bde2 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003434:	2302      	movs	r3, #2
 8003436:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003446:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_RCC_OscConfig+0x4d8>
 800345e:	4b45      	ldr	r3, [pc, #276]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e013      	b.n	800348c <HAL_RCC_OscConfig+0x500>
 8003464:	2302      	movs	r3, #2
 8003466:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003476:	2302      	movs	r3, #2
 8003478:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800347c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003488:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	2202      	movs	r2, #2
 800348e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003492:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003496:	fa92 f2a2 	rbit	r2, r2
 800349a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800349e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80034a2:	fab2 f282 	clz	r2, r2
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	f042 0220 	orr.w	r2, r2, #32
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f002 021f 	and.w	r2, r2, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0af      	beq.n	800341e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4b2d      	ldr	r3, [pc, #180]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	21f8      	movs	r1, #248	@ 0xf8
 80034d4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80034dc:	fa91 f1a1 	rbit	r1, r1
 80034e0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80034e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80034e8:	fab1 f181 	clz	r1, r1
 80034ec:	b2c9      	uxtb	r1, r1
 80034ee:	408b      	lsls	r3, r1
 80034f0:	4920      	ldr	r1, [pc, #128]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
 80034f6:	e06c      	b.n	80035d2 <HAL_RCC_OscConfig+0x646>
 80034f8:	2301      	movs	r3, #1
 80034fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800350a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003518:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	461a      	mov	r2, r3
 8003520:	2300      	movs	r3, #0
 8003522:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe fa4e 	bl	80019c4 <HAL_GetTick>
 8003528:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352e:	f7fe fa49 	bl	80019c4 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d902      	bls.n	8003544 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	f000 bd5a 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003544:	2302      	movs	r3, #2
 8003546:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003556:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d104      	bne.n	8003578 <HAL_RCC_OscConfig+0x5ec>
 800356e:	4b01      	ldr	r3, [pc, #4]	@ (8003574 <HAL_RCC_OscConfig+0x5e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	e015      	b.n	80035a0 <HAL_RCC_OscConfig+0x614>
 8003574:	40021000 	.word	0x40021000
 8003578:	2302      	movs	r3, #2
 800357a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800358a:	2302      	movs	r3, #2
 800358c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003590:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800359c:	4bc8      	ldr	r3, [pc, #800]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	2202      	movs	r2, #2
 80035a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80035a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80035aa:	fa92 f2a2 	rbit	r2, r2
 80035ae:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80035b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f042 0220 	orr.w	r2, r2, #32
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f002 021f 	and.w	r2, r2, #31
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f202 	lsl.w	r2, r1, r2
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ad      	bne.n	800352e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8110 	beq.w	8003808 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d079      	beq.n	80036ec <HAL_RCC_OscConfig+0x760>
 80035f8:	2301      	movs	r3, #1
 80035fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	4bab      	ldr	r3, [pc, #684]	@ (80038c4 <HAL_RCC_OscConfig+0x938>)
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	461a      	mov	r2, r3
 800361e:	2301      	movs	r3, #1
 8003620:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003622:	f7fe f9cf 	bl	80019c4 <HAL_GetTick>
 8003626:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362c:	f7fe f9ca 	bl	80019c4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d902      	bls.n	8003642 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	f000 bcdb 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003642:	2302      	movs	r3, #2
 8003644:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800365c:	2202      	movs	r2, #2
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	fa93 f2a3 	rbit	r2, r3
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003680:	2202      	movs	r2, #2
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	fa93 f2a3 	rbit	r2, r3
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800369a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369c:	4b88      	ldr	r3, [pc, #544]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 800369e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036a8:	2102      	movs	r1, #2
 80036aa:	6019      	str	r1, [r3, #0]
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f1a3 	rbit	r1, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036c2:	6019      	str	r1, [r3, #0]
  return result;
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0a0      	beq.n	800362c <HAL_RCC_OscConfig+0x6a0>
 80036ea:	e08d      	b.n	8003808 <HAL_RCC_OscConfig+0x87c>
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800370e:	601a      	str	r2, [r3, #0]
  return result;
 8003710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003714:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003718:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	4b68      	ldr	r3, [pc, #416]	@ (80038c4 <HAL_RCC_OscConfig+0x938>)
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	461a      	mov	r2, r3
 800372a:	2300      	movs	r3, #0
 800372c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fe f949 	bl	80019c4 <HAL_GetTick>
 8003732:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003738:	f7fe f944 	bl	80019c4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d902      	bls.n	800374e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	f000 bc55 	b.w	8003ff8 <HAL_RCC_OscConfig+0x106c>
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003756:	2202      	movs	r2, #2
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800377a:	2202      	movs	r2, #2
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800379e:	2202      	movs	r2, #2
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	fa93 f2a3 	rbit	r2, r3
 80037b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 80037bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037c6:	2102      	movs	r1, #2
 80037c8:	6019      	str	r1, [r3, #0]
 80037ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fa93 f1a3 	rbit	r1, r3
 80037d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037e0:	6019      	str	r1, [r3, #0]
  return result;
 80037e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d197      	bne.n	8003738 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 81a1 	beq.w	8003b60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003824:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d116      	bne.n	800385e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	4a22      	ldr	r2, [pc, #136]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 8003836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800383a:	61d3      	str	r3, [r2, #28]
 800383c:	4b20      	ldr	r3, [pc, #128]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003852:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003856:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385e:	4b1a      	ldr	r3, [pc, #104]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11a      	bne.n	80038a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386a:	4b17      	ldr	r3, [pc, #92]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003874:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003876:	f7fe f8a5 	bl	80019c4 <HAL_GetTick>
 800387a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	e009      	b.n	8003894 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fe f8a0 	bl	80019c4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	@ 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e3b1      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <HAL_RCC_OscConfig+0x93c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d10d      	bne.n	80038cc <HAL_RCC_OscConfig+0x940>
 80038b0:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4a02      	ldr	r2, [pc, #8]	@ (80038c0 <HAL_RCC_OscConfig+0x934>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6213      	str	r3, [r2, #32]
 80038bc:	e03c      	b.n	8003938 <HAL_RCC_OscConfig+0x9ac>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	10908120 	.word	0x10908120
 80038c8:	40007000 	.word	0x40007000
 80038cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10c      	bne.n	80038f6 <HAL_RCC_OscConfig+0x96a>
 80038dc:	4bc1      	ldr	r3, [pc, #772]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4ac0      	ldr	r2, [pc, #768]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6213      	str	r3, [r2, #32]
 80038e8:	4bbe      	ldr	r3, [pc, #760]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4abd      	ldr	r2, [pc, #756]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6213      	str	r3, [r2, #32]
 80038f4:	e020      	b.n	8003938 <HAL_RCC_OscConfig+0x9ac>
 80038f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b05      	cmp	r3, #5
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x994>
 8003906:	4bb7      	ldr	r3, [pc, #732]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4ab6      	ldr	r2, [pc, #728]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	6213      	str	r3, [r2, #32]
 8003912:	4bb4      	ldr	r3, [pc, #720]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4ab3      	ldr	r2, [pc, #716]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6213      	str	r3, [r2, #32]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0x9ac>
 8003920:	4bb0      	ldr	r3, [pc, #704]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4aaf      	ldr	r2, [pc, #700]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6213      	str	r3, [r2, #32]
 800392c:	4bad      	ldr	r3, [pc, #692]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4aac      	ldr	r2, [pc, #688]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003932:	f023 0304 	bic.w	r3, r3, #4
 8003936:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8081 	beq.w	8003a4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7fe f83b 	bl	80019c4 <HAL_GetTick>
 800394e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fe f836 	bl	80019c4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e345      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
 800396c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003970:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003974:	2202      	movs	r2, #2
 8003976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	fa93 f2a3 	rbit	r2, r3
 8003986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003994:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003998:	2202      	movs	r2, #2
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	fa93 f2a3 	rbit	r2, r3
 80039aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80039b2:	601a      	str	r2, [r3, #0]
  return result;
 80039b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80039bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0302 	orr.w	r3, r3, #2
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_OscConfig+0xa4c>
 80039d2:	4b84      	ldr	r3, [pc, #528]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	e013      	b.n	8003a00 <HAL_RCC_OscConfig+0xa74>
 80039d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039e0:	2202      	movs	r2, #2
 80039e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fa93 f2a3 	rbit	r2, r3
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	4b79      	ldr	r3, [pc, #484]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a04:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a08:	2102      	movs	r1, #2
 8003a0a:	6011      	str	r1, [r2, #0]
 8003a0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a10:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	fa92 f1a2 	rbit	r1, r2
 8003a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a1e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a22:	6011      	str	r1, [r2, #0]
  return result;
 8003a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a28:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	fab2 f282 	clz	r2, r2
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f002 021f 	and.w	r2, r2, #31
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f202 	lsl.w	r2, r1, r2
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d084      	beq.n	8003954 <HAL_RCC_OscConfig+0x9c8>
 8003a4a:	e07f      	b.n	8003b4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fd ffba 	bl	80019c4 <HAL_GetTick>
 8003a50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	e00b      	b.n	8003a6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fd ffb5 	bl	80019c4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e2c4      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003a76:	2202      	movs	r2, #2
 8003a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a96:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fa93 f2a3 	rbit	r2, r3
 8003aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ab4:	601a      	str	r2, [r3, #0]
  return result;
 8003ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003abe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d102      	bne.n	8003ada <HAL_RCC_OscConfig+0xb4e>
 8003ad4:	4b43      	ldr	r3, [pc, #268]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	e013      	b.n	8003b02 <HAL_RCC_OscConfig+0xb76>
 8003ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ade:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	fa93 f2a3 	rbit	r2, r3
 8003af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	4b39      	ldr	r3, [pc, #228]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b06:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b12:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	fa92 f1a2 	rbit	r1, r2
 8003b1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b20:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b24:	6011      	str	r1, [r2, #0]
  return result;
 8003b26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b2a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	fab2 f282 	clz	r2, r2
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f002 021f 	and.w	r2, r2, #31
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d184      	bne.n	8003a56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d105      	bne.n	8003b60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b54:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4a22      	ldr	r2, [pc, #136]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8242 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b72:	4b1c      	ldr	r3, [pc, #112]	@ (8003be4 <HAL_RCC_OscConfig+0xc58>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	f000 8213 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	f040 8162 	bne.w	8003e56 <HAL_RCC_OscConfig+0xeca>
 8003b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b96:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003b9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	fa93 f2a3 	rbit	r2, r3
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003bb6:	601a      	str	r2, [r3, #0]
  return result;
 8003bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003bc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fef4 	bl	80019c4 <HAL_GetTick>
 8003bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	e00c      	b.n	8003bfc <HAL_RCC_OscConfig+0xc70>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd feec 	bl	80019c4 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e1fd      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c00:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fa93 f2a3 	rbit	r2, r3
 8003c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c20:	601a      	str	r2, [r3, #0]
  return result;
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_OscConfig+0xcba>
 8003c40:	4bb0      	ldr	r3, [pc, #704]	@ (8003f04 <HAL_RCC_OscConfig+0xf78>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	e027      	b.n	8003c96 <HAL_RCC_OscConfig+0xd0a>
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c70:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	fa93 f2a3 	rbit	r2, r3
 8003c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	4b9c      	ldr	r3, [pc, #624]	@ (8003f04 <HAL_RCC_OscConfig+0xf78>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c9a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003c9e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ca2:	6011      	str	r1, [r2, #0]
 8003ca4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ca8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	fa92 f1a2 	rbit	r1, r2
 8003cb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cb6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003cba:	6011      	str	r1, [r2, #0]
  return result;
 8003cbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cc0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f002 021f 	and.w	r2, r2, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d182      	bne.n	8003be8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce2:	4b88      	ldr	r3, [pc, #544]	@ (8003f04 <HAL_RCC_OscConfig+0xf78>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	430b      	orrs	r3, r1
 8003d04:	497f      	ldr	r1, [pc, #508]	@ (8003f04 <HAL_RCC_OscConfig+0xf78>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
 8003d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	fa93 f2a3 	rbit	r2, r3
 8003d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d2e:	601a      	str	r2, [r3, #0]
  return result;
 8003d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d34:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd fe38 	bl	80019c4 <HAL_GetTick>
 8003d54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d58:	e009      	b.n	8003d6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5a:	f7fd fe33 	bl	80019c4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e144      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d72:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d80:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003d92:	601a      	str	r2, [r3, #0]
  return result;
 8003d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d98:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003d9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_RCC_OscConfig+0xe2c>
 8003db2:	4b54      	ldr	r3, [pc, #336]	@ (8003f04 <HAL_RCC_OscConfig+0xf78>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	e027      	b.n	8003e08 <HAL_RCC_OscConfig+0xe7c>
 8003db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dbc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	fa93 f2a3 	rbit	r2, r3
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003de6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fa93 f2a3 	rbit	r2, r3
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	4b3f      	ldr	r3, [pc, #252]	@ (8003f04 <HAL_RCC_OscConfig+0xf78>)
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e0c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e10:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e14:	6011      	str	r1, [r2, #0]
 8003e16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e1a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	fa92 f1a2 	rbit	r1, r2
 8003e24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e2c:	6011      	str	r1, [r2, #0]
  return result;
 8003e2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e32:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	fab2 f282 	clz	r2, r2
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	f042 0220 	orr.w	r2, r2, #32
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	f002 021f 	and.w	r2, r2, #31
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d082      	beq.n	8003d5a <HAL_RCC_OscConfig+0xdce>
 8003e54:	e0cf      	b.n	8003ff6 <HAL_RCC_OscConfig+0x106a>
 8003e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e68:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f2a3 	rbit	r2, r3
 8003e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e76:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e7a:	601a      	str	r2, [r3, #0]
  return result;
 8003e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e80:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	461a      	mov	r2, r3
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fd92 	bl	80019c4 <HAL_GetTick>
 8003ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea4:	e009      	b.n	8003eba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd fd8d 	bl	80019c4 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e09e      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
 8003eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ec2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	fa93 f2a3 	rbit	r2, r3
 8003ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eda:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ede:	601a      	str	r2, [r3, #0]
  return result;
 8003ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ee8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d104      	bne.n	8003f08 <HAL_RCC_OscConfig+0xf7c>
 8003efe:	4b01      	ldr	r3, [pc, #4]	@ (8003f04 <HAL_RCC_OscConfig+0xf78>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e029      	b.n	8003f58 <HAL_RCC_OscConfig+0xfcc>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	4b2b      	ldr	r3, [pc, #172]	@ (8004004 <HAL_RCC_OscConfig+0x1078>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f5c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003f60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f64:	6011      	str	r1, [r2, #0]
 8003f66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f6a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	fa92 f1a2 	rbit	r1, r2
 8003f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f78:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f7c:	6011      	str	r1, [r2, #0]
  return result;
 8003f7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f82:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	fab2 f282 	clz	r2, r2
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	f042 0220 	orr.w	r2, r2, #32
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	f002 021f 	and.w	r2, r2, #31
 8003f98:	2101      	movs	r1, #1
 8003f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d180      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xf1a>
 8003fa4:	e027      	b.n	8003ff6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e01e      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fba:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <HAL_RCC_OscConfig+0x1078>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003fc6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003fde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000

08004008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b09e      	sub	sp, #120	@ 0x78
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e162      	b.n	80042e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b90      	ldr	r3, [pc, #576]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d910      	bls.n	8004050 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b8d      	ldr	r3, [pc, #564]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 0207 	bic.w	r2, r3, #7
 8004036:	498b      	ldr	r1, [pc, #556]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b89      	ldr	r3, [pc, #548]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e14a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b82      	ldr	r3, [pc, #520]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	497f      	ldr	r1, [pc, #508]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80dc 	beq.w	8004234 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d13c      	bne.n	80040fe <HAL_RCC_ClockConfig+0xf6>
 8004084:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004088:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004094:	fab3 f383 	clz	r3, r3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_ClockConfig+0xa6>
 80040a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	e00f      	b.n	80040ce <HAL_RCC_ClockConfig+0xc6>
 80040ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80040bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80040c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ca:	4b67      	ldr	r3, [pc, #412]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040d6:	fa92 f2a2 	rbit	r2, r2
 80040da:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80040dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040de:	fab2 f282 	clz	r2, r2
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f042 0220 	orr.w	r2, r2, #32
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	f002 021f 	and.w	r2, r2, #31
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f202 	lsl.w	r2, r1, r2
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d17b      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0f3      	b.n	80042e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d13c      	bne.n	8004180 <HAL_RCC_ClockConfig+0x178>
 8004106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800410a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d102      	bne.n	8004130 <HAL_RCC_ClockConfig+0x128>
 800412a:	4b4f      	ldr	r3, [pc, #316]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	e00f      	b.n	8004150 <HAL_RCC_ClockConfig+0x148>
 8004130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004134:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	647b      	str	r3, [r7, #68]	@ 0x44
 800413e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004142:	643b      	str	r3, [r7, #64]	@ 0x40
 8004144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800414c:	4b46      	ldr	r3, [pc, #280]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004154:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004156:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004158:	fa92 f2a2 	rbit	r2, r2
 800415c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800415e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004160:	fab2 f282 	clz	r2, r2
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	f042 0220 	orr.w	r2, r2, #32
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	f002 021f 	and.w	r2, r2, #31
 8004170:	2101      	movs	r1, #1
 8004172:	fa01 f202 	lsl.w	r2, r1, r2
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d13a      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0b2      	b.n	80042e6 <HAL_RCC_ClockConfig+0x2de>
 8004180:	2302      	movs	r3, #2
 8004182:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d102      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x1a0>
 80041a2:	4b31      	ldr	r3, [pc, #196]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	e00d      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1bc>
 80041a8:	2302      	movs	r3, #2
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	2302      	movs	r3, #2
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	4b29      	ldr	r3, [pc, #164]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	2202      	movs	r2, #2
 80041c6:	61ba      	str	r2, [r7, #24]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	fa92 f2a2 	rbit	r2, r2
 80041ce:	617a      	str	r2, [r7, #20]
  return result;
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	fab2 f282 	clz	r2, r2
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f042 0220 	orr.w	r2, r2, #32
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f002 021f 	and.w	r2, r2, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f202 	lsl.w	r2, r1, r2
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e079      	b.n	80042e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f023 0203 	bic.w	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	491a      	ldr	r1, [pc, #104]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004204:	f7fd fbde 	bl	80019c4 <HAL_GetTick>
 8004208:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	e00a      	b.n	8004222 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420c:	f7fd fbda 	bl	80019c4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e061      	b.n	80042e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <HAL_RCC_ClockConfig+0x260>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 020c 	and.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	429a      	cmp	r2, r3
 8004232:	d1eb      	bne.n	800420c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d214      	bcs.n	800426c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 0207 	bic.w	r2, r3, #7
 800424a:	4906      	ldr	r1, [pc, #24]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <HAL_RCC_ClockConfig+0x25c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e040      	b.n	80042e6 <HAL_RCC_ClockConfig+0x2de>
 8004264:	40022000 	.word	0x40022000
 8004268:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <HAL_RCC_ClockConfig+0x2e8>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	491a      	ldr	r1, [pc, #104]	@ (80042f0 <HAL_RCC_ClockConfig+0x2e8>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004296:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <HAL_RCC_ClockConfig+0x2e8>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4912      	ldr	r1, [pc, #72]	@ (80042f0 <HAL_RCC_ClockConfig+0x2e8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042aa:	f000 f829 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042ae:	4601      	mov	r1, r0
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <HAL_RCC_ClockConfig+0x2e8>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b8:	22f0      	movs	r2, #240	@ 0xf0
 80042ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	fa92 f2a2 	rbit	r2, r2
 80042c2:	60fa      	str	r2, [r7, #12]
  return result;
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	fab2 f282 	clz	r2, r2
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	40d3      	lsrs	r3, r2
 80042ce:	4a09      	ldr	r2, [pc, #36]	@ (80042f4 <HAL_RCC_ClockConfig+0x2ec>)
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	fa21 f303 	lsr.w	r3, r1, r3
 80042d6:	4a08      	ldr	r2, [pc, #32]	@ (80042f8 <HAL_RCC_ClockConfig+0x2f0>)
 80042d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042da:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <HAL_RCC_ClockConfig+0x2f4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd fb2c 	bl	800193c <HAL_InitTick>
  
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3778      	adds	r7, #120	@ 0x78
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	08008320 	.word	0x08008320
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b08b      	sub	sp, #44	@ 0x2c
 8004304:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	2300      	movs	r3, #0
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800431a:	4b29      	ldr	r3, [pc, #164]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b04      	cmp	r3, #4
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x30>
 800432a:	2b08      	cmp	r3, #8
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x36>
 800432e:	e03c      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004330:	4b24      	ldr	r3, [pc, #144]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004332:	623b      	str	r3, [r7, #32]
      break;
 8004334:	e03c      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800433c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004340:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	fa92 f2a2 	rbit	r2, r2
 8004348:	607a      	str	r2, [r7, #4]
  return result;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	fab2 f282 	clz	r2, r2
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	40d3      	lsrs	r3, r2
 8004354:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800435a:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	220f      	movs	r2, #15
 8004364:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	fa92 f2a2 	rbit	r2, r2
 800436c:	60fa      	str	r2, [r7, #12]
  return result;
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	fab2 f282 	clz	r2, r2
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	40d3      	lsrs	r3, r2
 8004378:	4a14      	ldr	r2, [pc, #80]	@ (80043cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800437a:	5cd3      	ldrb	r3, [r2, r3]
 800437c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004388:	4a0e      	ldr	r2, [pc, #56]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
 8004398:	e004      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	4a0c      	ldr	r2, [pc, #48]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	623b      	str	r3, [r7, #32]
      break;
 80043a8:	e002      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043ac:	623b      	str	r3, [r7, #32]
      break;
 80043ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b0:	6a3b      	ldr	r3, [r7, #32]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	372c      	adds	r7, #44	@ 0x2c
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	007a1200 	.word	0x007a1200
 80043c8:	08008338 	.word	0x08008338
 80043cc:	08008348 	.word	0x08008348
 80043d0:	003d0900 	.word	0x003d0900

080043d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d8:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000000 	.word	0x20000000

080043ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043f2:	f7ff ffef 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 80043f6:	4601      	mov	r1, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004400:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004404:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	fa92 f2a2 	rbit	r2, r2
 800440c:	603a      	str	r2, [r7, #0]
  return result;
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	fab2 f282 	clz	r2, r2
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	40d3      	lsrs	r3, r2
 8004418:	4a04      	ldr	r2, [pc, #16]	@ (800442c <HAL_RCC_GetPCLK1Freq+0x40>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	08008330 	.word	0x08008330

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004436:	f7ff ffcd 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 800443a:	4601      	mov	r1, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004444:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004448:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	fa92 f2a2 	rbit	r2, r2
 8004450:	603a      	str	r2, [r7, #0]
  return result;
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	fab2 f282 	clz	r2, r2
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	40d3      	lsrs	r3, r2
 800445c:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <HAL_RCC_GetPCLK2Freq+0x40>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	08008330 	.word	0x08008330

08004474 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b092      	sub	sp, #72	@ 0x48
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80cd 	beq.w	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004498:	4b86      	ldr	r3, [pc, #536]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10e      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b83      	ldr	r3, [pc, #524]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4a82      	ldr	r2, [pc, #520]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	61d3      	str	r3, [r2, #28]
 80044b0:	4b80      	ldr	r3, [pc, #512]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	4b7d      	ldr	r3, [pc, #500]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d118      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ce:	4b7a      	ldr	r3, [pc, #488]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a79      	ldr	r2, [pc, #484]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044da:	f7fd fa73 	bl	80019c4 <HAL_GetTick>
 80044de:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	e008      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fd fa6f 	bl	80019c4 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	@ 0x64
 80044ee:	d901      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0db      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b70      	ldr	r3, [pc, #448]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004500:	4b6c      	ldr	r3, [pc, #432]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004508:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800450a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d07d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800451a:	429a      	cmp	r2, r3
 800451c:	d076      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451e:	4b65      	ldr	r3, [pc, #404]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004528:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800452c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	4b5e      	ldr	r3, [pc, #376]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	2301      	movs	r3, #1
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004550:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800455a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	4b55      	ldr	r3, [pc, #340]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	2300      	movs	r3, #0
 800456e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004570:	4a50      	ldr	r2, [pc, #320]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004574:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d045      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd fa20 	bl	80019c4 <HAL_GetTick>
 8004584:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	e00a      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fd fa1c 	bl	80019c4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e086      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x238>
 800459e:	2302      	movs	r3, #2
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	2302      	movs	r3, #2
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	61fb      	str	r3, [r7, #28]
  return result;
 80045b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d102      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80045cc:	4b39      	ldr	r3, [pc, #228]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	e007      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	4b35      	ldr	r3, [pc, #212]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	2202      	movs	r2, #2
 80045e4:	613a      	str	r2, [r7, #16]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	60fa      	str	r2, [r7, #12]
  return result;
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	f002 021f 	and.w	r2, r2, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f202 	lsl.w	r2, r1, r2
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0bd      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800460c:	4b29      	ldr	r3, [pc, #164]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4926      	ldr	r1, [pc, #152]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461a:	4313      	orrs	r3, r2
 800461c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800461e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b23      	ldr	r3, [pc, #140]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4a22      	ldr	r2, [pc, #136]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004630:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463e:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	491a      	ldr	r1, [pc, #104]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800464c:	4313      	orrs	r3, r2
 800464e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	f023 0210 	bic.w	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4912      	ldr	r1, [pc, #72]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800466a:	4313      	orrs	r3, r2
 800466c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800467a:	4b0e      	ldr	r3, [pc, #56]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	490b      	ldr	r1, [pc, #44]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004688:	4313      	orrs	r3, r2
 800468a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4903      	ldr	r1, [pc, #12]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3748      	adds	r7, #72	@ 0x48
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
 80046bc:	10908100 	.word	0x10908100

080046c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e040      	b.n	8004754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc ff82 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2224      	movs	r2, #36	@ 0x24
 80046ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fbbc 	bl	8004e7c <UART_SetConfig>
 8004704:	4603      	mov	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e022      	b.n	8004754 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fce6 	bl	80050e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800472a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800473a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fd6d 	bl	800522c <UART_CheckIdleState>
 8004752:	4603      	mov	r3, r0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004770:	2b20      	cmp	r3, #32
 8004772:	d177      	bne.n	8004864 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_UART_Transmit+0x24>
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e070      	b.n	8004866 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2221      	movs	r2, #33	@ 0x21
 8004790:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004792:	f7fd f917 	bl	80019c4 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b0:	d108      	bne.n	80047c4 <HAL_UART_Transmit+0x68>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e003      	b.n	80047cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047cc:	e02f      	b.n	800482e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2180      	movs	r1, #128	@ 0x80
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fdcf 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e03b      	b.n	8004866 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	881a      	ldrh	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004800:	b292      	uxth	r2, r2
 8004802:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	3302      	adds	r3, #2
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e007      	b.n	800481c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	781a      	ldrb	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3301      	adds	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1c9      	bne.n	80047ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2140      	movs	r1, #64	@ 0x40
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fd99 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e005      	b.n	8004866 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b0ba      	sub	sp, #232	@ 0xe8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800489a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800489e:	4013      	ands	r3, r2
 80048a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80048a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d115      	bne.n	80048d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00f      	beq.n	80048d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 82ab 	beq.w	8004e24 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
      }
      return;
 80048d6:	e2a5      	b.n	8004e24 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8117 	beq.w	8004b10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80048f2:	4b85      	ldr	r3, [pc, #532]	@ (8004b08 <HAL_UART_IRQHandler+0x298>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 810a 	beq.w	8004b10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <HAL_UART_IRQHandler+0xbc>
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2201      	movs	r2, #1
 800491a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d011      	beq.n	800495c <HAL_UART_IRQHandler+0xec>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2202      	movs	r2, #2
 800494a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d011      	beq.n	800498c <HAL_UART_IRQHandler+0x11c>
 8004968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2204      	movs	r2, #4
 800497a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004982:	f043 0202 	orr.w	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d017      	beq.n	80049c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2208      	movs	r2, #8
 80049b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049be:	f043 0208 	orr.w	r2, r3, #8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <HAL_UART_IRQHandler+0x18a>
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8211 	beq.w	8004e28 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b40      	cmp	r3, #64	@ 0x40
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d04f      	beq.n	8004af2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fcf9 	bl	800544a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a62:	2b40      	cmp	r3, #64	@ 0x40
 8004a64:	d141      	bne.n	8004aea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1d9      	bne.n	8004a66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d013      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <HAL_UART_IRQHandler+0x29c>)
 8004ac0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe f868 	bl	8002b9c <HAL_DMA_Abort_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d017      	beq.n	8004b02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e00f      	b.n	8004b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9b4 	bl	8004e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	e00b      	b.n	8004b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f9b0 	bl	8004e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e007      	b.n	8004b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9ac 	bl	8004e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004b00:	e192      	b.n	8004e28 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b02:	bf00      	nop
    return;
 8004b04:	e190      	b.n	8004e28 <HAL_UART_IRQHandler+0x5b8>
 8004b06:	bf00      	nop
 8004b08:	04000120 	.word	0x04000120
 8004b0c:	08005513 	.word	0x08005513

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	f040 814b 	bne.w	8004db0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8144 	beq.w	8004db0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 813d 	beq.w	8004db0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b48:	2b40      	cmp	r3, #64	@ 0x40
 8004b4a:	f040 80b5 	bne.w	8004cb8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8164 	beq.w	8004e2c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	f080 815c 	bcs.w	8004e2c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	f000 8086 	beq.w	8004c96 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ba2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bb8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1da      	bne.n	8004b8a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004be4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bf8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e1      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3308      	adds	r3, #8
 8004c16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e3      	bne.n	8004c10 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c66:	f023 0310 	bic.w	r3, r3, #16
 8004c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e4      	bne.n	8004c56 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd ff4a 	bl	8002b2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8d7 	bl	8004e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cb6:	e0b9      	b.n	8004e2c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80ab 	beq.w	8004e30 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80a6 	beq.w	8004e30 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d08:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e4      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	623b      	str	r3, [r7, #32]
   return(result);
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e3      	bne.n	8004d1a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0310 	bic.w	r3, r3, #16
 8004d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	617b      	str	r3, [r7, #20]
   return(result);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e4      	bne.n	8004d66 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004da2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f85b 	bl	8004e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dae:	e03f      	b.n	8004e30 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00e      	beq.n	8004dda <HAL_UART_IRQHandler+0x56a>
 8004dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004dd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fbdd 	bl	8005592 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dd8:	e02d      	b.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01c      	beq.n	8004e34 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
    }
    return;
 8004e02:	e017      	b.n	8004e34 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d012      	beq.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
 8004e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00c      	beq.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fb8e 	bl	800553e <UART_EndTransmit_IT>
    return;
 8004e22:	e008      	b.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e24:	bf00      	nop
 8004e26:	e006      	b.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004e28:	bf00      	nop
 8004e2a:	e004      	b.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e2c:	bf00      	nop
 8004e2e:	e002      	b.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e30:	bf00      	nop
 8004e32:	e000      	b.n	8004e36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004e34:	bf00      	nop
  }

}
 8004e36:	37e8      	adds	r7, #232	@ 0xe8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80050d0 <UART_SetConfig+0x254>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a78      	ldr	r2, [pc, #480]	@ (80050d4 <UART_SetConfig+0x258>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d120      	bne.n	8004f3a <UART_SetConfig+0xbe>
 8004ef8:	4b77      	ldr	r3, [pc, #476]	@ (80050d8 <UART_SetConfig+0x25c>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d817      	bhi.n	8004f34 <UART_SetConfig+0xb8>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <UART_SetConfig+0x90>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f29 	.word	0x08004f29
 8004f14:	08004f2f 	.word	0x08004f2f
 8004f18:	08004f23 	.word	0x08004f23
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e01d      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f22:	2302      	movs	r3, #2
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e01a      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e017      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e014      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f34:	2310      	movs	r3, #16
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e011      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a67      	ldr	r2, [pc, #412]	@ (80050dc <UART_SetConfig+0x260>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d102      	bne.n	8004f4a <UART_SetConfig+0xce>
 8004f44:	2300      	movs	r3, #0
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e009      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a64      	ldr	r2, [pc, #400]	@ (80050e0 <UART_SetConfig+0x264>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d102      	bne.n	8004f5a <UART_SetConfig+0xde>
 8004f54:	2300      	movs	r3, #0
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e001      	b.n	8004f5e <UART_SetConfig+0xe2>
 8004f5a:	2310      	movs	r3, #16
 8004f5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f66:	d15a      	bne.n	800501e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d827      	bhi.n	8004fbe <UART_SetConfig+0x142>
 8004f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <UART_SetConfig+0xf8>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fbf 	.word	0x08004fbf
 8004f84:	08004faf 	.word	0x08004faf
 8004f88:	08004fbf 	.word	0x08004fbf
 8004f8c:	08004fbf 	.word	0x08004fbf
 8004f90:	08004fbf 	.word	0x08004fbf
 8004f94:	08004fb7 	.word	0x08004fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f98:	f7ff fa28 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8004f9c:	61b8      	str	r0, [r7, #24]
        break;
 8004f9e:	e013      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa0:	f7ff fa46 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8004fa4:	61b8      	str	r0, [r7, #24]
        break;
 8004fa6:	e00f      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80050e4 <UART_SetConfig+0x268>)
 8004faa:	61bb      	str	r3, [r7, #24]
        break;
 8004fac:	e00c      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fae:	f7ff f9a7 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8004fb2:	61b8      	str	r0, [r7, #24]
        break;
 8004fb4:	e008      	b.n	8004fc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fba:	61bb      	str	r3, [r7, #24]
        break;
 8004fbc:	e004      	b.n	8004fc8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8004fc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d074      	beq.n	80050b8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	005a      	lsls	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	d916      	bls.n	8005018 <UART_SetConfig+0x19c>
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d212      	bcs.n	8005018 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f023 030f 	bic.w	r3, r3, #15
 8004ffa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	b29a      	uxth	r2, r3
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	4313      	orrs	r3, r2
 800500c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	89fa      	ldrh	r2, [r7, #14]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	e04f      	b.n	80050b8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	77bb      	strb	r3, [r7, #30]
 800501c:	e04c      	b.n	80050b8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d828      	bhi.n	8005076 <UART_SetConfig+0x1fa>
 8005024:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <UART_SetConfig+0x1b0>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005051 	.word	0x08005051
 8005030:	08005059 	.word	0x08005059
 8005034:	08005061 	.word	0x08005061
 8005038:	08005077 	.word	0x08005077
 800503c:	08005067 	.word	0x08005067
 8005040:	08005077 	.word	0x08005077
 8005044:	08005077 	.word	0x08005077
 8005048:	08005077 	.word	0x08005077
 800504c:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7ff f9cc 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8005054:	61b8      	str	r0, [r7, #24]
        break;
 8005056:	e013      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005058:	f7ff f9ea 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 800505c:	61b8      	str	r0, [r7, #24]
        break;
 800505e:	e00f      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005060:	4b20      	ldr	r3, [pc, #128]	@ (80050e4 <UART_SetConfig+0x268>)
 8005062:	61bb      	str	r3, [r7, #24]
        break;
 8005064:	e00c      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005066:	f7ff f94b 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 800506a:	61b8      	str	r0, [r7, #24]
        break;
 800506c:	e008      	b.n	8005080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005072:	61bb      	str	r3, [r7, #24]
        break;
 8005074:	e004      	b.n	8005080 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	77bb      	strb	r3, [r7, #30]
        break;
 800507e:	bf00      	nop
    }

    if (pclk != 0U)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d018      	beq.n	80050b8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	085a      	lsrs	r2, r3, #1
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	441a      	add	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b0f      	cmp	r3, #15
 800509e:	d909      	bls.n	80050b4 <UART_SetConfig+0x238>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a6:	d205      	bcs.n	80050b4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	e001      	b.n	80050b8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40013800 	.word	0x40013800
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40004400 	.word	0x40004400
 80050e0:	40004800 	.word	0x40004800
 80050e4:	007a1200 	.word	0x007a1200

080050e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e6:	d10a      	bne.n	80051fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b098      	sub	sp, #96	@ 0x60
 8005230:	af02      	add	r7, sp, #8
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800523c:	f7fc fbc2 	bl	80019c4 <HAL_GetTick>
 8005240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d12e      	bne.n	80052ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005258:	2200      	movs	r2, #0
 800525a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f88c 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d021      	beq.n	80052ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800527e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005288:	647b      	str	r3, [r7, #68]	@ 0x44
 800528a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800528e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e6      	bne.n	800526a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e062      	b.n	8005374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d149      	bne.n	8005350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c4:	2200      	movs	r2, #0
 80052c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f856 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d03c      	beq.n	8005350 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	623b      	str	r3, [r7, #32]
   return(result);
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60fb      	str	r3, [r7, #12]
   return(result);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0301 	bic.w	r3, r3, #1
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005328:	61fa      	str	r2, [r7, #28]
 800532a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	617b      	str	r3, [r7, #20]
   return(result);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e011      	b.n	8005374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3758      	adds	r7, #88	@ 0x58
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	e049      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005394:	d045      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fc fb15 	bl	80019c4 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <UART_WaitOnFlagUntilTimeout+0x30>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e048      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d031      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d110      	bne.n	80053ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2208      	movs	r2, #8
 80053d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f838 	bl	800544a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2208      	movs	r2, #8
 80053de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e029      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fc:	d111      	bne.n	8005422 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f81e 	bl	800544a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e00f      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4013      	ands	r3, r2
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	429a      	cmp	r2, r3
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	429a      	cmp	r2, r3
 800543e:	d0a6      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800544a:	b480      	push	{r7}
 800544c:	b095      	sub	sp, #84	@ 0x54
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005470:	643b      	str	r3, [r7, #64]	@ 0x40
 8005472:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005476:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e6      	bne.n	8005452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	61fb      	str	r3, [r7, #28]
   return(result);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e5      	bne.n	8005484 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d118      	bne.n	80054f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 0310 	bic.w	r3, r3, #16
 80054d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	613b      	str	r3, [r7, #16]
   return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e6      	bne.n	80054c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005506:	bf00      	nop
 8005508:	3754      	adds	r7, #84	@ 0x54
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff fc8d 	bl	8004e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	60bb      	str	r3, [r7, #8]
   return(result);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6979      	ldr	r1, [r7, #20]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	613b      	str	r3, [r7, #16]
   return(result);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fc59 	bl	8004e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800558a:	bf00      	nop
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <__cvt>:
 80055a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055aa:	ec57 6b10 	vmov	r6, r7, d0
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	460c      	mov	r4, r1
 80055b2:	4619      	mov	r1, r3
 80055b4:	463b      	mov	r3, r7
 80055b6:	bfbb      	ittet	lt
 80055b8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80055bc:	461f      	movlt	r7, r3
 80055be:	2300      	movge	r3, #0
 80055c0:	232d      	movlt	r3, #45	@ 0x2d
 80055c2:	700b      	strb	r3, [r1, #0]
 80055c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055c6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80055ca:	4691      	mov	r9, r2
 80055cc:	f023 0820 	bic.w	r8, r3, #32
 80055d0:	bfbc      	itt	lt
 80055d2:	4632      	movlt	r2, r6
 80055d4:	4616      	movlt	r6, r2
 80055d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80055da:	d005      	beq.n	80055e8 <__cvt+0x42>
 80055dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80055e0:	d100      	bne.n	80055e4 <__cvt+0x3e>
 80055e2:	3401      	adds	r4, #1
 80055e4:	2102      	movs	r1, #2
 80055e6:	e000      	b.n	80055ea <__cvt+0x44>
 80055e8:	2103      	movs	r1, #3
 80055ea:	ab03      	add	r3, sp, #12
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	ab02      	add	r3, sp, #8
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	ec47 6b10 	vmov	d0, r6, r7
 80055f6:	4653      	mov	r3, sl
 80055f8:	4622      	mov	r2, r4
 80055fa:	f000 fdd1 	bl	80061a0 <_dtoa_r>
 80055fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005602:	4605      	mov	r5, r0
 8005604:	d119      	bne.n	800563a <__cvt+0x94>
 8005606:	f019 0f01 	tst.w	r9, #1
 800560a:	d00e      	beq.n	800562a <__cvt+0x84>
 800560c:	eb00 0904 	add.w	r9, r0, r4
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fb fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800561c:	b108      	cbz	r0, 8005622 <__cvt+0x7c>
 800561e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005622:	2230      	movs	r2, #48	@ 0x30
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	454b      	cmp	r3, r9
 8005628:	d31e      	bcc.n	8005668 <__cvt+0xc2>
 800562a:	9b03      	ldr	r3, [sp, #12]
 800562c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800562e:	1b5b      	subs	r3, r3, r5
 8005630:	4628      	mov	r0, r5
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	b004      	add	sp, #16
 8005636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800563e:	eb00 0904 	add.w	r9, r0, r4
 8005642:	d1e5      	bne.n	8005610 <__cvt+0x6a>
 8005644:	7803      	ldrb	r3, [r0, #0]
 8005646:	2b30      	cmp	r3, #48	@ 0x30
 8005648:	d10a      	bne.n	8005660 <__cvt+0xba>
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	4630      	mov	r0, r6
 8005650:	4639      	mov	r1, r7
 8005652:	f7fb fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8005656:	b918      	cbnz	r0, 8005660 <__cvt+0xba>
 8005658:	f1c4 0401 	rsb	r4, r4, #1
 800565c:	f8ca 4000 	str.w	r4, [sl]
 8005660:	f8da 3000 	ldr.w	r3, [sl]
 8005664:	4499      	add	r9, r3
 8005666:	e7d3      	b.n	8005610 <__cvt+0x6a>
 8005668:	1c59      	adds	r1, r3, #1
 800566a:	9103      	str	r1, [sp, #12]
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e7d9      	b.n	8005624 <__cvt+0x7e>

08005670 <__exponent>:
 8005670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005672:	2900      	cmp	r1, #0
 8005674:	bfba      	itte	lt
 8005676:	4249      	neglt	r1, r1
 8005678:	232d      	movlt	r3, #45	@ 0x2d
 800567a:	232b      	movge	r3, #43	@ 0x2b
 800567c:	2909      	cmp	r1, #9
 800567e:	7002      	strb	r2, [r0, #0]
 8005680:	7043      	strb	r3, [r0, #1]
 8005682:	dd29      	ble.n	80056d8 <__exponent+0x68>
 8005684:	f10d 0307 	add.w	r3, sp, #7
 8005688:	461d      	mov	r5, r3
 800568a:	270a      	movs	r7, #10
 800568c:	461a      	mov	r2, r3
 800568e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005692:	fb07 1416 	mls	r4, r7, r6, r1
 8005696:	3430      	adds	r4, #48	@ 0x30
 8005698:	f802 4c01 	strb.w	r4, [r2, #-1]
 800569c:	460c      	mov	r4, r1
 800569e:	2c63      	cmp	r4, #99	@ 0x63
 80056a0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80056a4:	4631      	mov	r1, r6
 80056a6:	dcf1      	bgt.n	800568c <__exponent+0x1c>
 80056a8:	3130      	adds	r1, #48	@ 0x30
 80056aa:	1e94      	subs	r4, r2, #2
 80056ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056b0:	1c41      	adds	r1, r0, #1
 80056b2:	4623      	mov	r3, r4
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	d30a      	bcc.n	80056ce <__exponent+0x5e>
 80056b8:	f10d 0309 	add.w	r3, sp, #9
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	42ac      	cmp	r4, r5
 80056c0:	bf88      	it	hi
 80056c2:	2300      	movhi	r3, #0
 80056c4:	3302      	adds	r3, #2
 80056c6:	4403      	add	r3, r0
 80056c8:	1a18      	subs	r0, r3, r0
 80056ca:	b003      	add	sp, #12
 80056cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80056d6:	e7ed      	b.n	80056b4 <__exponent+0x44>
 80056d8:	2330      	movs	r3, #48	@ 0x30
 80056da:	3130      	adds	r1, #48	@ 0x30
 80056dc:	7083      	strb	r3, [r0, #2]
 80056de:	70c1      	strb	r1, [r0, #3]
 80056e0:	1d03      	adds	r3, r0, #4
 80056e2:	e7f1      	b.n	80056c8 <__exponent+0x58>

080056e4 <_printf_float>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	b08d      	sub	sp, #52	@ 0x34
 80056ea:	460c      	mov	r4, r1
 80056ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80056f0:	4616      	mov	r6, r2
 80056f2:	461f      	mov	r7, r3
 80056f4:	4605      	mov	r5, r0
 80056f6:	f000 fc97 	bl	8006028 <_localeconv_r>
 80056fa:	6803      	ldr	r3, [r0, #0]
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fa fdb6 	bl	8000270 <strlen>
 8005704:	2300      	movs	r3, #0
 8005706:	930a      	str	r3, [sp, #40]	@ 0x28
 8005708:	f8d8 3000 	ldr.w	r3, [r8]
 800570c:	9005      	str	r0, [sp, #20]
 800570e:	3307      	adds	r3, #7
 8005710:	f023 0307 	bic.w	r3, r3, #7
 8005714:	f103 0208 	add.w	r2, r3, #8
 8005718:	f894 a018 	ldrb.w	sl, [r4, #24]
 800571c:	f8d4 b000 	ldr.w	fp, [r4]
 8005720:	f8c8 2000 	str.w	r2, [r8]
 8005724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005728:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800572c:	9307      	str	r3, [sp, #28]
 800572e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005732:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800573a:	4b9c      	ldr	r3, [pc, #624]	@ (80059ac <_printf_float+0x2c8>)
 800573c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005740:	f7fb f9f4 	bl	8000b2c <__aeabi_dcmpun>
 8005744:	bb70      	cbnz	r0, 80057a4 <_printf_float+0xc0>
 8005746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574a:	4b98      	ldr	r3, [pc, #608]	@ (80059ac <_printf_float+0x2c8>)
 800574c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005750:	f7fb f9ce 	bl	8000af0 <__aeabi_dcmple>
 8005754:	bb30      	cbnz	r0, 80057a4 <_printf_float+0xc0>
 8005756:	2200      	movs	r2, #0
 8005758:	2300      	movs	r3, #0
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fb f9bd 	bl	8000adc <__aeabi_dcmplt>
 8005762:	b110      	cbz	r0, 800576a <_printf_float+0x86>
 8005764:	232d      	movs	r3, #45	@ 0x2d
 8005766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800576a:	4a91      	ldr	r2, [pc, #580]	@ (80059b0 <_printf_float+0x2cc>)
 800576c:	4b91      	ldr	r3, [pc, #580]	@ (80059b4 <_printf_float+0x2d0>)
 800576e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005772:	bf94      	ite	ls
 8005774:	4690      	movls	r8, r2
 8005776:	4698      	movhi	r8, r3
 8005778:	2303      	movs	r3, #3
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	f02b 0304 	bic.w	r3, fp, #4
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	9700      	str	r7, [sp, #0]
 8005788:	4633      	mov	r3, r6
 800578a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800578c:	4621      	mov	r1, r4
 800578e:	4628      	mov	r0, r5
 8005790:	f000 f9d2 	bl	8005b38 <_printf_common>
 8005794:	3001      	adds	r0, #1
 8005796:	f040 808d 	bne.w	80058b4 <_printf_float+0x1d0>
 800579a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800579e:	b00d      	add	sp, #52	@ 0x34
 80057a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a4:	4642      	mov	r2, r8
 80057a6:	464b      	mov	r3, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	4649      	mov	r1, r9
 80057ac:	f7fb f9be 	bl	8000b2c <__aeabi_dcmpun>
 80057b0:	b140      	cbz	r0, 80057c4 <_printf_float+0xe0>
 80057b2:	464b      	mov	r3, r9
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bfbc      	itt	lt
 80057b8:	232d      	movlt	r3, #45	@ 0x2d
 80057ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80057be:	4a7e      	ldr	r2, [pc, #504]	@ (80059b8 <_printf_float+0x2d4>)
 80057c0:	4b7e      	ldr	r3, [pc, #504]	@ (80059bc <_printf_float+0x2d8>)
 80057c2:	e7d4      	b.n	800576e <_printf_float+0x8a>
 80057c4:	6863      	ldr	r3, [r4, #4]
 80057c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80057ca:	9206      	str	r2, [sp, #24]
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	d13b      	bne.n	8005848 <_printf_float+0x164>
 80057d0:	2306      	movs	r3, #6
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80057d8:	2300      	movs	r3, #0
 80057da:	6022      	str	r2, [r4, #0]
 80057dc:	9303      	str	r3, [sp, #12]
 80057de:	ab0a      	add	r3, sp, #40	@ 0x28
 80057e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80057e4:	ab09      	add	r3, sp, #36	@ 0x24
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	6861      	ldr	r1, [r4, #4]
 80057ea:	ec49 8b10 	vmov	d0, r8, r9
 80057ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80057f2:	4628      	mov	r0, r5
 80057f4:	f7ff fed7 	bl	80055a6 <__cvt>
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057fc:	2b47      	cmp	r3, #71	@ 0x47
 80057fe:	4680      	mov	r8, r0
 8005800:	d129      	bne.n	8005856 <_printf_float+0x172>
 8005802:	1cc8      	adds	r0, r1, #3
 8005804:	db02      	blt.n	800580c <_printf_float+0x128>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	4299      	cmp	r1, r3
 800580a:	dd41      	ble.n	8005890 <_printf_float+0x1ac>
 800580c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005810:	fa5f fa8a 	uxtb.w	sl, sl
 8005814:	3901      	subs	r1, #1
 8005816:	4652      	mov	r2, sl
 8005818:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800581c:	9109      	str	r1, [sp, #36]	@ 0x24
 800581e:	f7ff ff27 	bl	8005670 <__exponent>
 8005822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005824:	1813      	adds	r3, r2, r0
 8005826:	2a01      	cmp	r2, #1
 8005828:	4681      	mov	r9, r0
 800582a:	6123      	str	r3, [r4, #16]
 800582c:	dc02      	bgt.n	8005834 <_printf_float+0x150>
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	07d2      	lsls	r2, r2, #31
 8005832:	d501      	bpl.n	8005838 <_printf_float+0x154>
 8005834:	3301      	adds	r3, #1
 8005836:	6123      	str	r3, [r4, #16]
 8005838:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0a2      	beq.n	8005786 <_printf_float+0xa2>
 8005840:	232d      	movs	r3, #45	@ 0x2d
 8005842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005846:	e79e      	b.n	8005786 <_printf_float+0xa2>
 8005848:	9a06      	ldr	r2, [sp, #24]
 800584a:	2a47      	cmp	r2, #71	@ 0x47
 800584c:	d1c2      	bne.n	80057d4 <_printf_float+0xf0>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1c0      	bne.n	80057d4 <_printf_float+0xf0>
 8005852:	2301      	movs	r3, #1
 8005854:	e7bd      	b.n	80057d2 <_printf_float+0xee>
 8005856:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800585a:	d9db      	bls.n	8005814 <_printf_float+0x130>
 800585c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005860:	d118      	bne.n	8005894 <_printf_float+0x1b0>
 8005862:	2900      	cmp	r1, #0
 8005864:	6863      	ldr	r3, [r4, #4]
 8005866:	dd0b      	ble.n	8005880 <_printf_float+0x19c>
 8005868:	6121      	str	r1, [r4, #16]
 800586a:	b913      	cbnz	r3, 8005872 <_printf_float+0x18e>
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	07d0      	lsls	r0, r2, #31
 8005870:	d502      	bpl.n	8005878 <_printf_float+0x194>
 8005872:	3301      	adds	r3, #1
 8005874:	440b      	add	r3, r1
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	65a1      	str	r1, [r4, #88]	@ 0x58
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	e7db      	b.n	8005838 <_printf_float+0x154>
 8005880:	b913      	cbnz	r3, 8005888 <_printf_float+0x1a4>
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	07d2      	lsls	r2, r2, #31
 8005886:	d501      	bpl.n	800588c <_printf_float+0x1a8>
 8005888:	3302      	adds	r3, #2
 800588a:	e7f4      	b.n	8005876 <_printf_float+0x192>
 800588c:	2301      	movs	r3, #1
 800588e:	e7f2      	b.n	8005876 <_printf_float+0x192>
 8005890:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005896:	4299      	cmp	r1, r3
 8005898:	db05      	blt.n	80058a6 <_printf_float+0x1c2>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	6121      	str	r1, [r4, #16]
 800589e:	07d8      	lsls	r0, r3, #31
 80058a0:	d5ea      	bpl.n	8005878 <_printf_float+0x194>
 80058a2:	1c4b      	adds	r3, r1, #1
 80058a4:	e7e7      	b.n	8005876 <_printf_float+0x192>
 80058a6:	2900      	cmp	r1, #0
 80058a8:	bfd4      	ite	le
 80058aa:	f1c1 0202 	rsble	r2, r1, #2
 80058ae:	2201      	movgt	r2, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	e7e0      	b.n	8005876 <_printf_float+0x192>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	055a      	lsls	r2, r3, #21
 80058b8:	d407      	bmi.n	80058ca <_printf_float+0x1e6>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	4642      	mov	r2, r8
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	d12b      	bne.n	8005920 <_printf_float+0x23c>
 80058c8:	e767      	b.n	800579a <_printf_float+0xb6>
 80058ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058ce:	f240 80dd 	bls.w	8005a8c <_printf_float+0x3a8>
 80058d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058d6:	2200      	movs	r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	f7fb f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d033      	beq.n	800594a <_printf_float+0x266>
 80058e2:	4a37      	ldr	r2, [pc, #220]	@ (80059c0 <_printf_float+0x2dc>)
 80058e4:	2301      	movs	r3, #1
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f af54 	beq.w	800579a <_printf_float+0xb6>
 80058f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80058f6:	4543      	cmp	r3, r8
 80058f8:	db02      	blt.n	8005900 <_printf_float+0x21c>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	07d8      	lsls	r0, r3, #31
 80058fe:	d50f      	bpl.n	8005920 <_printf_float+0x23c>
 8005900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f af45 	beq.w	800579a <_printf_float+0xb6>
 8005910:	f04f 0900 	mov.w	r9, #0
 8005914:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005918:	f104 0a1a 	add.w	sl, r4, #26
 800591c:	45c8      	cmp	r8, r9
 800591e:	dc09      	bgt.n	8005934 <_printf_float+0x250>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	079b      	lsls	r3, r3, #30
 8005924:	f100 8103 	bmi.w	8005b2e <_printf_float+0x44a>
 8005928:	68e0      	ldr	r0, [r4, #12]
 800592a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800592c:	4298      	cmp	r0, r3
 800592e:	bfb8      	it	lt
 8005930:	4618      	movlt	r0, r3
 8005932:	e734      	b.n	800579e <_printf_float+0xba>
 8005934:	2301      	movs	r3, #1
 8005936:	4652      	mov	r2, sl
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f af2b 	beq.w	800579a <_printf_float+0xb6>
 8005944:	f109 0901 	add.w	r9, r9, #1
 8005948:	e7e8      	b.n	800591c <_printf_float+0x238>
 800594a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	dc39      	bgt.n	80059c4 <_printf_float+0x2e0>
 8005950:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <_printf_float+0x2dc>)
 8005952:	2301      	movs	r3, #1
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f af1d 	beq.w	800579a <_printf_float+0xb6>
 8005960:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005964:	ea59 0303 	orrs.w	r3, r9, r3
 8005968:	d102      	bne.n	8005970 <_printf_float+0x28c>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	07d9      	lsls	r1, r3, #31
 800596e:	d5d7      	bpl.n	8005920 <_printf_float+0x23c>
 8005970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f af0d 	beq.w	800579a <_printf_float+0xb6>
 8005980:	f04f 0a00 	mov.w	sl, #0
 8005984:	f104 0b1a 	add.w	fp, r4, #26
 8005988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800598a:	425b      	negs	r3, r3
 800598c:	4553      	cmp	r3, sl
 800598e:	dc01      	bgt.n	8005994 <_printf_float+0x2b0>
 8005990:	464b      	mov	r3, r9
 8005992:	e793      	b.n	80058bc <_printf_float+0x1d8>
 8005994:	2301      	movs	r3, #1
 8005996:	465a      	mov	r2, fp
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f aefb 	beq.w	800579a <_printf_float+0xb6>
 80059a4:	f10a 0a01 	add.w	sl, sl, #1
 80059a8:	e7ee      	b.n	8005988 <_printf_float+0x2a4>
 80059aa:	bf00      	nop
 80059ac:	7fefffff 	.word	0x7fefffff
 80059b0:	08008358 	.word	0x08008358
 80059b4:	0800835c 	.word	0x0800835c
 80059b8:	08008360 	.word	0x08008360
 80059bc:	08008364 	.word	0x08008364
 80059c0:	08008368 	.word	0x08008368
 80059c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059ca:	4553      	cmp	r3, sl
 80059cc:	bfa8      	it	ge
 80059ce:	4653      	movge	r3, sl
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	4699      	mov	r9, r3
 80059d4:	dc36      	bgt.n	8005a44 <_printf_float+0x360>
 80059d6:	f04f 0b00 	mov.w	fp, #0
 80059da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059de:	f104 021a 	add.w	r2, r4, #26
 80059e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059e4:	9306      	str	r3, [sp, #24]
 80059e6:	eba3 0309 	sub.w	r3, r3, r9
 80059ea:	455b      	cmp	r3, fp
 80059ec:	dc31      	bgt.n	8005a52 <_printf_float+0x36e>
 80059ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f0:	459a      	cmp	sl, r3
 80059f2:	dc3a      	bgt.n	8005a6a <_printf_float+0x386>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07da      	lsls	r2, r3, #31
 80059f8:	d437      	bmi.n	8005a6a <_printf_float+0x386>
 80059fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059fc:	ebaa 0903 	sub.w	r9, sl, r3
 8005a00:	9b06      	ldr	r3, [sp, #24]
 8005a02:	ebaa 0303 	sub.w	r3, sl, r3
 8005a06:	4599      	cmp	r9, r3
 8005a08:	bfa8      	it	ge
 8005a0a:	4699      	movge	r9, r3
 8005a0c:	f1b9 0f00 	cmp.w	r9, #0
 8005a10:	dc33      	bgt.n	8005a7a <_printf_float+0x396>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a1a:	f104 0b1a 	add.w	fp, r4, #26
 8005a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a20:	ebaa 0303 	sub.w	r3, sl, r3
 8005a24:	eba3 0309 	sub.w	r3, r3, r9
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	f77f af79 	ble.w	8005920 <_printf_float+0x23c>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	465a      	mov	r2, fp
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f43f aeae 	beq.w	800579a <_printf_float+0xb6>
 8005a3e:	f108 0801 	add.w	r8, r8, #1
 8005a42:	e7ec      	b.n	8005a1e <_printf_float+0x33a>
 8005a44:	4642      	mov	r2, r8
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1c2      	bne.n	80059d6 <_printf_float+0x2f2>
 8005a50:	e6a3      	b.n	800579a <_printf_float+0xb6>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	9206      	str	r2, [sp, #24]
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f ae9c 	beq.w	800579a <_printf_float+0xb6>
 8005a62:	9a06      	ldr	r2, [sp, #24]
 8005a64:	f10b 0b01 	add.w	fp, fp, #1
 8005a68:	e7bb      	b.n	80059e2 <_printf_float+0x2fe>
 8005a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	d1c0      	bne.n	80059fa <_printf_float+0x316>
 8005a78:	e68f      	b.n	800579a <_printf_float+0xb6>
 8005a7a:	9a06      	ldr	r2, [sp, #24]
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	4442      	add	r2, r8
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	d1c3      	bne.n	8005a12 <_printf_float+0x32e>
 8005a8a:	e686      	b.n	800579a <_printf_float+0xb6>
 8005a8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a90:	f1ba 0f01 	cmp.w	sl, #1
 8005a94:	dc01      	bgt.n	8005a9a <_printf_float+0x3b6>
 8005a96:	07db      	lsls	r3, r3, #31
 8005a98:	d536      	bpl.n	8005b08 <_printf_float+0x424>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f43f ae78 	beq.w	800579a <_printf_float+0xb6>
 8005aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f43f ae70 	beq.w	800579a <_printf_float+0xb6>
 8005aba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005ac6:	f7fa ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aca:	b9c0      	cbnz	r0, 8005afe <_printf_float+0x41a>
 8005acc:	4653      	mov	r3, sl
 8005ace:	f108 0201 	add.w	r2, r8, #1
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d10c      	bne.n	8005af6 <_printf_float+0x412>
 8005adc:	e65d      	b.n	800579a <_printf_float+0xb6>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	465a      	mov	r2, fp
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f ae56 	beq.w	800579a <_printf_float+0xb6>
 8005aee:	f108 0801 	add.w	r8, r8, #1
 8005af2:	45d0      	cmp	r8, sl
 8005af4:	dbf3      	blt.n	8005ade <_printf_float+0x3fa>
 8005af6:	464b      	mov	r3, r9
 8005af8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005afc:	e6df      	b.n	80058be <_printf_float+0x1da>
 8005afe:	f04f 0800 	mov.w	r8, #0
 8005b02:	f104 0b1a 	add.w	fp, r4, #26
 8005b06:	e7f4      	b.n	8005af2 <_printf_float+0x40e>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	e7e1      	b.n	8005ad2 <_printf_float+0x3ee>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	464a      	mov	r2, r9
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f ae3e 	beq.w	800579a <_printf_float+0xb6>
 8005b1e:	f108 0801 	add.w	r8, r8, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	4543      	cmp	r3, r8
 8005b2a:	dcf0      	bgt.n	8005b0e <_printf_float+0x42a>
 8005b2c:	e6fc      	b.n	8005928 <_printf_float+0x244>
 8005b2e:	f04f 0800 	mov.w	r8, #0
 8005b32:	f104 0919 	add.w	r9, r4, #25
 8005b36:	e7f4      	b.n	8005b22 <_printf_float+0x43e>

08005b38 <_printf_common>:
 8005b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	4698      	mov	r8, r3
 8005b40:	688a      	ldr	r2, [r1, #8]
 8005b42:	690b      	ldr	r3, [r1, #16]
 8005b44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	bfb8      	it	lt
 8005b4c:	4613      	movlt	r3, r2
 8005b4e:	6033      	str	r3, [r6, #0]
 8005b50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b54:	4607      	mov	r7, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	b10a      	cbz	r2, 8005b5e <_printf_common+0x26>
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	6033      	str	r3, [r6, #0]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	0699      	lsls	r1, r3, #26
 8005b62:	bf42      	ittt	mi
 8005b64:	6833      	ldrmi	r3, [r6, #0]
 8005b66:	3302      	addmi	r3, #2
 8005b68:	6033      	strmi	r3, [r6, #0]
 8005b6a:	6825      	ldr	r5, [r4, #0]
 8005b6c:	f015 0506 	ands.w	r5, r5, #6
 8005b70:	d106      	bne.n	8005b80 <_printf_common+0x48>
 8005b72:	f104 0a19 	add.w	sl, r4, #25
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	6832      	ldr	r2, [r6, #0]
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dc26      	bgt.n	8005bce <_printf_common+0x96>
 8005b80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	3b00      	subs	r3, #0
 8005b88:	bf18      	it	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	0692      	lsls	r2, r2, #26
 8005b8e:	d42b      	bmi.n	8005be8 <_printf_common+0xb0>
 8005b90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b94:	4641      	mov	r1, r8
 8005b96:	4638      	mov	r0, r7
 8005b98:	47c8      	blx	r9
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d01e      	beq.n	8005bdc <_printf_common+0xa4>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	f003 0306 	and.w	r3, r3, #6
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	bf02      	ittt	eq
 8005baa:	68e5      	ldreq	r5, [r4, #12]
 8005bac:	6833      	ldreq	r3, [r6, #0]
 8005bae:	1aed      	subeq	r5, r5, r3
 8005bb0:	68a3      	ldr	r3, [r4, #8]
 8005bb2:	bf0c      	ite	eq
 8005bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb8:	2500      	movne	r5, #0
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bfc4      	itt	gt
 8005bbe:	1a9b      	subgt	r3, r3, r2
 8005bc0:	18ed      	addgt	r5, r5, r3
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	341a      	adds	r4, #26
 8005bc6:	42b5      	cmp	r5, r6
 8005bc8:	d11a      	bne.n	8005c00 <_printf_common+0xc8>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e008      	b.n	8005be0 <_printf_common+0xa8>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4652      	mov	r2, sl
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	47c8      	blx	r9
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d103      	bne.n	8005be4 <_printf_common+0xac>
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be4:	3501      	adds	r5, #1
 8005be6:	e7c6      	b.n	8005b76 <_printf_common+0x3e>
 8005be8:	18e1      	adds	r1, r4, r3
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	2030      	movs	r0, #48	@ 0x30
 8005bee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bf2:	4422      	add	r2, r4
 8005bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	e7c7      	b.n	8005b90 <_printf_common+0x58>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4622      	mov	r2, r4
 8005c04:	4641      	mov	r1, r8
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c8      	blx	r9
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d0e6      	beq.n	8005bdc <_printf_common+0xa4>
 8005c0e:	3601      	adds	r6, #1
 8005c10:	e7d9      	b.n	8005bc6 <_printf_common+0x8e>
	...

08005c14 <_printf_i>:
 8005c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	7e0f      	ldrb	r7, [r1, #24]
 8005c1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c1c:	2f78      	cmp	r7, #120	@ 0x78
 8005c1e:	4691      	mov	r9, r2
 8005c20:	4680      	mov	r8, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	469a      	mov	sl, r3
 8005c26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c2a:	d807      	bhi.n	8005c3c <_printf_i+0x28>
 8005c2c:	2f62      	cmp	r7, #98	@ 0x62
 8005c2e:	d80a      	bhi.n	8005c46 <_printf_i+0x32>
 8005c30:	2f00      	cmp	r7, #0
 8005c32:	f000 80d2 	beq.w	8005dda <_printf_i+0x1c6>
 8005c36:	2f58      	cmp	r7, #88	@ 0x58
 8005c38:	f000 80b9 	beq.w	8005dae <_printf_i+0x19a>
 8005c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c44:	e03a      	b.n	8005cbc <_printf_i+0xa8>
 8005c46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c4a:	2b15      	cmp	r3, #21
 8005c4c:	d8f6      	bhi.n	8005c3c <_printf_i+0x28>
 8005c4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005c54 <_printf_i+0x40>)
 8005c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c54:	08005cad 	.word	0x08005cad
 8005c58:	08005cc1 	.word	0x08005cc1
 8005c5c:	08005c3d 	.word	0x08005c3d
 8005c60:	08005c3d 	.word	0x08005c3d
 8005c64:	08005c3d 	.word	0x08005c3d
 8005c68:	08005c3d 	.word	0x08005c3d
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005c3d 	.word	0x08005c3d
 8005c74:	08005c3d 	.word	0x08005c3d
 8005c78:	08005c3d 	.word	0x08005c3d
 8005c7c:	08005c3d 	.word	0x08005c3d
 8005c80:	08005dc1 	.word	0x08005dc1
 8005c84:	08005ceb 	.word	0x08005ceb
 8005c88:	08005d7b 	.word	0x08005d7b
 8005c8c:	08005c3d 	.word	0x08005c3d
 8005c90:	08005c3d 	.word	0x08005c3d
 8005c94:	08005de3 	.word	0x08005de3
 8005c98:	08005c3d 	.word	0x08005c3d
 8005c9c:	08005ceb 	.word	0x08005ceb
 8005ca0:	08005c3d 	.word	0x08005c3d
 8005ca4:	08005c3d 	.word	0x08005c3d
 8005ca8:	08005d83 	.word	0x08005d83
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	1d1a      	adds	r2, r3, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6032      	str	r2, [r6, #0]
 8005cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e09d      	b.n	8005dfc <_printf_i+0x1e8>
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	6820      	ldr	r0, [r4, #0]
 8005cc4:	1d19      	adds	r1, r3, #4
 8005cc6:	6031      	str	r1, [r6, #0]
 8005cc8:	0606      	lsls	r6, r0, #24
 8005cca:	d501      	bpl.n	8005cd0 <_printf_i+0xbc>
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	e003      	b.n	8005cd8 <_printf_i+0xc4>
 8005cd0:	0645      	lsls	r5, r0, #25
 8005cd2:	d5fb      	bpl.n	8005ccc <_printf_i+0xb8>
 8005cd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	da03      	bge.n	8005ce4 <_printf_i+0xd0>
 8005cdc:	232d      	movs	r3, #45	@ 0x2d
 8005cde:	426d      	negs	r5, r5
 8005ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ce4:	4859      	ldr	r0, [pc, #356]	@ (8005e4c <_printf_i+0x238>)
 8005ce6:	230a      	movs	r3, #10
 8005ce8:	e011      	b.n	8005d0e <_printf_i+0xfa>
 8005cea:	6821      	ldr	r1, [r4, #0]
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	0608      	lsls	r0, r1, #24
 8005cf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cf4:	d402      	bmi.n	8005cfc <_printf_i+0xe8>
 8005cf6:	0649      	lsls	r1, r1, #25
 8005cf8:	bf48      	it	mi
 8005cfa:	b2ad      	uxthmi	r5, r5
 8005cfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cfe:	4853      	ldr	r0, [pc, #332]	@ (8005e4c <_printf_i+0x238>)
 8005d00:	6033      	str	r3, [r6, #0]
 8005d02:	bf14      	ite	ne
 8005d04:	230a      	movne	r3, #10
 8005d06:	2308      	moveq	r3, #8
 8005d08:	2100      	movs	r1, #0
 8005d0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d0e:	6866      	ldr	r6, [r4, #4]
 8005d10:	60a6      	str	r6, [r4, #8]
 8005d12:	2e00      	cmp	r6, #0
 8005d14:	bfa2      	ittt	ge
 8005d16:	6821      	ldrge	r1, [r4, #0]
 8005d18:	f021 0104 	bicge.w	r1, r1, #4
 8005d1c:	6021      	strge	r1, [r4, #0]
 8005d1e:	b90d      	cbnz	r5, 8005d24 <_printf_i+0x110>
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	d04b      	beq.n	8005dbc <_printf_i+0x1a8>
 8005d24:	4616      	mov	r6, r2
 8005d26:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d2a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d2e:	5dc7      	ldrb	r7, [r0, r7]
 8005d30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d34:	462f      	mov	r7, r5
 8005d36:	42bb      	cmp	r3, r7
 8005d38:	460d      	mov	r5, r1
 8005d3a:	d9f4      	bls.n	8005d26 <_printf_i+0x112>
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d10b      	bne.n	8005d58 <_printf_i+0x144>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	07df      	lsls	r7, r3, #31
 8005d44:	d508      	bpl.n	8005d58 <_printf_i+0x144>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	6861      	ldr	r1, [r4, #4]
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	bfde      	ittt	le
 8005d4e:	2330      	movle	r3, #48	@ 0x30
 8005d50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d54:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005d58:	1b92      	subs	r2, r2, r6
 8005d5a:	6122      	str	r2, [r4, #16]
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	464b      	mov	r3, r9
 8005d62:	aa03      	add	r2, sp, #12
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff fee6 	bl	8005b38 <_printf_common>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d14a      	bne.n	8005e06 <_printf_i+0x1f2>
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d74:	b004      	add	sp, #16
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f043 0320 	orr.w	r3, r3, #32
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	4833      	ldr	r0, [pc, #204]	@ (8005e50 <_printf_i+0x23c>)
 8005d84:	2778      	movs	r7, #120	@ 0x78
 8005d86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	6831      	ldr	r1, [r6, #0]
 8005d8e:	061f      	lsls	r7, r3, #24
 8005d90:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d94:	d402      	bmi.n	8005d9c <_printf_i+0x188>
 8005d96:	065f      	lsls	r7, r3, #25
 8005d98:	bf48      	it	mi
 8005d9a:	b2ad      	uxthmi	r5, r5
 8005d9c:	6031      	str	r1, [r6, #0]
 8005d9e:	07d9      	lsls	r1, r3, #31
 8005da0:	bf44      	itt	mi
 8005da2:	f043 0320 	orrmi.w	r3, r3, #32
 8005da6:	6023      	strmi	r3, [r4, #0]
 8005da8:	b11d      	cbz	r5, 8005db2 <_printf_i+0x19e>
 8005daa:	2310      	movs	r3, #16
 8005dac:	e7ac      	b.n	8005d08 <_printf_i+0xf4>
 8005dae:	4827      	ldr	r0, [pc, #156]	@ (8005e4c <_printf_i+0x238>)
 8005db0:	e7e9      	b.n	8005d86 <_printf_i+0x172>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	f023 0320 	bic.w	r3, r3, #32
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	e7f6      	b.n	8005daa <_printf_i+0x196>
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	e7bd      	b.n	8005d3c <_printf_i+0x128>
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	6825      	ldr	r5, [r4, #0]
 8005dc4:	6961      	ldr	r1, [r4, #20]
 8005dc6:	1d18      	adds	r0, r3, #4
 8005dc8:	6030      	str	r0, [r6, #0]
 8005dca:	062e      	lsls	r6, r5, #24
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	d501      	bpl.n	8005dd4 <_printf_i+0x1c0>
 8005dd0:	6019      	str	r1, [r3, #0]
 8005dd2:	e002      	b.n	8005dda <_printf_i+0x1c6>
 8005dd4:	0668      	lsls	r0, r5, #25
 8005dd6:	d5fb      	bpl.n	8005dd0 <_printf_i+0x1bc>
 8005dd8:	8019      	strh	r1, [r3, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	4616      	mov	r6, r2
 8005de0:	e7bc      	b.n	8005d5c <_printf_i+0x148>
 8005de2:	6833      	ldr	r3, [r6, #0]
 8005de4:	1d1a      	adds	r2, r3, #4
 8005de6:	6032      	str	r2, [r6, #0]
 8005de8:	681e      	ldr	r6, [r3, #0]
 8005dea:	6862      	ldr	r2, [r4, #4]
 8005dec:	2100      	movs	r1, #0
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7fa f9ee 	bl	80001d0 <memchr>
 8005df4:	b108      	cbz	r0, 8005dfa <_printf_i+0x1e6>
 8005df6:	1b80      	subs	r0, r0, r6
 8005df8:	6060      	str	r0, [r4, #4]
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	6123      	str	r3, [r4, #16]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e04:	e7aa      	b.n	8005d5c <_printf_i+0x148>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	4632      	mov	r2, r6
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	47d0      	blx	sl
 8005e10:	3001      	adds	r0, #1
 8005e12:	d0ad      	beq.n	8005d70 <_printf_i+0x15c>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	079b      	lsls	r3, r3, #30
 8005e18:	d413      	bmi.n	8005e42 <_printf_i+0x22e>
 8005e1a:	68e0      	ldr	r0, [r4, #12]
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	bfb8      	it	lt
 8005e22:	4618      	movlt	r0, r3
 8005e24:	e7a6      	b.n	8005d74 <_printf_i+0x160>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	47d0      	blx	sl
 8005e30:	3001      	adds	r0, #1
 8005e32:	d09d      	beq.n	8005d70 <_printf_i+0x15c>
 8005e34:	3501      	adds	r5, #1
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	9903      	ldr	r1, [sp, #12]
 8005e3a:	1a5b      	subs	r3, r3, r1
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	dcf2      	bgt.n	8005e26 <_printf_i+0x212>
 8005e40:	e7eb      	b.n	8005e1a <_printf_i+0x206>
 8005e42:	2500      	movs	r5, #0
 8005e44:	f104 0619 	add.w	r6, r4, #25
 8005e48:	e7f5      	b.n	8005e36 <_printf_i+0x222>
 8005e4a:	bf00      	nop
 8005e4c:	0800836a 	.word	0x0800836a
 8005e50:	0800837b 	.word	0x0800837b

08005e54 <siprintf>:
 8005e54:	b40e      	push	{r1, r2, r3}
 8005e56:	b500      	push	{lr}
 8005e58:	b09c      	sub	sp, #112	@ 0x70
 8005e5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e5c:	9002      	str	r0, [sp, #8]
 8005e5e:	9006      	str	r0, [sp, #24]
 8005e60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e64:	4809      	ldr	r0, [pc, #36]	@ (8005e8c <siprintf+0x38>)
 8005e66:	9107      	str	r1, [sp, #28]
 8005e68:	9104      	str	r1, [sp, #16]
 8005e6a:	4909      	ldr	r1, [pc, #36]	@ (8005e90 <siprintf+0x3c>)
 8005e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e70:	9105      	str	r1, [sp, #20]
 8005e72:	6800      	ldr	r0, [r0, #0]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	a902      	add	r1, sp, #8
 8005e78:	f000 ffb2 	bl	8006de0 <_svfiprintf_r>
 8005e7c:	9b02      	ldr	r3, [sp, #8]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	b01c      	add	sp, #112	@ 0x70
 8005e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e88:	b003      	add	sp, #12
 8005e8a:	4770      	bx	lr
 8005e8c:	20000018 	.word	0x20000018
 8005e90:	ffff0208 	.word	0xffff0208

08005e94 <std>:
 8005e94:	2300      	movs	r3, #0
 8005e96:	b510      	push	{r4, lr}
 8005e98:	4604      	mov	r4, r0
 8005e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea2:	6083      	str	r3, [r0, #8]
 8005ea4:	8181      	strh	r1, [r0, #12]
 8005ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ea8:	81c2      	strh	r2, [r0, #14]
 8005eaa:	6183      	str	r3, [r0, #24]
 8005eac:	4619      	mov	r1, r3
 8005eae:	2208      	movs	r2, #8
 8005eb0:	305c      	adds	r0, #92	@ 0x5c
 8005eb2:	f000 f8b1 	bl	8006018 <memset>
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <std+0x58>)
 8005eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x5c>)
 8005ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <std+0x60>)
 8005ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <std+0x64>)
 8005ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <std+0x68>)
 8005ec8:	6224      	str	r4, [r4, #32]
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d006      	beq.n	8005edc <std+0x48>
 8005ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ed2:	4294      	cmp	r4, r2
 8005ed4:	d002      	beq.n	8005edc <std+0x48>
 8005ed6:	33d0      	adds	r3, #208	@ 0xd0
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d105      	bne.n	8005ee8 <std+0x54>
 8005edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	f000 b8ce 	b.w	8006084 <__retarget_lock_init_recursive>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	080079a1 	.word	0x080079a1
 8005ef0:	080079c3 	.word	0x080079c3
 8005ef4:	080079fb 	.word	0x080079fb
 8005ef8:	08007a1f 	.word	0x08007a1f
 8005efc:	200002dc 	.word	0x200002dc

08005f00 <stdio_exit_handler>:
 8005f00:	4a02      	ldr	r2, [pc, #8]	@ (8005f0c <stdio_exit_handler+0xc>)
 8005f02:	4903      	ldr	r1, [pc, #12]	@ (8005f10 <stdio_exit_handler+0x10>)
 8005f04:	4803      	ldr	r0, [pc, #12]	@ (8005f14 <stdio_exit_handler+0x14>)
 8005f06:	f000 b869 	b.w	8005fdc <_fwalk_sglue>
 8005f0a:	bf00      	nop
 8005f0c:	2000000c 	.word	0x2000000c
 8005f10:	08007235 	.word	0x08007235
 8005f14:	2000001c 	.word	0x2000001c

08005f18 <cleanup_stdio>:
 8005f18:	6841      	ldr	r1, [r0, #4]
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <cleanup_stdio+0x34>)
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	4604      	mov	r4, r0
 8005f22:	d001      	beq.n	8005f28 <cleanup_stdio+0x10>
 8005f24:	f001 f986 	bl	8007234 <_fflush_r>
 8005f28:	68a1      	ldr	r1, [r4, #8]
 8005f2a:	4b09      	ldr	r3, [pc, #36]	@ (8005f50 <cleanup_stdio+0x38>)
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d002      	beq.n	8005f36 <cleanup_stdio+0x1e>
 8005f30:	4620      	mov	r0, r4
 8005f32:	f001 f97f 	bl	8007234 <_fflush_r>
 8005f36:	68e1      	ldr	r1, [r4, #12]
 8005f38:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <cleanup_stdio+0x3c>)
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	d004      	beq.n	8005f48 <cleanup_stdio+0x30>
 8005f3e:	4620      	mov	r0, r4
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f44:	f001 b976 	b.w	8007234 <_fflush_r>
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200002dc 	.word	0x200002dc
 8005f50:	20000344 	.word	0x20000344
 8005f54:	200003ac 	.word	0x200003ac

08005f58 <global_stdio_init.part.0>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <global_stdio_init.part.0+0x30>)
 8005f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005f8c <global_stdio_init.part.0+0x34>)
 8005f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005f90 <global_stdio_init.part.0+0x38>)
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	4620      	mov	r0, r4
 8005f64:	2200      	movs	r2, #0
 8005f66:	2104      	movs	r1, #4
 8005f68:	f7ff ff94 	bl	8005e94 <std>
 8005f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f70:	2201      	movs	r2, #1
 8005f72:	2109      	movs	r1, #9
 8005f74:	f7ff ff8e 	bl	8005e94 <std>
 8005f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f82:	2112      	movs	r1, #18
 8005f84:	f7ff bf86 	b.w	8005e94 <std>
 8005f88:	20000414 	.word	0x20000414
 8005f8c:	200002dc 	.word	0x200002dc
 8005f90:	08005f01 	.word	0x08005f01

08005f94 <__sfp_lock_acquire>:
 8005f94:	4801      	ldr	r0, [pc, #4]	@ (8005f9c <__sfp_lock_acquire+0x8>)
 8005f96:	f000 b876 	b.w	8006086 <__retarget_lock_acquire_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000419 	.word	0x20000419

08005fa0 <__sfp_lock_release>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	@ (8005fa8 <__sfp_lock_release+0x8>)
 8005fa2:	f000 b871 	b.w	8006088 <__retarget_lock_release_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	20000419 	.word	0x20000419

08005fac <__sinit>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	f7ff fff0 	bl	8005f94 <__sfp_lock_acquire>
 8005fb4:	6a23      	ldr	r3, [r4, #32]
 8005fb6:	b11b      	cbz	r3, 8005fc0 <__sinit+0x14>
 8005fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbc:	f7ff bff0 	b.w	8005fa0 <__sfp_lock_release>
 8005fc0:	4b04      	ldr	r3, [pc, #16]	@ (8005fd4 <__sinit+0x28>)
 8005fc2:	6223      	str	r3, [r4, #32]
 8005fc4:	4b04      	ldr	r3, [pc, #16]	@ (8005fd8 <__sinit+0x2c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f5      	bne.n	8005fb8 <__sinit+0xc>
 8005fcc:	f7ff ffc4 	bl	8005f58 <global_stdio_init.part.0>
 8005fd0:	e7f2      	b.n	8005fb8 <__sinit+0xc>
 8005fd2:	bf00      	nop
 8005fd4:	08005f19 	.word	0x08005f19
 8005fd8:	20000414 	.word	0x20000414

08005fdc <_fwalk_sglue>:
 8005fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	4688      	mov	r8, r1
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fec:	f1b9 0901 	subs.w	r9, r9, #1
 8005ff0:	d505      	bpl.n	8005ffe <_fwalk_sglue+0x22>
 8005ff2:	6824      	ldr	r4, [r4, #0]
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	d1f7      	bne.n	8005fe8 <_fwalk_sglue+0xc>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d907      	bls.n	8006014 <_fwalk_sglue+0x38>
 8006004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006008:	3301      	adds	r3, #1
 800600a:	d003      	beq.n	8006014 <_fwalk_sglue+0x38>
 800600c:	4629      	mov	r1, r5
 800600e:	4638      	mov	r0, r7
 8006010:	47c0      	blx	r8
 8006012:	4306      	orrs	r6, r0
 8006014:	3568      	adds	r5, #104	@ 0x68
 8006016:	e7e9      	b.n	8005fec <_fwalk_sglue+0x10>

08006018 <memset>:
 8006018:	4402      	add	r2, r0
 800601a:	4603      	mov	r3, r0
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <memset+0xa>
 8006020:	4770      	bx	lr
 8006022:	f803 1b01 	strb.w	r1, [r3], #1
 8006026:	e7f9      	b.n	800601c <memset+0x4>

08006028 <_localeconv_r>:
 8006028:	4800      	ldr	r0, [pc, #0]	@ (800602c <_localeconv_r+0x4>)
 800602a:	4770      	bx	lr
 800602c:	20000158 	.word	0x20000158

08006030 <__errno>:
 8006030:	4b01      	ldr	r3, [pc, #4]	@ (8006038 <__errno+0x8>)
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000018 	.word	0x20000018

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4d0d      	ldr	r5, [pc, #52]	@ (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	@ (8006078 <__libc_init_array+0x3c>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2600      	movs	r6, #0
 8006048:	42a6      	cmp	r6, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4d0b      	ldr	r5, [pc, #44]	@ (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	@ (8006080 <__libc_init_array+0x44>)
 8006050:	f002 f8f0 	bl	8008234 <_init>
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2600      	movs	r6, #0
 800605a:	42a6      	cmp	r6, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f855 3b04 	ldr.w	r3, [r5], #4
 8006064:	4798      	blx	r3
 8006066:	3601      	adds	r6, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f855 3b04 	ldr.w	r3, [r5], #4
 800606e:	4798      	blx	r3
 8006070:	3601      	adds	r6, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	080086d0 	.word	0x080086d0
 8006078:	080086d0 	.word	0x080086d0
 800607c:	080086d0 	.word	0x080086d0
 8006080:	080086d4 	.word	0x080086d4

08006084 <__retarget_lock_init_recursive>:
 8006084:	4770      	bx	lr

08006086 <__retarget_lock_acquire_recursive>:
 8006086:	4770      	bx	lr

08006088 <__retarget_lock_release_recursive>:
 8006088:	4770      	bx	lr

0800608a <quorem>:
 800608a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608e:	6903      	ldr	r3, [r0, #16]
 8006090:	690c      	ldr	r4, [r1, #16]
 8006092:	42a3      	cmp	r3, r4
 8006094:	4607      	mov	r7, r0
 8006096:	db7e      	blt.n	8006196 <quorem+0x10c>
 8006098:	3c01      	subs	r4, #1
 800609a:	f101 0814 	add.w	r8, r1, #20
 800609e:	00a3      	lsls	r3, r4, #2
 80060a0:	f100 0514 	add.w	r5, r0, #20
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060b4:	3301      	adds	r3, #1
 80060b6:	429a      	cmp	r2, r3
 80060b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80060c0:	d32e      	bcc.n	8006120 <quorem+0x96>
 80060c2:	f04f 0a00 	mov.w	sl, #0
 80060c6:	46c4      	mov	ip, r8
 80060c8:	46ae      	mov	lr, r5
 80060ca:	46d3      	mov	fp, sl
 80060cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060d0:	b298      	uxth	r0, r3
 80060d2:	fb06 a000 	mla	r0, r6, r0, sl
 80060d6:	0c02      	lsrs	r2, r0, #16
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	fb06 2303 	mla	r3, r6, r3, r2
 80060de:	f8de 2000 	ldr.w	r2, [lr]
 80060e2:	b280      	uxth	r0, r0
 80060e4:	b292      	uxth	r2, r2
 80060e6:	1a12      	subs	r2, r2, r0
 80060e8:	445a      	add	r2, fp
 80060ea:	f8de 0000 	ldr.w	r0, [lr]
 80060ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060fc:	b292      	uxth	r2, r2
 80060fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006102:	45e1      	cmp	r9, ip
 8006104:	f84e 2b04 	str.w	r2, [lr], #4
 8006108:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800610c:	d2de      	bcs.n	80060cc <quorem+0x42>
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	58eb      	ldr	r3, [r5, r3]
 8006112:	b92b      	cbnz	r3, 8006120 <quorem+0x96>
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	3b04      	subs	r3, #4
 8006118:	429d      	cmp	r5, r3
 800611a:	461a      	mov	r2, r3
 800611c:	d32f      	bcc.n	800617e <quorem+0xf4>
 800611e:	613c      	str	r4, [r7, #16]
 8006120:	4638      	mov	r0, r7
 8006122:	f001 fb35 	bl	8007790 <__mcmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	db25      	blt.n	8006176 <quorem+0xec>
 800612a:	4629      	mov	r1, r5
 800612c:	2000      	movs	r0, #0
 800612e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006132:	f8d1 c000 	ldr.w	ip, [r1]
 8006136:	fa1f fe82 	uxth.w	lr, r2
 800613a:	fa1f f38c 	uxth.w	r3, ip
 800613e:	eba3 030e 	sub.w	r3, r3, lr
 8006142:	4403      	add	r3, r0
 8006144:	0c12      	lsrs	r2, r2, #16
 8006146:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800614a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800614e:	b29b      	uxth	r3, r3
 8006150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006154:	45c1      	cmp	r9, r8
 8006156:	f841 3b04 	str.w	r3, [r1], #4
 800615a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800615e:	d2e6      	bcs.n	800612e <quorem+0xa4>
 8006160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006168:	b922      	cbnz	r2, 8006174 <quorem+0xea>
 800616a:	3b04      	subs	r3, #4
 800616c:	429d      	cmp	r5, r3
 800616e:	461a      	mov	r2, r3
 8006170:	d30b      	bcc.n	800618a <quorem+0x100>
 8006172:	613c      	str	r4, [r7, #16]
 8006174:	3601      	adds	r6, #1
 8006176:	4630      	mov	r0, r6
 8006178:	b003      	add	sp, #12
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	3b04      	subs	r3, #4
 8006182:	2a00      	cmp	r2, #0
 8006184:	d1cb      	bne.n	800611e <quorem+0x94>
 8006186:	3c01      	subs	r4, #1
 8006188:	e7c6      	b.n	8006118 <quorem+0x8e>
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	3b04      	subs	r3, #4
 800618e:	2a00      	cmp	r2, #0
 8006190:	d1ef      	bne.n	8006172 <quorem+0xe8>
 8006192:	3c01      	subs	r4, #1
 8006194:	e7ea      	b.n	800616c <quorem+0xe2>
 8006196:	2000      	movs	r0, #0
 8006198:	e7ee      	b.n	8006178 <quorem+0xee>
 800619a:	0000      	movs	r0, r0
 800619c:	0000      	movs	r0, r0
	...

080061a0 <_dtoa_r>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	69c7      	ldr	r7, [r0, #28]
 80061a6:	b099      	sub	sp, #100	@ 0x64
 80061a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061ac:	ec55 4b10 	vmov	r4, r5, d0
 80061b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80061b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80061b4:	4683      	mov	fp, r0
 80061b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80061b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061ba:	b97f      	cbnz	r7, 80061dc <_dtoa_r+0x3c>
 80061bc:	2010      	movs	r0, #16
 80061be:	f000 ff0b 	bl	8006fd8 <malloc>
 80061c2:	4602      	mov	r2, r0
 80061c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80061c8:	b920      	cbnz	r0, 80061d4 <_dtoa_r+0x34>
 80061ca:	4ba7      	ldr	r3, [pc, #668]	@ (8006468 <_dtoa_r+0x2c8>)
 80061cc:	21ef      	movs	r1, #239	@ 0xef
 80061ce:	48a7      	ldr	r0, [pc, #668]	@ (800646c <_dtoa_r+0x2cc>)
 80061d0:	f001 fcd6 	bl	8007b80 <__assert_func>
 80061d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061d8:	6007      	str	r7, [r0, #0]
 80061da:	60c7      	str	r7, [r0, #12]
 80061dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	b159      	cbz	r1, 80061fc <_dtoa_r+0x5c>
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	604a      	str	r2, [r1, #4]
 80061e8:	2301      	movs	r3, #1
 80061ea:	4093      	lsls	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
 80061ee:	4658      	mov	r0, fp
 80061f0:	f001 f894 	bl	800731c <_Bfree>
 80061f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	1e2b      	subs	r3, r5, #0
 80061fe:	bfb9      	ittee	lt
 8006200:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006204:	9303      	strlt	r3, [sp, #12]
 8006206:	2300      	movge	r3, #0
 8006208:	6033      	strge	r3, [r6, #0]
 800620a:	9f03      	ldr	r7, [sp, #12]
 800620c:	4b98      	ldr	r3, [pc, #608]	@ (8006470 <_dtoa_r+0x2d0>)
 800620e:	bfbc      	itt	lt
 8006210:	2201      	movlt	r2, #1
 8006212:	6032      	strlt	r2, [r6, #0]
 8006214:	43bb      	bics	r3, r7
 8006216:	d112      	bne.n	800623e <_dtoa_r+0x9e>
 8006218:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800621a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006224:	4323      	orrs	r3, r4
 8006226:	f000 854d 	beq.w	8006cc4 <_dtoa_r+0xb24>
 800622a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800622c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006484 <_dtoa_r+0x2e4>
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 854f 	beq.w	8006cd4 <_dtoa_r+0xb34>
 8006236:	f10a 0303 	add.w	r3, sl, #3
 800623a:	f000 bd49 	b.w	8006cd0 <_dtoa_r+0xb30>
 800623e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	ec51 0b17 	vmov	r0, r1, d7
 8006248:	2300      	movs	r3, #0
 800624a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800624e:	f7fa fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006252:	4680      	mov	r8, r0
 8006254:	b158      	cbz	r0, 800626e <_dtoa_r+0xce>
 8006256:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006258:	2301      	movs	r3, #1
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800625e:	b113      	cbz	r3, 8006266 <_dtoa_r+0xc6>
 8006260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006262:	4b84      	ldr	r3, [pc, #528]	@ (8006474 <_dtoa_r+0x2d4>)
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006488 <_dtoa_r+0x2e8>
 800626a:	f000 bd33 	b.w	8006cd4 <_dtoa_r+0xb34>
 800626e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006272:	aa16      	add	r2, sp, #88	@ 0x58
 8006274:	a917      	add	r1, sp, #92	@ 0x5c
 8006276:	4658      	mov	r0, fp
 8006278:	f001 fb3a 	bl	80078f0 <__d2b>
 800627c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006280:	4681      	mov	r9, r0
 8006282:	2e00      	cmp	r6, #0
 8006284:	d077      	beq.n	8006376 <_dtoa_r+0x1d6>
 8006286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006288:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800628c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006294:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006298:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800629c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062a0:	4619      	mov	r1, r3
 80062a2:	2200      	movs	r2, #0
 80062a4:	4b74      	ldr	r3, [pc, #464]	@ (8006478 <_dtoa_r+0x2d8>)
 80062a6:	f7f9 ffef 	bl	8000288 <__aeabi_dsub>
 80062aa:	a369      	add	r3, pc, #420	@ (adr r3, 8006450 <_dtoa_r+0x2b0>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f9a2 	bl	80005f8 <__aeabi_dmul>
 80062b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006458 <_dtoa_r+0x2b8>)
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f7f9 ffe7 	bl	800028c <__adddf3>
 80062be:	4604      	mov	r4, r0
 80062c0:	4630      	mov	r0, r6
 80062c2:	460d      	mov	r5, r1
 80062c4:	f7fa f92e 	bl	8000524 <__aeabi_i2d>
 80062c8:	a365      	add	r3, pc, #404	@ (adr r3, 8006460 <_dtoa_r+0x2c0>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7fa f993 	bl	80005f8 <__aeabi_dmul>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7f9 ffd7 	bl	800028c <__adddf3>
 80062de:	4604      	mov	r4, r0
 80062e0:	460d      	mov	r5, r1
 80062e2:	f7fa fc39 	bl	8000b58 <__aeabi_d2iz>
 80062e6:	2200      	movs	r2, #0
 80062e8:	4607      	mov	r7, r0
 80062ea:	2300      	movs	r3, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	4629      	mov	r1, r5
 80062f0:	f7fa fbf4 	bl	8000adc <__aeabi_dcmplt>
 80062f4:	b140      	cbz	r0, 8006308 <_dtoa_r+0x168>
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7fa f914 	bl	8000524 <__aeabi_i2d>
 80062fc:	4622      	mov	r2, r4
 80062fe:	462b      	mov	r3, r5
 8006300:	f7fa fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006304:	b900      	cbnz	r0, 8006308 <_dtoa_r+0x168>
 8006306:	3f01      	subs	r7, #1
 8006308:	2f16      	cmp	r7, #22
 800630a:	d851      	bhi.n	80063b0 <_dtoa_r+0x210>
 800630c:	4b5b      	ldr	r3, [pc, #364]	@ (800647c <_dtoa_r+0x2dc>)
 800630e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800631a:	f7fa fbdf 	bl	8000adc <__aeabi_dcmplt>
 800631e:	2800      	cmp	r0, #0
 8006320:	d048      	beq.n	80063b4 <_dtoa_r+0x214>
 8006322:	3f01      	subs	r7, #1
 8006324:	2300      	movs	r3, #0
 8006326:	9312      	str	r3, [sp, #72]	@ 0x48
 8006328:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800632a:	1b9b      	subs	r3, r3, r6
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	bf44      	itt	mi
 8006330:	f1c3 0801 	rsbmi	r8, r3, #1
 8006334:	2300      	movmi	r3, #0
 8006336:	9208      	str	r2, [sp, #32]
 8006338:	bf54      	ite	pl
 800633a:	f04f 0800 	movpl.w	r8, #0
 800633e:	9308      	strmi	r3, [sp, #32]
 8006340:	2f00      	cmp	r7, #0
 8006342:	db39      	blt.n	80063b8 <_dtoa_r+0x218>
 8006344:	9b08      	ldr	r3, [sp, #32]
 8006346:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006348:	443b      	add	r3, r7
 800634a:	9308      	str	r3, [sp, #32]
 800634c:	2300      	movs	r3, #0
 800634e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006352:	2b09      	cmp	r3, #9
 8006354:	d864      	bhi.n	8006420 <_dtoa_r+0x280>
 8006356:	2b05      	cmp	r3, #5
 8006358:	bfc4      	itt	gt
 800635a:	3b04      	subgt	r3, #4
 800635c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800635e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006360:	f1a3 0302 	sub.w	r3, r3, #2
 8006364:	bfcc      	ite	gt
 8006366:	2400      	movgt	r4, #0
 8006368:	2401      	movle	r4, #1
 800636a:	2b03      	cmp	r3, #3
 800636c:	d863      	bhi.n	8006436 <_dtoa_r+0x296>
 800636e:	e8df f003 	tbb	[pc, r3]
 8006372:	372a      	.short	0x372a
 8006374:	5535      	.short	0x5535
 8006376:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800637a:	441e      	add	r6, r3
 800637c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006380:	2b20      	cmp	r3, #32
 8006382:	bfc1      	itttt	gt
 8006384:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006388:	409f      	lslgt	r7, r3
 800638a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800638e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006392:	bfd6      	itet	le
 8006394:	f1c3 0320 	rsble	r3, r3, #32
 8006398:	ea47 0003 	orrgt.w	r0, r7, r3
 800639c:	fa04 f003 	lslle.w	r0, r4, r3
 80063a0:	f7fa f8b0 	bl	8000504 <__aeabi_ui2d>
 80063a4:	2201      	movs	r2, #1
 80063a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063aa:	3e01      	subs	r6, #1
 80063ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80063ae:	e777      	b.n	80062a0 <_dtoa_r+0x100>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e7b8      	b.n	8006326 <_dtoa_r+0x186>
 80063b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80063b6:	e7b7      	b.n	8006328 <_dtoa_r+0x188>
 80063b8:	427b      	negs	r3, r7
 80063ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80063bc:	2300      	movs	r3, #0
 80063be:	eba8 0807 	sub.w	r8, r8, r7
 80063c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063c4:	e7c4      	b.n	8006350 <_dtoa_r+0x1b0>
 80063c6:	2300      	movs	r3, #0
 80063c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dc35      	bgt.n	800643c <_dtoa_r+0x29c>
 80063d0:	2301      	movs	r3, #1
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	461a      	mov	r2, r3
 80063d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80063da:	e00b      	b.n	80063f4 <_dtoa_r+0x254>
 80063dc:	2301      	movs	r3, #1
 80063de:	e7f3      	b.n	80063c8 <_dtoa_r+0x228>
 80063e0:	2300      	movs	r3, #0
 80063e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	9307      	str	r3, [sp, #28]
 80063f0:	bfb8      	it	lt
 80063f2:	2301      	movlt	r3, #1
 80063f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80063f8:	2100      	movs	r1, #0
 80063fa:	2204      	movs	r2, #4
 80063fc:	f102 0514 	add.w	r5, r2, #20
 8006400:	429d      	cmp	r5, r3
 8006402:	d91f      	bls.n	8006444 <_dtoa_r+0x2a4>
 8006404:	6041      	str	r1, [r0, #4]
 8006406:	4658      	mov	r0, fp
 8006408:	f000 ff48 	bl	800729c <_Balloc>
 800640c:	4682      	mov	sl, r0
 800640e:	2800      	cmp	r0, #0
 8006410:	d13c      	bne.n	800648c <_dtoa_r+0x2ec>
 8006412:	4b1b      	ldr	r3, [pc, #108]	@ (8006480 <_dtoa_r+0x2e0>)
 8006414:	4602      	mov	r2, r0
 8006416:	f240 11af 	movw	r1, #431	@ 0x1af
 800641a:	e6d8      	b.n	80061ce <_dtoa_r+0x2e>
 800641c:	2301      	movs	r3, #1
 800641e:	e7e0      	b.n	80063e2 <_dtoa_r+0x242>
 8006420:	2401      	movs	r4, #1
 8006422:	2300      	movs	r3, #0
 8006424:	9309      	str	r3, [sp, #36]	@ 0x24
 8006426:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006428:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	9307      	str	r3, [sp, #28]
 8006430:	2200      	movs	r2, #0
 8006432:	2312      	movs	r3, #18
 8006434:	e7d0      	b.n	80063d8 <_dtoa_r+0x238>
 8006436:	2301      	movs	r3, #1
 8006438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800643a:	e7f5      	b.n	8006428 <_dtoa_r+0x288>
 800643c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	9307      	str	r3, [sp, #28]
 8006442:	e7d7      	b.n	80063f4 <_dtoa_r+0x254>
 8006444:	3101      	adds	r1, #1
 8006446:	0052      	lsls	r2, r2, #1
 8006448:	e7d8      	b.n	80063fc <_dtoa_r+0x25c>
 800644a:	bf00      	nop
 800644c:	f3af 8000 	nop.w
 8006450:	636f4361 	.word	0x636f4361
 8006454:	3fd287a7 	.word	0x3fd287a7
 8006458:	8b60c8b3 	.word	0x8b60c8b3
 800645c:	3fc68a28 	.word	0x3fc68a28
 8006460:	509f79fb 	.word	0x509f79fb
 8006464:	3fd34413 	.word	0x3fd34413
 8006468:	08008399 	.word	0x08008399
 800646c:	080083b0 	.word	0x080083b0
 8006470:	7ff00000 	.word	0x7ff00000
 8006474:	08008369 	.word	0x08008369
 8006478:	3ff80000 	.word	0x3ff80000
 800647c:	080084b8 	.word	0x080084b8
 8006480:	08008408 	.word	0x08008408
 8006484:	08008395 	.word	0x08008395
 8006488:	08008368 	.word	0x08008368
 800648c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006490:	6018      	str	r0, [r3, #0]
 8006492:	9b07      	ldr	r3, [sp, #28]
 8006494:	2b0e      	cmp	r3, #14
 8006496:	f200 80a4 	bhi.w	80065e2 <_dtoa_r+0x442>
 800649a:	2c00      	cmp	r4, #0
 800649c:	f000 80a1 	beq.w	80065e2 <_dtoa_r+0x442>
 80064a0:	2f00      	cmp	r7, #0
 80064a2:	dd33      	ble.n	800650c <_dtoa_r+0x36c>
 80064a4:	4bad      	ldr	r3, [pc, #692]	@ (800675c <_dtoa_r+0x5bc>)
 80064a6:	f007 020f 	and.w	r2, r7, #15
 80064aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ae:	ed93 7b00 	vldr	d7, [r3]
 80064b2:	05f8      	lsls	r0, r7, #23
 80064b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80064b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064bc:	d516      	bpl.n	80064ec <_dtoa_r+0x34c>
 80064be:	4ba8      	ldr	r3, [pc, #672]	@ (8006760 <_dtoa_r+0x5c0>)
 80064c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064c8:	f7fa f9c0 	bl	800084c <__aeabi_ddiv>
 80064cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d0:	f004 040f 	and.w	r4, r4, #15
 80064d4:	2603      	movs	r6, #3
 80064d6:	4da2      	ldr	r5, [pc, #648]	@ (8006760 <_dtoa_r+0x5c0>)
 80064d8:	b954      	cbnz	r4, 80064f0 <_dtoa_r+0x350>
 80064da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e2:	f7fa f9b3 	bl	800084c <__aeabi_ddiv>
 80064e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ea:	e028      	b.n	800653e <_dtoa_r+0x39e>
 80064ec:	2602      	movs	r6, #2
 80064ee:	e7f2      	b.n	80064d6 <_dtoa_r+0x336>
 80064f0:	07e1      	lsls	r1, r4, #31
 80064f2:	d508      	bpl.n	8006506 <_dtoa_r+0x366>
 80064f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064fc:	f7fa f87c 	bl	80005f8 <__aeabi_dmul>
 8006500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006504:	3601      	adds	r6, #1
 8006506:	1064      	asrs	r4, r4, #1
 8006508:	3508      	adds	r5, #8
 800650a:	e7e5      	b.n	80064d8 <_dtoa_r+0x338>
 800650c:	f000 80d2 	beq.w	80066b4 <_dtoa_r+0x514>
 8006510:	427c      	negs	r4, r7
 8006512:	4b92      	ldr	r3, [pc, #584]	@ (800675c <_dtoa_r+0x5bc>)
 8006514:	4d92      	ldr	r5, [pc, #584]	@ (8006760 <_dtoa_r+0x5c0>)
 8006516:	f004 020f 	and.w	r2, r4, #15
 800651a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006526:	f7fa f867 	bl	80005f8 <__aeabi_dmul>
 800652a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800652e:	1124      	asrs	r4, r4, #4
 8006530:	2300      	movs	r3, #0
 8006532:	2602      	movs	r6, #2
 8006534:	2c00      	cmp	r4, #0
 8006536:	f040 80b2 	bne.w	800669e <_dtoa_r+0x4fe>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1d3      	bne.n	80064e6 <_dtoa_r+0x346>
 800653e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006540:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80b7 	beq.w	80066b8 <_dtoa_r+0x518>
 800654a:	4b86      	ldr	r3, [pc, #536]	@ (8006764 <_dtoa_r+0x5c4>)
 800654c:	2200      	movs	r2, #0
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7fa fac3 	bl	8000adc <__aeabi_dcmplt>
 8006556:	2800      	cmp	r0, #0
 8006558:	f000 80ae 	beq.w	80066b8 <_dtoa_r+0x518>
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80aa 	beq.w	80066b8 <_dtoa_r+0x518>
 8006564:	9b00      	ldr	r3, [sp, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	dd37      	ble.n	80065da <_dtoa_r+0x43a>
 800656a:	1e7b      	subs	r3, r7, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	4620      	mov	r0, r4
 8006570:	4b7d      	ldr	r3, [pc, #500]	@ (8006768 <_dtoa_r+0x5c8>)
 8006572:	2200      	movs	r2, #0
 8006574:	4629      	mov	r1, r5
 8006576:	f7fa f83f 	bl	80005f8 <__aeabi_dmul>
 800657a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657e:	9c00      	ldr	r4, [sp, #0]
 8006580:	3601      	adds	r6, #1
 8006582:	4630      	mov	r0, r6
 8006584:	f7f9 ffce 	bl	8000524 <__aeabi_i2d>
 8006588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800658c:	f7fa f834 	bl	80005f8 <__aeabi_dmul>
 8006590:	4b76      	ldr	r3, [pc, #472]	@ (800676c <_dtoa_r+0x5cc>)
 8006592:	2200      	movs	r2, #0
 8006594:	f7f9 fe7a 	bl	800028c <__adddf3>
 8006598:	4605      	mov	r5, r0
 800659a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800659e:	2c00      	cmp	r4, #0
 80065a0:	f040 808d 	bne.w	80066be <_dtoa_r+0x51e>
 80065a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a8:	4b71      	ldr	r3, [pc, #452]	@ (8006770 <_dtoa_r+0x5d0>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	f7f9 fe6c 	bl	8000288 <__aeabi_dsub>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065b8:	462a      	mov	r2, r5
 80065ba:	4633      	mov	r3, r6
 80065bc:	f7fa faac 	bl	8000b18 <__aeabi_dcmpgt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f040 828b 	bne.w	8006adc <_dtoa_r+0x93c>
 80065c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ca:	462a      	mov	r2, r5
 80065cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065d0:	f7fa fa84 	bl	8000adc <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 8128 	bne.w	800682a <_dtoa_r+0x68a>
 80065da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f2c0 815a 	blt.w	800689e <_dtoa_r+0x6fe>
 80065ea:	2f0e      	cmp	r7, #14
 80065ec:	f300 8157 	bgt.w	800689e <_dtoa_r+0x6fe>
 80065f0:	4b5a      	ldr	r3, [pc, #360]	@ (800675c <_dtoa_r+0x5bc>)
 80065f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065f6:	ed93 7b00 	vldr	d7, [r3]
 80065fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	ed8d 7b00 	vstr	d7, [sp]
 8006602:	da03      	bge.n	800660c <_dtoa_r+0x46c>
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f340 8101 	ble.w	800680e <_dtoa_r+0x66e>
 800660c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006610:	4656      	mov	r6, sl
 8006612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	f7fa f917 	bl	800084c <__aeabi_ddiv>
 800661e:	f7fa fa9b 	bl	8000b58 <__aeabi_d2iz>
 8006622:	4680      	mov	r8, r0
 8006624:	f7f9 ff7e 	bl	8000524 <__aeabi_i2d>
 8006628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800662c:	f7f9 ffe4 	bl	80005f8 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800663c:	f7f9 fe24 	bl	8000288 <__aeabi_dsub>
 8006640:	f806 4b01 	strb.w	r4, [r6], #1
 8006644:	9d07      	ldr	r5, [sp, #28]
 8006646:	eba6 040a 	sub.w	r4, r6, sl
 800664a:	42a5      	cmp	r5, r4
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	f040 8117 	bne.w	8006882 <_dtoa_r+0x6e2>
 8006654:	f7f9 fe1a 	bl	800028c <__adddf3>
 8006658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665c:	4604      	mov	r4, r0
 800665e:	460d      	mov	r5, r1
 8006660:	f7fa fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8006664:	2800      	cmp	r0, #0
 8006666:	f040 80f9 	bne.w	800685c <_dtoa_r+0x6bc>
 800666a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7fa fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006676:	b118      	cbz	r0, 8006680 <_dtoa_r+0x4e0>
 8006678:	f018 0f01 	tst.w	r8, #1
 800667c:	f040 80ee 	bne.w	800685c <_dtoa_r+0x6bc>
 8006680:	4649      	mov	r1, r9
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fe4a 	bl	800731c <_Bfree>
 8006688:	2300      	movs	r3, #0
 800668a:	7033      	strb	r3, [r6, #0]
 800668c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800668e:	3701      	adds	r7, #1
 8006690:	601f      	str	r7, [r3, #0]
 8006692:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 831d 	beq.w	8006cd4 <_dtoa_r+0xb34>
 800669a:	601e      	str	r6, [r3, #0]
 800669c:	e31a      	b.n	8006cd4 <_dtoa_r+0xb34>
 800669e:	07e2      	lsls	r2, r4, #31
 80066a0:	d505      	bpl.n	80066ae <_dtoa_r+0x50e>
 80066a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	3601      	adds	r6, #1
 80066ac:	2301      	movs	r3, #1
 80066ae:	1064      	asrs	r4, r4, #1
 80066b0:	3508      	adds	r5, #8
 80066b2:	e73f      	b.n	8006534 <_dtoa_r+0x394>
 80066b4:	2602      	movs	r6, #2
 80066b6:	e742      	b.n	800653e <_dtoa_r+0x39e>
 80066b8:	9c07      	ldr	r4, [sp, #28]
 80066ba:	9704      	str	r7, [sp, #16]
 80066bc:	e761      	b.n	8006582 <_dtoa_r+0x3e2>
 80066be:	4b27      	ldr	r3, [pc, #156]	@ (800675c <_dtoa_r+0x5bc>)
 80066c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066ca:	4454      	add	r4, sl
 80066cc:	2900      	cmp	r1, #0
 80066ce:	d053      	beq.n	8006778 <_dtoa_r+0x5d8>
 80066d0:	4928      	ldr	r1, [pc, #160]	@ (8006774 <_dtoa_r+0x5d4>)
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7fa f8ba 	bl	800084c <__aeabi_ddiv>
 80066d8:	4633      	mov	r3, r6
 80066da:	462a      	mov	r2, r5
 80066dc:	f7f9 fdd4 	bl	8000288 <__aeabi_dsub>
 80066e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066e4:	4656      	mov	r6, sl
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	f7fa fa35 	bl	8000b58 <__aeabi_d2iz>
 80066ee:	4605      	mov	r5, r0
 80066f0:	f7f9 ff18 	bl	8000524 <__aeabi_i2d>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	3530      	adds	r5, #48	@ 0x30
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800670a:	f806 5b01 	strb.w	r5, [r6], #1
 800670e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006712:	f7fa f9e3 	bl	8000adc <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d171      	bne.n	80067fe <_dtoa_r+0x65e>
 800671a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671e:	4911      	ldr	r1, [pc, #68]	@ (8006764 <_dtoa_r+0x5c4>)
 8006720:	2000      	movs	r0, #0
 8006722:	f7f9 fdb1 	bl	8000288 <__aeabi_dsub>
 8006726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800672a:	f7fa f9d7 	bl	8000adc <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	f040 8095 	bne.w	800685e <_dtoa_r+0x6be>
 8006734:	42a6      	cmp	r6, r4
 8006736:	f43f af50 	beq.w	80065da <_dtoa_r+0x43a>
 800673a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800673e:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <_dtoa_r+0x5c8>)
 8006740:	2200      	movs	r2, #0
 8006742:	f7f9 ff59 	bl	80005f8 <__aeabi_dmul>
 8006746:	4b08      	ldr	r3, [pc, #32]	@ (8006768 <_dtoa_r+0x5c8>)
 8006748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800674c:	2200      	movs	r2, #0
 800674e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006752:	f7f9 ff51 	bl	80005f8 <__aeabi_dmul>
 8006756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800675a:	e7c4      	b.n	80066e6 <_dtoa_r+0x546>
 800675c:	080084b8 	.word	0x080084b8
 8006760:	08008490 	.word	0x08008490
 8006764:	3ff00000 	.word	0x3ff00000
 8006768:	40240000 	.word	0x40240000
 800676c:	401c0000 	.word	0x401c0000
 8006770:	40140000 	.word	0x40140000
 8006774:	3fe00000 	.word	0x3fe00000
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006784:	9415      	str	r4, [sp, #84]	@ 0x54
 8006786:	4656      	mov	r6, sl
 8006788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800678c:	f7fa f9e4 	bl	8000b58 <__aeabi_d2iz>
 8006790:	4605      	mov	r5, r0
 8006792:	f7f9 fec7 	bl	8000524 <__aeabi_i2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679e:	f7f9 fd73 	bl	8000288 <__aeabi_dsub>
 80067a2:	3530      	adds	r5, #48	@ 0x30
 80067a4:	f806 5b01 	strb.w	r5, [r6], #1
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	d124      	bne.n	8006802 <_dtoa_r+0x662>
 80067b8:	4bac      	ldr	r3, [pc, #688]	@ (8006a6c <_dtoa_r+0x8cc>)
 80067ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067be:	f7f9 fd65 	bl	800028c <__adddf3>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ca:	f7fa f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d145      	bne.n	800685e <_dtoa_r+0x6be>
 80067d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067d6:	49a5      	ldr	r1, [pc, #660]	@ (8006a6c <_dtoa_r+0x8cc>)
 80067d8:	2000      	movs	r0, #0
 80067da:	f7f9 fd55 	bl	8000288 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e6:	f7fa f979 	bl	8000adc <__aeabi_dcmplt>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	f43f aef5 	beq.w	80065da <_dtoa_r+0x43a>
 80067f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80067f2:	1e73      	subs	r3, r6, #1
 80067f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80067f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067fa:	2b30      	cmp	r3, #48	@ 0x30
 80067fc:	d0f8      	beq.n	80067f0 <_dtoa_r+0x650>
 80067fe:	9f04      	ldr	r7, [sp, #16]
 8006800:	e73e      	b.n	8006680 <_dtoa_r+0x4e0>
 8006802:	4b9b      	ldr	r3, [pc, #620]	@ (8006a70 <_dtoa_r+0x8d0>)
 8006804:	f7f9 fef8 	bl	80005f8 <__aeabi_dmul>
 8006808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800680c:	e7bc      	b.n	8006788 <_dtoa_r+0x5e8>
 800680e:	d10c      	bne.n	800682a <_dtoa_r+0x68a>
 8006810:	4b98      	ldr	r3, [pc, #608]	@ (8006a74 <_dtoa_r+0x8d4>)
 8006812:	2200      	movs	r2, #0
 8006814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006818:	f7f9 feee 	bl	80005f8 <__aeabi_dmul>
 800681c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006820:	f7fa f970 	bl	8000b04 <__aeabi_dcmpge>
 8006824:	2800      	cmp	r0, #0
 8006826:	f000 8157 	beq.w	8006ad8 <_dtoa_r+0x938>
 800682a:	2400      	movs	r4, #0
 800682c:	4625      	mov	r5, r4
 800682e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006830:	43db      	mvns	r3, r3
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	4656      	mov	r6, sl
 8006836:	2700      	movs	r7, #0
 8006838:	4621      	mov	r1, r4
 800683a:	4658      	mov	r0, fp
 800683c:	f000 fd6e 	bl	800731c <_Bfree>
 8006840:	2d00      	cmp	r5, #0
 8006842:	d0dc      	beq.n	80067fe <_dtoa_r+0x65e>
 8006844:	b12f      	cbz	r7, 8006852 <_dtoa_r+0x6b2>
 8006846:	42af      	cmp	r7, r5
 8006848:	d003      	beq.n	8006852 <_dtoa_r+0x6b2>
 800684a:	4639      	mov	r1, r7
 800684c:	4658      	mov	r0, fp
 800684e:	f000 fd65 	bl	800731c <_Bfree>
 8006852:	4629      	mov	r1, r5
 8006854:	4658      	mov	r0, fp
 8006856:	f000 fd61 	bl	800731c <_Bfree>
 800685a:	e7d0      	b.n	80067fe <_dtoa_r+0x65e>
 800685c:	9704      	str	r7, [sp, #16]
 800685e:	4633      	mov	r3, r6
 8006860:	461e      	mov	r6, r3
 8006862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006866:	2a39      	cmp	r2, #57	@ 0x39
 8006868:	d107      	bne.n	800687a <_dtoa_r+0x6da>
 800686a:	459a      	cmp	sl, r3
 800686c:	d1f8      	bne.n	8006860 <_dtoa_r+0x6c0>
 800686e:	9a04      	ldr	r2, [sp, #16]
 8006870:	3201      	adds	r2, #1
 8006872:	9204      	str	r2, [sp, #16]
 8006874:	2230      	movs	r2, #48	@ 0x30
 8006876:	f88a 2000 	strb.w	r2, [sl]
 800687a:	781a      	ldrb	r2, [r3, #0]
 800687c:	3201      	adds	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e7bd      	b.n	80067fe <_dtoa_r+0x65e>
 8006882:	4b7b      	ldr	r3, [pc, #492]	@ (8006a70 <_dtoa_r+0x8d0>)
 8006884:	2200      	movs	r2, #0
 8006886:	f7f9 feb7 	bl	80005f8 <__aeabi_dmul>
 800688a:	2200      	movs	r2, #0
 800688c:	2300      	movs	r3, #0
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	f7fa f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8006896:	2800      	cmp	r0, #0
 8006898:	f43f aebb 	beq.w	8006612 <_dtoa_r+0x472>
 800689c:	e6f0      	b.n	8006680 <_dtoa_r+0x4e0>
 800689e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068a0:	2a00      	cmp	r2, #0
 80068a2:	f000 80db 	beq.w	8006a5c <_dtoa_r+0x8bc>
 80068a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068a8:	2a01      	cmp	r2, #1
 80068aa:	f300 80bf 	bgt.w	8006a2c <_dtoa_r+0x88c>
 80068ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068b0:	2a00      	cmp	r2, #0
 80068b2:	f000 80b7 	beq.w	8006a24 <_dtoa_r+0x884>
 80068b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068bc:	4646      	mov	r6, r8
 80068be:	9a08      	ldr	r2, [sp, #32]
 80068c0:	2101      	movs	r1, #1
 80068c2:	441a      	add	r2, r3
 80068c4:	4658      	mov	r0, fp
 80068c6:	4498      	add	r8, r3
 80068c8:	9208      	str	r2, [sp, #32]
 80068ca:	f000 fddb 	bl	8007484 <__i2b>
 80068ce:	4605      	mov	r5, r0
 80068d0:	b15e      	cbz	r6, 80068ea <_dtoa_r+0x74a>
 80068d2:	9b08      	ldr	r3, [sp, #32]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dd08      	ble.n	80068ea <_dtoa_r+0x74a>
 80068d8:	42b3      	cmp	r3, r6
 80068da:	9a08      	ldr	r2, [sp, #32]
 80068dc:	bfa8      	it	ge
 80068de:	4633      	movge	r3, r6
 80068e0:	eba8 0803 	sub.w	r8, r8, r3
 80068e4:	1af6      	subs	r6, r6, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	9308      	str	r3, [sp, #32]
 80068ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ec:	b1f3      	cbz	r3, 800692c <_dtoa_r+0x78c>
 80068ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80b7 	beq.w	8006a64 <_dtoa_r+0x8c4>
 80068f6:	b18c      	cbz	r4, 800691c <_dtoa_r+0x77c>
 80068f8:	4629      	mov	r1, r5
 80068fa:	4622      	mov	r2, r4
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fe81 	bl	8007604 <__pow5mult>
 8006902:	464a      	mov	r2, r9
 8006904:	4601      	mov	r1, r0
 8006906:	4605      	mov	r5, r0
 8006908:	4658      	mov	r0, fp
 800690a:	f000 fdd1 	bl	80074b0 <__multiply>
 800690e:	4649      	mov	r1, r9
 8006910:	9004      	str	r0, [sp, #16]
 8006912:	4658      	mov	r0, fp
 8006914:	f000 fd02 	bl	800731c <_Bfree>
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	4699      	mov	r9, r3
 800691c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800691e:	1b1a      	subs	r2, r3, r4
 8006920:	d004      	beq.n	800692c <_dtoa_r+0x78c>
 8006922:	4649      	mov	r1, r9
 8006924:	4658      	mov	r0, fp
 8006926:	f000 fe6d 	bl	8007604 <__pow5mult>
 800692a:	4681      	mov	r9, r0
 800692c:	2101      	movs	r1, #1
 800692e:	4658      	mov	r0, fp
 8006930:	f000 fda8 	bl	8007484 <__i2b>
 8006934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006936:	4604      	mov	r4, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 81cf 	beq.w	8006cdc <_dtoa_r+0xb3c>
 800693e:	461a      	mov	r2, r3
 8006940:	4601      	mov	r1, r0
 8006942:	4658      	mov	r0, fp
 8006944:	f000 fe5e 	bl	8007604 <__pow5mult>
 8006948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694a:	2b01      	cmp	r3, #1
 800694c:	4604      	mov	r4, r0
 800694e:	f300 8095 	bgt.w	8006a7c <_dtoa_r+0x8dc>
 8006952:	9b02      	ldr	r3, [sp, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 8087 	bne.w	8006a68 <_dtoa_r+0x8c8>
 800695a:	9b03      	ldr	r3, [sp, #12]
 800695c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 8089 	bne.w	8006a78 <_dtoa_r+0x8d8>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800696c:	0d1b      	lsrs	r3, r3, #20
 800696e:	051b      	lsls	r3, r3, #20
 8006970:	b12b      	cbz	r3, 800697e <_dtoa_r+0x7de>
 8006972:	9b08      	ldr	r3, [sp, #32]
 8006974:	3301      	adds	r3, #1
 8006976:	9308      	str	r3, [sp, #32]
 8006978:	f108 0801 	add.w	r8, r8, #1
 800697c:	2301      	movs	r3, #1
 800697e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 81b0 	beq.w	8006ce8 <_dtoa_r+0xb48>
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800698e:	6918      	ldr	r0, [r3, #16]
 8006990:	f000 fd2c 	bl	80073ec <__hi0bits>
 8006994:	f1c0 0020 	rsb	r0, r0, #32
 8006998:	9b08      	ldr	r3, [sp, #32]
 800699a:	4418      	add	r0, r3
 800699c:	f010 001f 	ands.w	r0, r0, #31
 80069a0:	d077      	beq.n	8006a92 <_dtoa_r+0x8f2>
 80069a2:	f1c0 0320 	rsb	r3, r0, #32
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	dd6b      	ble.n	8006a82 <_dtoa_r+0x8e2>
 80069aa:	9b08      	ldr	r3, [sp, #32]
 80069ac:	f1c0 001c 	rsb	r0, r0, #28
 80069b0:	4403      	add	r3, r0
 80069b2:	4480      	add	r8, r0
 80069b4:	4406      	add	r6, r0
 80069b6:	9308      	str	r3, [sp, #32]
 80069b8:	f1b8 0f00 	cmp.w	r8, #0
 80069bc:	dd05      	ble.n	80069ca <_dtoa_r+0x82a>
 80069be:	4649      	mov	r1, r9
 80069c0:	4642      	mov	r2, r8
 80069c2:	4658      	mov	r0, fp
 80069c4:	f000 fe78 	bl	80076b8 <__lshift>
 80069c8:	4681      	mov	r9, r0
 80069ca:	9b08      	ldr	r3, [sp, #32]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dd05      	ble.n	80069dc <_dtoa_r+0x83c>
 80069d0:	4621      	mov	r1, r4
 80069d2:	461a      	mov	r2, r3
 80069d4:	4658      	mov	r0, fp
 80069d6:	f000 fe6f 	bl	80076b8 <__lshift>
 80069da:	4604      	mov	r4, r0
 80069dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d059      	beq.n	8006a96 <_dtoa_r+0x8f6>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4648      	mov	r0, r9
 80069e6:	f000 fed3 	bl	8007790 <__mcmp>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	da53      	bge.n	8006a96 <_dtoa_r+0x8f6>
 80069ee:	1e7b      	subs	r3, r7, #1
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	4649      	mov	r1, r9
 80069f4:	2300      	movs	r3, #0
 80069f6:	220a      	movs	r2, #10
 80069f8:	4658      	mov	r0, fp
 80069fa:	f000 fcb1 	bl	8007360 <__multadd>
 80069fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a00:	4681      	mov	r9, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8172 	beq.w	8006cec <_dtoa_r+0xb4c>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	4658      	mov	r0, fp
 8006a10:	f000 fca6 	bl	8007360 <__multadd>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	4605      	mov	r5, r0
 8006a1a:	dc67      	bgt.n	8006aec <_dtoa_r+0x94c>
 8006a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	dc41      	bgt.n	8006aa6 <_dtoa_r+0x906>
 8006a22:	e063      	b.n	8006aec <_dtoa_r+0x94c>
 8006a24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a2a:	e746      	b.n	80068ba <_dtoa_r+0x71a>
 8006a2c:	9b07      	ldr	r3, [sp, #28]
 8006a2e:	1e5c      	subs	r4, r3, #1
 8006a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a32:	42a3      	cmp	r3, r4
 8006a34:	bfbf      	itttt	lt
 8006a36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a3c:	1ae3      	sublt	r3, r4, r3
 8006a3e:	bfb4      	ite	lt
 8006a40:	18d2      	addlt	r2, r2, r3
 8006a42:	1b1c      	subge	r4, r3, r4
 8006a44:	9b07      	ldr	r3, [sp, #28]
 8006a46:	bfbc      	itt	lt
 8006a48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a4a:	2400      	movlt	r4, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfb5      	itete	lt
 8006a50:	eba8 0603 	sublt.w	r6, r8, r3
 8006a54:	9b07      	ldrge	r3, [sp, #28]
 8006a56:	2300      	movlt	r3, #0
 8006a58:	4646      	movge	r6, r8
 8006a5a:	e730      	b.n	80068be <_dtoa_r+0x71e>
 8006a5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a60:	4646      	mov	r6, r8
 8006a62:	e735      	b.n	80068d0 <_dtoa_r+0x730>
 8006a64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a66:	e75c      	b.n	8006922 <_dtoa_r+0x782>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e788      	b.n	800697e <_dtoa_r+0x7de>
 8006a6c:	3fe00000 	.word	0x3fe00000
 8006a70:	40240000 	.word	0x40240000
 8006a74:	40140000 	.word	0x40140000
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	e780      	b.n	800697e <_dtoa_r+0x7de>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a80:	e782      	b.n	8006988 <_dtoa_r+0x7e8>
 8006a82:	d099      	beq.n	80069b8 <_dtoa_r+0x818>
 8006a84:	9a08      	ldr	r2, [sp, #32]
 8006a86:	331c      	adds	r3, #28
 8006a88:	441a      	add	r2, r3
 8006a8a:	4498      	add	r8, r3
 8006a8c:	441e      	add	r6, r3
 8006a8e:	9208      	str	r2, [sp, #32]
 8006a90:	e792      	b.n	80069b8 <_dtoa_r+0x818>
 8006a92:	4603      	mov	r3, r0
 8006a94:	e7f6      	b.n	8006a84 <_dtoa_r+0x8e4>
 8006a96:	9b07      	ldr	r3, [sp, #28]
 8006a98:	9704      	str	r7, [sp, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dc20      	bgt.n	8006ae0 <_dtoa_r+0x940>
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd1e      	ble.n	8006ae4 <_dtoa_r+0x944>
 8006aa6:	9b00      	ldr	r3, [sp, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f47f aec0 	bne.w	800682e <_dtoa_r+0x68e>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	4658      	mov	r0, fp
 8006ab4:	f000 fc54 	bl	8007360 <__multadd>
 8006ab8:	4601      	mov	r1, r0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4648      	mov	r0, r9
 8006abe:	f000 fe67 	bl	8007790 <__mcmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f77f aeb3 	ble.w	800682e <_dtoa_r+0x68e>
 8006ac8:	4656      	mov	r6, sl
 8006aca:	2331      	movs	r3, #49	@ 0x31
 8006acc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	e6ae      	b.n	8006836 <_dtoa_r+0x696>
 8006ad8:	9c07      	ldr	r4, [sp, #28]
 8006ada:	9704      	str	r7, [sp, #16]
 8006adc:	4625      	mov	r5, r4
 8006ade:	e7f3      	b.n	8006ac8 <_dtoa_r+0x928>
 8006ae0:	9b07      	ldr	r3, [sp, #28]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8104 	beq.w	8006cf4 <_dtoa_r+0xb54>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	dd05      	ble.n	8006afc <_dtoa_r+0x95c>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4632      	mov	r2, r6
 8006af4:	4658      	mov	r0, fp
 8006af6:	f000 fddf 	bl	80076b8 <__lshift>
 8006afa:	4605      	mov	r5, r0
 8006afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05a      	beq.n	8006bb8 <_dtoa_r+0xa18>
 8006b02:	6869      	ldr	r1, [r5, #4]
 8006b04:	4658      	mov	r0, fp
 8006b06:	f000 fbc9 	bl	800729c <_Balloc>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b928      	cbnz	r0, 8006b1a <_dtoa_r+0x97a>
 8006b0e:	4b84      	ldr	r3, [pc, #528]	@ (8006d20 <_dtoa_r+0xb80>)
 8006b10:	4602      	mov	r2, r0
 8006b12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b16:	f7ff bb5a 	b.w	80061ce <_dtoa_r+0x2e>
 8006b1a:	692a      	ldr	r2, [r5, #16]
 8006b1c:	3202      	adds	r2, #2
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	f105 010c 	add.w	r1, r5, #12
 8006b24:	300c      	adds	r0, #12
 8006b26:	f001 f81d 	bl	8007b64 <memcpy>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4658      	mov	r0, fp
 8006b30:	f000 fdc2 	bl	80076b8 <__lshift>
 8006b34:	f10a 0301 	add.w	r3, sl, #1
 8006b38:	9307      	str	r3, [sp, #28]
 8006b3a:	9b00      	ldr	r3, [sp, #0]
 8006b3c:	4453      	add	r3, sl
 8006b3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b40:	9b02      	ldr	r3, [sp, #8]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	462f      	mov	r7, r5
 8006b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	3b01      	subs	r3, #1
 8006b52:	4648      	mov	r0, r9
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	f7ff fa98 	bl	800608a <quorem>
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	9002      	str	r0, [sp, #8]
 8006b5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b62:	4648      	mov	r0, r9
 8006b64:	f000 fe14 	bl	8007790 <__mcmp>
 8006b68:	462a      	mov	r2, r5
 8006b6a:	9008      	str	r0, [sp, #32]
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f000 fe2a 	bl	80077c8 <__mdiff>
 8006b74:	68c2      	ldr	r2, [r0, #12]
 8006b76:	4606      	mov	r6, r0
 8006b78:	bb02      	cbnz	r2, 8006bbc <_dtoa_r+0xa1c>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4648      	mov	r0, r9
 8006b7e:	f000 fe07 	bl	8007790 <__mcmp>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4631      	mov	r1, r6
 8006b86:	4658      	mov	r0, fp
 8006b88:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b8a:	f000 fbc7 	bl	800731c <_Bfree>
 8006b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b92:	9e07      	ldr	r6, [sp, #28]
 8006b94:	ea43 0102 	orr.w	r1, r3, r2
 8006b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b9a:	4319      	orrs	r1, r3
 8006b9c:	d110      	bne.n	8006bc0 <_dtoa_r+0xa20>
 8006b9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ba2:	d029      	beq.n	8006bf8 <_dtoa_r+0xa58>
 8006ba4:	9b08      	ldr	r3, [sp, #32]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dd02      	ble.n	8006bb0 <_dtoa_r+0xa10>
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bb0:	9b00      	ldr	r3, [sp, #0]
 8006bb2:	f883 8000 	strb.w	r8, [r3]
 8006bb6:	e63f      	b.n	8006838 <_dtoa_r+0x698>
 8006bb8:	4628      	mov	r0, r5
 8006bba:	e7bb      	b.n	8006b34 <_dtoa_r+0x994>
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	e7e1      	b.n	8006b84 <_dtoa_r+0x9e4>
 8006bc0:	9b08      	ldr	r3, [sp, #32]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	db04      	blt.n	8006bd0 <_dtoa_r+0xa30>
 8006bc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	d120      	bne.n	8006c12 <_dtoa_r+0xa72>
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	dded      	ble.n	8006bb0 <_dtoa_r+0xa10>
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4658      	mov	r0, fp
 8006bda:	f000 fd6d 	bl	80076b8 <__lshift>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4681      	mov	r9, r0
 8006be2:	f000 fdd5 	bl	8007790 <__mcmp>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dc03      	bgt.n	8006bf2 <_dtoa_r+0xa52>
 8006bea:	d1e1      	bne.n	8006bb0 <_dtoa_r+0xa10>
 8006bec:	f018 0f01 	tst.w	r8, #1
 8006bf0:	d0de      	beq.n	8006bb0 <_dtoa_r+0xa10>
 8006bf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bf6:	d1d8      	bne.n	8006baa <_dtoa_r+0xa0a>
 8006bf8:	9a00      	ldr	r2, [sp, #0]
 8006bfa:	2339      	movs	r3, #57	@ 0x39
 8006bfc:	7013      	strb	r3, [r2, #0]
 8006bfe:	4633      	mov	r3, r6
 8006c00:	461e      	mov	r6, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c08:	2a39      	cmp	r2, #57	@ 0x39
 8006c0a:	d052      	beq.n	8006cb2 <_dtoa_r+0xb12>
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e612      	b.n	8006838 <_dtoa_r+0x698>
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	dd07      	ble.n	8006c26 <_dtoa_r+0xa86>
 8006c16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c1a:	d0ed      	beq.n	8006bf8 <_dtoa_r+0xa58>
 8006c1c:	9a00      	ldr	r2, [sp, #0]
 8006c1e:	f108 0301 	add.w	r3, r8, #1
 8006c22:	7013      	strb	r3, [r2, #0]
 8006c24:	e608      	b.n	8006838 <_dtoa_r+0x698>
 8006c26:	9b07      	ldr	r3, [sp, #28]
 8006c28:	9a07      	ldr	r2, [sp, #28]
 8006c2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d028      	beq.n	8006c86 <_dtoa_r+0xae6>
 8006c34:	4649      	mov	r1, r9
 8006c36:	2300      	movs	r3, #0
 8006c38:	220a      	movs	r2, #10
 8006c3a:	4658      	mov	r0, fp
 8006c3c:	f000 fb90 	bl	8007360 <__multadd>
 8006c40:	42af      	cmp	r7, r5
 8006c42:	4681      	mov	r9, r0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	f04f 020a 	mov.w	r2, #10
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	4658      	mov	r0, fp
 8006c50:	d107      	bne.n	8006c62 <_dtoa_r+0xac2>
 8006c52:	f000 fb85 	bl	8007360 <__multadd>
 8006c56:	4607      	mov	r7, r0
 8006c58:	4605      	mov	r5, r0
 8006c5a:	9b07      	ldr	r3, [sp, #28]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	9307      	str	r3, [sp, #28]
 8006c60:	e774      	b.n	8006b4c <_dtoa_r+0x9ac>
 8006c62:	f000 fb7d 	bl	8007360 <__multadd>
 8006c66:	4629      	mov	r1, r5
 8006c68:	4607      	mov	r7, r0
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	220a      	movs	r2, #10
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 fb76 	bl	8007360 <__multadd>
 8006c74:	4605      	mov	r5, r0
 8006c76:	e7f0      	b.n	8006c5a <_dtoa_r+0xaba>
 8006c78:	9b00      	ldr	r3, [sp, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfcc      	ite	gt
 8006c7e:	461e      	movgt	r6, r3
 8006c80:	2601      	movle	r6, #1
 8006c82:	4456      	add	r6, sl
 8006c84:	2700      	movs	r7, #0
 8006c86:	4649      	mov	r1, r9
 8006c88:	2201      	movs	r2, #1
 8006c8a:	4658      	mov	r0, fp
 8006c8c:	f000 fd14 	bl	80076b8 <__lshift>
 8006c90:	4621      	mov	r1, r4
 8006c92:	4681      	mov	r9, r0
 8006c94:	f000 fd7c 	bl	8007790 <__mcmp>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	dcb0      	bgt.n	8006bfe <_dtoa_r+0xa5e>
 8006c9c:	d102      	bne.n	8006ca4 <_dtoa_r+0xb04>
 8006c9e:	f018 0f01 	tst.w	r8, #1
 8006ca2:	d1ac      	bne.n	8006bfe <_dtoa_r+0xa5e>
 8006ca4:	4633      	mov	r3, r6
 8006ca6:	461e      	mov	r6, r3
 8006ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cac:	2a30      	cmp	r2, #48	@ 0x30
 8006cae:	d0fa      	beq.n	8006ca6 <_dtoa_r+0xb06>
 8006cb0:	e5c2      	b.n	8006838 <_dtoa_r+0x698>
 8006cb2:	459a      	cmp	sl, r3
 8006cb4:	d1a4      	bne.n	8006c00 <_dtoa_r+0xa60>
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	2331      	movs	r3, #49	@ 0x31
 8006cbe:	f88a 3000 	strb.w	r3, [sl]
 8006cc2:	e5b9      	b.n	8006838 <_dtoa_r+0x698>
 8006cc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d24 <_dtoa_r+0xb84>
 8006cca:	b11b      	cbz	r3, 8006cd4 <_dtoa_r+0xb34>
 8006ccc:	f10a 0308 	add.w	r3, sl, #8
 8006cd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	b019      	add	sp, #100	@ 0x64
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	f77f ae37 	ble.w	8006952 <_dtoa_r+0x7b2>
 8006ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ce8:	2001      	movs	r0, #1
 8006cea:	e655      	b.n	8006998 <_dtoa_r+0x7f8>
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f77f aed6 	ble.w	8006aa0 <_dtoa_r+0x900>
 8006cf4:	4656      	mov	r6, sl
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4648      	mov	r0, r9
 8006cfa:	f7ff f9c6 	bl	800608a <quorem>
 8006cfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d02:	f806 8b01 	strb.w	r8, [r6], #1
 8006d06:	9b00      	ldr	r3, [sp, #0]
 8006d08:	eba6 020a 	sub.w	r2, r6, sl
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	ddb3      	ble.n	8006c78 <_dtoa_r+0xad8>
 8006d10:	4649      	mov	r1, r9
 8006d12:	2300      	movs	r3, #0
 8006d14:	220a      	movs	r2, #10
 8006d16:	4658      	mov	r0, fp
 8006d18:	f000 fb22 	bl	8007360 <__multadd>
 8006d1c:	4681      	mov	r9, r0
 8006d1e:	e7ea      	b.n	8006cf6 <_dtoa_r+0xb56>
 8006d20:	08008408 	.word	0x08008408
 8006d24:	0800838c 	.word	0x0800838c

08006d28 <__ssputs_r>:
 8006d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	688e      	ldr	r6, [r1, #8]
 8006d2e:	461f      	mov	r7, r3
 8006d30:	42be      	cmp	r6, r7
 8006d32:	680b      	ldr	r3, [r1, #0]
 8006d34:	4682      	mov	sl, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	4690      	mov	r8, r2
 8006d3a:	d82d      	bhi.n	8006d98 <__ssputs_r+0x70>
 8006d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d44:	d026      	beq.n	8006d94 <__ssputs_r+0x6c>
 8006d46:	6965      	ldr	r5, [r4, #20]
 8006d48:	6909      	ldr	r1, [r1, #16]
 8006d4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d4e:	eba3 0901 	sub.w	r9, r3, r1
 8006d52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d56:	1c7b      	adds	r3, r7, #1
 8006d58:	444b      	add	r3, r9
 8006d5a:	106d      	asrs	r5, r5, #1
 8006d5c:	429d      	cmp	r5, r3
 8006d5e:	bf38      	it	cc
 8006d60:	461d      	movcc	r5, r3
 8006d62:	0553      	lsls	r3, r2, #21
 8006d64:	d527      	bpl.n	8006db6 <__ssputs_r+0x8e>
 8006d66:	4629      	mov	r1, r5
 8006d68:	f000 f960 	bl	800702c <_malloc_r>
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	b360      	cbz	r0, 8006dca <__ssputs_r+0xa2>
 8006d70:	6921      	ldr	r1, [r4, #16]
 8006d72:	464a      	mov	r2, r9
 8006d74:	f000 fef6 	bl	8007b64 <memcpy>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	6126      	str	r6, [r4, #16]
 8006d86:	6165      	str	r5, [r4, #20]
 8006d88:	444e      	add	r6, r9
 8006d8a:	eba5 0509 	sub.w	r5, r5, r9
 8006d8e:	6026      	str	r6, [r4, #0]
 8006d90:	60a5      	str	r5, [r4, #8]
 8006d92:	463e      	mov	r6, r7
 8006d94:	42be      	cmp	r6, r7
 8006d96:	d900      	bls.n	8006d9a <__ssputs_r+0x72>
 8006d98:	463e      	mov	r6, r7
 8006d9a:	6820      	ldr	r0, [r4, #0]
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	4641      	mov	r1, r8
 8006da0:	f000 fe6f 	bl	8007a82 <memmove>
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	1b9b      	subs	r3, r3, r6
 8006da8:	60a3      	str	r3, [r4, #8]
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	4433      	add	r3, r6
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	2000      	movs	r0, #0
 8006db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db6:	462a      	mov	r2, r5
 8006db8:	f000 fe35 	bl	8007a26 <_realloc_r>
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d1e0      	bne.n	8006d84 <__ssputs_r+0x5c>
 8006dc2:	6921      	ldr	r1, [r4, #16]
 8006dc4:	4650      	mov	r0, sl
 8006dc6:	f000 ff0d 	bl	8007be4 <_free_r>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	f8ca 3000 	str.w	r3, [sl]
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ddc:	e7e9      	b.n	8006db2 <__ssputs_r+0x8a>
	...

08006de0 <_svfiprintf_r>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	4698      	mov	r8, r3
 8006de6:	898b      	ldrh	r3, [r1, #12]
 8006de8:	061b      	lsls	r3, r3, #24
 8006dea:	b09d      	sub	sp, #116	@ 0x74
 8006dec:	4607      	mov	r7, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	4614      	mov	r4, r2
 8006df2:	d510      	bpl.n	8006e16 <_svfiprintf_r+0x36>
 8006df4:	690b      	ldr	r3, [r1, #16]
 8006df6:	b973      	cbnz	r3, 8006e16 <_svfiprintf_r+0x36>
 8006df8:	2140      	movs	r1, #64	@ 0x40
 8006dfa:	f000 f917 	bl	800702c <_malloc_r>
 8006dfe:	6028      	str	r0, [r5, #0]
 8006e00:	6128      	str	r0, [r5, #16]
 8006e02:	b930      	cbnz	r0, 8006e12 <_svfiprintf_r+0x32>
 8006e04:	230c      	movs	r3, #12
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e0c:	b01d      	add	sp, #116	@ 0x74
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e12:	2340      	movs	r3, #64	@ 0x40
 8006e14:	616b      	str	r3, [r5, #20]
 8006e16:	2300      	movs	r3, #0
 8006e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e1a:	2320      	movs	r3, #32
 8006e1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e24:	2330      	movs	r3, #48	@ 0x30
 8006e26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006fc4 <_svfiprintf_r+0x1e4>
 8006e2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e2e:	f04f 0901 	mov.w	r9, #1
 8006e32:	4623      	mov	r3, r4
 8006e34:	469a      	mov	sl, r3
 8006e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e3a:	b10a      	cbz	r2, 8006e40 <_svfiprintf_r+0x60>
 8006e3c:	2a25      	cmp	r2, #37	@ 0x25
 8006e3e:	d1f9      	bne.n	8006e34 <_svfiprintf_r+0x54>
 8006e40:	ebba 0b04 	subs.w	fp, sl, r4
 8006e44:	d00b      	beq.n	8006e5e <_svfiprintf_r+0x7e>
 8006e46:	465b      	mov	r3, fp
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f7ff ff6b 	bl	8006d28 <__ssputs_r>
 8006e52:	3001      	adds	r0, #1
 8006e54:	f000 80a7 	beq.w	8006fa6 <_svfiprintf_r+0x1c6>
 8006e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e5a:	445a      	add	r2, fp
 8006e5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 809f 	beq.w	8006fa6 <_svfiprintf_r+0x1c6>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e72:	f10a 0a01 	add.w	sl, sl, #1
 8006e76:	9304      	str	r3, [sp, #16]
 8006e78:	9307      	str	r3, [sp, #28]
 8006e7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e80:	4654      	mov	r4, sl
 8006e82:	2205      	movs	r2, #5
 8006e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e88:	484e      	ldr	r0, [pc, #312]	@ (8006fc4 <_svfiprintf_r+0x1e4>)
 8006e8a:	f7f9 f9a1 	bl	80001d0 <memchr>
 8006e8e:	9a04      	ldr	r2, [sp, #16]
 8006e90:	b9d8      	cbnz	r0, 8006eca <_svfiprintf_r+0xea>
 8006e92:	06d0      	lsls	r0, r2, #27
 8006e94:	bf44      	itt	mi
 8006e96:	2320      	movmi	r3, #32
 8006e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e9c:	0711      	lsls	r1, r2, #28
 8006e9e:	bf44      	itt	mi
 8006ea0:	232b      	movmi	r3, #43	@ 0x2b
 8006ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eac:	d015      	beq.n	8006eda <_svfiprintf_r+0xfa>
 8006eae:	9a07      	ldr	r2, [sp, #28]
 8006eb0:	4654      	mov	r4, sl
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f04f 0c0a 	mov.w	ip, #10
 8006eb8:	4621      	mov	r1, r4
 8006eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ebe:	3b30      	subs	r3, #48	@ 0x30
 8006ec0:	2b09      	cmp	r3, #9
 8006ec2:	d94b      	bls.n	8006f5c <_svfiprintf_r+0x17c>
 8006ec4:	b1b0      	cbz	r0, 8006ef4 <_svfiprintf_r+0x114>
 8006ec6:	9207      	str	r2, [sp, #28]
 8006ec8:	e014      	b.n	8006ef4 <_svfiprintf_r+0x114>
 8006eca:	eba0 0308 	sub.w	r3, r0, r8
 8006ece:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	46a2      	mov	sl, r4
 8006ed8:	e7d2      	b.n	8006e80 <_svfiprintf_r+0xa0>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	1d19      	adds	r1, r3, #4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	9103      	str	r1, [sp, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bfbb      	ittet	lt
 8006ee6:	425b      	neglt	r3, r3
 8006ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8006eec:	9307      	strge	r3, [sp, #28]
 8006eee:	9307      	strlt	r3, [sp, #28]
 8006ef0:	bfb8      	it	lt
 8006ef2:	9204      	strlt	r2, [sp, #16]
 8006ef4:	7823      	ldrb	r3, [r4, #0]
 8006ef6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ef8:	d10a      	bne.n	8006f10 <_svfiprintf_r+0x130>
 8006efa:	7863      	ldrb	r3, [r4, #1]
 8006efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006efe:	d132      	bne.n	8006f66 <_svfiprintf_r+0x186>
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	1d1a      	adds	r2, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	9203      	str	r2, [sp, #12]
 8006f08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f0c:	3402      	adds	r4, #2
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006fd4 <_svfiprintf_r+0x1f4>
 8006f14:	7821      	ldrb	r1, [r4, #0]
 8006f16:	2203      	movs	r2, #3
 8006f18:	4650      	mov	r0, sl
 8006f1a:	f7f9 f959 	bl	80001d0 <memchr>
 8006f1e:	b138      	cbz	r0, 8006f30 <_svfiprintf_r+0x150>
 8006f20:	9b04      	ldr	r3, [sp, #16]
 8006f22:	eba0 000a 	sub.w	r0, r0, sl
 8006f26:	2240      	movs	r2, #64	@ 0x40
 8006f28:	4082      	lsls	r2, r0
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	3401      	adds	r4, #1
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f34:	4824      	ldr	r0, [pc, #144]	@ (8006fc8 <_svfiprintf_r+0x1e8>)
 8006f36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f3a:	2206      	movs	r2, #6
 8006f3c:	f7f9 f948 	bl	80001d0 <memchr>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d036      	beq.n	8006fb2 <_svfiprintf_r+0x1d2>
 8006f44:	4b21      	ldr	r3, [pc, #132]	@ (8006fcc <_svfiprintf_r+0x1ec>)
 8006f46:	bb1b      	cbnz	r3, 8006f90 <_svfiprintf_r+0x1b0>
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	3307      	adds	r3, #7
 8006f4c:	f023 0307 	bic.w	r3, r3, #7
 8006f50:	3308      	adds	r3, #8
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f56:	4433      	add	r3, r6
 8006f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5a:	e76a      	b.n	8006e32 <_svfiprintf_r+0x52>
 8006f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f60:	460c      	mov	r4, r1
 8006f62:	2001      	movs	r0, #1
 8006f64:	e7a8      	b.n	8006eb8 <_svfiprintf_r+0xd8>
 8006f66:	2300      	movs	r3, #0
 8006f68:	3401      	adds	r4, #1
 8006f6a:	9305      	str	r3, [sp, #20]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f04f 0c0a 	mov.w	ip, #10
 8006f72:	4620      	mov	r0, r4
 8006f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f78:	3a30      	subs	r2, #48	@ 0x30
 8006f7a:	2a09      	cmp	r2, #9
 8006f7c:	d903      	bls.n	8006f86 <_svfiprintf_r+0x1a6>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0c6      	beq.n	8006f10 <_svfiprintf_r+0x130>
 8006f82:	9105      	str	r1, [sp, #20]
 8006f84:	e7c4      	b.n	8006f10 <_svfiprintf_r+0x130>
 8006f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e7f0      	b.n	8006f72 <_svfiprintf_r+0x192>
 8006f90:	ab03      	add	r3, sp, #12
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	462a      	mov	r2, r5
 8006f96:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd0 <_svfiprintf_r+0x1f0>)
 8006f98:	a904      	add	r1, sp, #16
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	f7fe fba2 	bl	80056e4 <_printf_float>
 8006fa0:	1c42      	adds	r2, r0, #1
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	d1d6      	bne.n	8006f54 <_svfiprintf_r+0x174>
 8006fa6:	89ab      	ldrh	r3, [r5, #12]
 8006fa8:	065b      	lsls	r3, r3, #25
 8006faa:	f53f af2d 	bmi.w	8006e08 <_svfiprintf_r+0x28>
 8006fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fb0:	e72c      	b.n	8006e0c <_svfiprintf_r+0x2c>
 8006fb2:	ab03      	add	r3, sp, #12
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <_svfiprintf_r+0x1f0>)
 8006fba:	a904      	add	r1, sp, #16
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	f7fe fe29 	bl	8005c14 <_printf_i>
 8006fc2:	e7ed      	b.n	8006fa0 <_svfiprintf_r+0x1c0>
 8006fc4:	08008419 	.word	0x08008419
 8006fc8:	08008423 	.word	0x08008423
 8006fcc:	080056e5 	.word	0x080056e5
 8006fd0:	08006d29 	.word	0x08006d29
 8006fd4:	0800841f 	.word	0x0800841f

08006fd8 <malloc>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	@ (8006fe4 <malloc+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f000 b825 	b.w	800702c <_malloc_r>
 8006fe2:	bf00      	nop
 8006fe4:	20000018 	.word	0x20000018

08006fe8 <sbrk_aligned>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4e0f      	ldr	r6, [pc, #60]	@ (8007028 <sbrk_aligned+0x40>)
 8006fec:	460c      	mov	r4, r1
 8006fee:	6831      	ldr	r1, [r6, #0]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	b911      	cbnz	r1, 8006ffa <sbrk_aligned+0x12>
 8006ff4:	f000 fd94 	bl	8007b20 <_sbrk_r>
 8006ff8:	6030      	str	r0, [r6, #0]
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 fd8f 	bl	8007b20 <_sbrk_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d103      	bne.n	800700e <sbrk_aligned+0x26>
 8007006:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800700a:	4620      	mov	r0, r4
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	1cc4      	adds	r4, r0, #3
 8007010:	f024 0403 	bic.w	r4, r4, #3
 8007014:	42a0      	cmp	r0, r4
 8007016:	d0f8      	beq.n	800700a <sbrk_aligned+0x22>
 8007018:	1a21      	subs	r1, r4, r0
 800701a:	4628      	mov	r0, r5
 800701c:	f000 fd80 	bl	8007b20 <_sbrk_r>
 8007020:	3001      	adds	r0, #1
 8007022:	d1f2      	bne.n	800700a <sbrk_aligned+0x22>
 8007024:	e7ef      	b.n	8007006 <sbrk_aligned+0x1e>
 8007026:	bf00      	nop
 8007028:	2000041c 	.word	0x2000041c

0800702c <_malloc_r>:
 800702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007030:	1ccd      	adds	r5, r1, #3
 8007032:	f025 0503 	bic.w	r5, r5, #3
 8007036:	3508      	adds	r5, #8
 8007038:	2d0c      	cmp	r5, #12
 800703a:	bf38      	it	cc
 800703c:	250c      	movcc	r5, #12
 800703e:	2d00      	cmp	r5, #0
 8007040:	4606      	mov	r6, r0
 8007042:	db01      	blt.n	8007048 <_malloc_r+0x1c>
 8007044:	42a9      	cmp	r1, r5
 8007046:	d904      	bls.n	8007052 <_malloc_r+0x26>
 8007048:	230c      	movs	r3, #12
 800704a:	6033      	str	r3, [r6, #0]
 800704c:	2000      	movs	r0, #0
 800704e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007128 <_malloc_r+0xfc>
 8007056:	f000 f915 	bl	8007284 <__malloc_lock>
 800705a:	f8d8 3000 	ldr.w	r3, [r8]
 800705e:	461c      	mov	r4, r3
 8007060:	bb44      	cbnz	r4, 80070b4 <_malloc_r+0x88>
 8007062:	4629      	mov	r1, r5
 8007064:	4630      	mov	r0, r6
 8007066:	f7ff ffbf 	bl	8006fe8 <sbrk_aligned>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	4604      	mov	r4, r0
 800706e:	d158      	bne.n	8007122 <_malloc_r+0xf6>
 8007070:	f8d8 4000 	ldr.w	r4, [r8]
 8007074:	4627      	mov	r7, r4
 8007076:	2f00      	cmp	r7, #0
 8007078:	d143      	bne.n	8007102 <_malloc_r+0xd6>
 800707a:	2c00      	cmp	r4, #0
 800707c:	d04b      	beq.n	8007116 <_malloc_r+0xea>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	4639      	mov	r1, r7
 8007082:	4630      	mov	r0, r6
 8007084:	eb04 0903 	add.w	r9, r4, r3
 8007088:	f000 fd4a 	bl	8007b20 <_sbrk_r>
 800708c:	4581      	cmp	r9, r0
 800708e:	d142      	bne.n	8007116 <_malloc_r+0xea>
 8007090:	6821      	ldr	r1, [r4, #0]
 8007092:	1a6d      	subs	r5, r5, r1
 8007094:	4629      	mov	r1, r5
 8007096:	4630      	mov	r0, r6
 8007098:	f7ff ffa6 	bl	8006fe8 <sbrk_aligned>
 800709c:	3001      	adds	r0, #1
 800709e:	d03a      	beq.n	8007116 <_malloc_r+0xea>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	442b      	add	r3, r5
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	f8d8 3000 	ldr.w	r3, [r8]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	bb62      	cbnz	r2, 8007108 <_malloc_r+0xdc>
 80070ae:	f8c8 7000 	str.w	r7, [r8]
 80070b2:	e00f      	b.n	80070d4 <_malloc_r+0xa8>
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	1b52      	subs	r2, r2, r5
 80070b8:	d420      	bmi.n	80070fc <_malloc_r+0xd0>
 80070ba:	2a0b      	cmp	r2, #11
 80070bc:	d917      	bls.n	80070ee <_malloc_r+0xc2>
 80070be:	1961      	adds	r1, r4, r5
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	6025      	str	r5, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	6059      	strne	r1, [r3, #4]
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	bf08      	it	eq
 80070cc:	f8c8 1000 	streq.w	r1, [r8]
 80070d0:	5162      	str	r2, [r4, r5]
 80070d2:	604b      	str	r3, [r1, #4]
 80070d4:	4630      	mov	r0, r6
 80070d6:	f000 f8db 	bl	8007290 <__malloc_unlock>
 80070da:	f104 000b 	add.w	r0, r4, #11
 80070de:	1d23      	adds	r3, r4, #4
 80070e0:	f020 0007 	bic.w	r0, r0, #7
 80070e4:	1ac2      	subs	r2, r0, r3
 80070e6:	bf1c      	itt	ne
 80070e8:	1a1b      	subne	r3, r3, r0
 80070ea:	50a3      	strne	r3, [r4, r2]
 80070ec:	e7af      	b.n	800704e <_malloc_r+0x22>
 80070ee:	6862      	ldr	r2, [r4, #4]
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	bf0c      	ite	eq
 80070f4:	f8c8 2000 	streq.w	r2, [r8]
 80070f8:	605a      	strne	r2, [r3, #4]
 80070fa:	e7eb      	b.n	80070d4 <_malloc_r+0xa8>
 80070fc:	4623      	mov	r3, r4
 80070fe:	6864      	ldr	r4, [r4, #4]
 8007100:	e7ae      	b.n	8007060 <_malloc_r+0x34>
 8007102:	463c      	mov	r4, r7
 8007104:	687f      	ldr	r7, [r7, #4]
 8007106:	e7b6      	b.n	8007076 <_malloc_r+0x4a>
 8007108:	461a      	mov	r2, r3
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	42a3      	cmp	r3, r4
 800710e:	d1fb      	bne.n	8007108 <_malloc_r+0xdc>
 8007110:	2300      	movs	r3, #0
 8007112:	6053      	str	r3, [r2, #4]
 8007114:	e7de      	b.n	80070d4 <_malloc_r+0xa8>
 8007116:	230c      	movs	r3, #12
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	4630      	mov	r0, r6
 800711c:	f000 f8b8 	bl	8007290 <__malloc_unlock>
 8007120:	e794      	b.n	800704c <_malloc_r+0x20>
 8007122:	6005      	str	r5, [r0, #0]
 8007124:	e7d6      	b.n	80070d4 <_malloc_r+0xa8>
 8007126:	bf00      	nop
 8007128:	20000420 	.word	0x20000420

0800712c <__sflush_r>:
 800712c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007134:	0716      	lsls	r6, r2, #28
 8007136:	4605      	mov	r5, r0
 8007138:	460c      	mov	r4, r1
 800713a:	d454      	bmi.n	80071e6 <__sflush_r+0xba>
 800713c:	684b      	ldr	r3, [r1, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	dc02      	bgt.n	8007148 <__sflush_r+0x1c>
 8007142:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd48      	ble.n	80071da <__sflush_r+0xae>
 8007148:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800714a:	2e00      	cmp	r6, #0
 800714c:	d045      	beq.n	80071da <__sflush_r+0xae>
 800714e:	2300      	movs	r3, #0
 8007150:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007154:	682f      	ldr	r7, [r5, #0]
 8007156:	6a21      	ldr	r1, [r4, #32]
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	d030      	beq.n	80071be <__sflush_r+0x92>
 800715c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	0759      	lsls	r1, r3, #29
 8007162:	d505      	bpl.n	8007170 <__sflush_r+0x44>
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800716a:	b10b      	cbz	r3, 8007170 <__sflush_r+0x44>
 800716c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	2300      	movs	r3, #0
 8007172:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007174:	6a21      	ldr	r1, [r4, #32]
 8007176:	4628      	mov	r0, r5
 8007178:	47b0      	blx	r6
 800717a:	1c43      	adds	r3, r0, #1
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	d106      	bne.n	800718e <__sflush_r+0x62>
 8007180:	6829      	ldr	r1, [r5, #0]
 8007182:	291d      	cmp	r1, #29
 8007184:	d82b      	bhi.n	80071de <__sflush_r+0xb2>
 8007186:	4a2a      	ldr	r2, [pc, #168]	@ (8007230 <__sflush_r+0x104>)
 8007188:	410a      	asrs	r2, r1
 800718a:	07d6      	lsls	r6, r2, #31
 800718c:	d427      	bmi.n	80071de <__sflush_r+0xb2>
 800718e:	2200      	movs	r2, #0
 8007190:	6062      	str	r2, [r4, #4]
 8007192:	04d9      	lsls	r1, r3, #19
 8007194:	6922      	ldr	r2, [r4, #16]
 8007196:	6022      	str	r2, [r4, #0]
 8007198:	d504      	bpl.n	80071a4 <__sflush_r+0x78>
 800719a:	1c42      	adds	r2, r0, #1
 800719c:	d101      	bne.n	80071a2 <__sflush_r+0x76>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	b903      	cbnz	r3, 80071a4 <__sflush_r+0x78>
 80071a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80071a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071a6:	602f      	str	r7, [r5, #0]
 80071a8:	b1b9      	cbz	r1, 80071da <__sflush_r+0xae>
 80071aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071ae:	4299      	cmp	r1, r3
 80071b0:	d002      	beq.n	80071b8 <__sflush_r+0x8c>
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 fd16 	bl	8007be4 <_free_r>
 80071b8:	2300      	movs	r3, #0
 80071ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80071bc:	e00d      	b.n	80071da <__sflush_r+0xae>
 80071be:	2301      	movs	r3, #1
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b0      	blx	r6
 80071c4:	4602      	mov	r2, r0
 80071c6:	1c50      	adds	r0, r2, #1
 80071c8:	d1c9      	bne.n	800715e <__sflush_r+0x32>
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0c6      	beq.n	800715e <__sflush_r+0x32>
 80071d0:	2b1d      	cmp	r3, #29
 80071d2:	d001      	beq.n	80071d8 <__sflush_r+0xac>
 80071d4:	2b16      	cmp	r3, #22
 80071d6:	d11e      	bne.n	8007216 <__sflush_r+0xea>
 80071d8:	602f      	str	r7, [r5, #0]
 80071da:	2000      	movs	r0, #0
 80071dc:	e022      	b.n	8007224 <__sflush_r+0xf8>
 80071de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071e2:	b21b      	sxth	r3, r3
 80071e4:	e01b      	b.n	800721e <__sflush_r+0xf2>
 80071e6:	690f      	ldr	r7, [r1, #16]
 80071e8:	2f00      	cmp	r7, #0
 80071ea:	d0f6      	beq.n	80071da <__sflush_r+0xae>
 80071ec:	0793      	lsls	r3, r2, #30
 80071ee:	680e      	ldr	r6, [r1, #0]
 80071f0:	bf08      	it	eq
 80071f2:	694b      	ldreq	r3, [r1, #20]
 80071f4:	600f      	str	r7, [r1, #0]
 80071f6:	bf18      	it	ne
 80071f8:	2300      	movne	r3, #0
 80071fa:	eba6 0807 	sub.w	r8, r6, r7
 80071fe:	608b      	str	r3, [r1, #8]
 8007200:	f1b8 0f00 	cmp.w	r8, #0
 8007204:	dde9      	ble.n	80071da <__sflush_r+0xae>
 8007206:	6a21      	ldr	r1, [r4, #32]
 8007208:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800720a:	4643      	mov	r3, r8
 800720c:	463a      	mov	r2, r7
 800720e:	4628      	mov	r0, r5
 8007210:	47b0      	blx	r6
 8007212:	2800      	cmp	r0, #0
 8007214:	dc08      	bgt.n	8007228 <__sflush_r+0xfc>
 8007216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	4407      	add	r7, r0
 800722a:	eba8 0800 	sub.w	r8, r8, r0
 800722e:	e7e7      	b.n	8007200 <__sflush_r+0xd4>
 8007230:	dfbffffe 	.word	0xdfbffffe

08007234 <_fflush_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	690b      	ldr	r3, [r1, #16]
 8007238:	4605      	mov	r5, r0
 800723a:	460c      	mov	r4, r1
 800723c:	b913      	cbnz	r3, 8007244 <_fflush_r+0x10>
 800723e:	2500      	movs	r5, #0
 8007240:	4628      	mov	r0, r5
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	b118      	cbz	r0, 800724e <_fflush_r+0x1a>
 8007246:	6a03      	ldr	r3, [r0, #32]
 8007248:	b90b      	cbnz	r3, 800724e <_fflush_r+0x1a>
 800724a:	f7fe feaf 	bl	8005fac <__sinit>
 800724e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f3      	beq.n	800723e <_fflush_r+0xa>
 8007256:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007258:	07d0      	lsls	r0, r2, #31
 800725a:	d404      	bmi.n	8007266 <_fflush_r+0x32>
 800725c:	0599      	lsls	r1, r3, #22
 800725e:	d402      	bmi.n	8007266 <_fflush_r+0x32>
 8007260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007262:	f7fe ff10 	bl	8006086 <__retarget_lock_acquire_recursive>
 8007266:	4628      	mov	r0, r5
 8007268:	4621      	mov	r1, r4
 800726a:	f7ff ff5f 	bl	800712c <__sflush_r>
 800726e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007270:	07da      	lsls	r2, r3, #31
 8007272:	4605      	mov	r5, r0
 8007274:	d4e4      	bmi.n	8007240 <_fflush_r+0xc>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	059b      	lsls	r3, r3, #22
 800727a:	d4e1      	bmi.n	8007240 <_fflush_r+0xc>
 800727c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800727e:	f7fe ff03 	bl	8006088 <__retarget_lock_release_recursive>
 8007282:	e7dd      	b.n	8007240 <_fflush_r+0xc>

08007284 <__malloc_lock>:
 8007284:	4801      	ldr	r0, [pc, #4]	@ (800728c <__malloc_lock+0x8>)
 8007286:	f7fe befe 	b.w	8006086 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	20000418 	.word	0x20000418

08007290 <__malloc_unlock>:
 8007290:	4801      	ldr	r0, [pc, #4]	@ (8007298 <__malloc_unlock+0x8>)
 8007292:	f7fe bef9 	b.w	8006088 <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	20000418 	.word	0x20000418

0800729c <_Balloc>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	69c6      	ldr	r6, [r0, #28]
 80072a0:	4604      	mov	r4, r0
 80072a2:	460d      	mov	r5, r1
 80072a4:	b976      	cbnz	r6, 80072c4 <_Balloc+0x28>
 80072a6:	2010      	movs	r0, #16
 80072a8:	f7ff fe96 	bl	8006fd8 <malloc>
 80072ac:	4602      	mov	r2, r0
 80072ae:	61e0      	str	r0, [r4, #28]
 80072b0:	b920      	cbnz	r0, 80072bc <_Balloc+0x20>
 80072b2:	4b18      	ldr	r3, [pc, #96]	@ (8007314 <_Balloc+0x78>)
 80072b4:	4818      	ldr	r0, [pc, #96]	@ (8007318 <_Balloc+0x7c>)
 80072b6:	216b      	movs	r1, #107	@ 0x6b
 80072b8:	f000 fc62 	bl	8007b80 <__assert_func>
 80072bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c0:	6006      	str	r6, [r0, #0]
 80072c2:	60c6      	str	r6, [r0, #12]
 80072c4:	69e6      	ldr	r6, [r4, #28]
 80072c6:	68f3      	ldr	r3, [r6, #12]
 80072c8:	b183      	cbz	r3, 80072ec <_Balloc+0x50>
 80072ca:	69e3      	ldr	r3, [r4, #28]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072d2:	b9b8      	cbnz	r0, 8007304 <_Balloc+0x68>
 80072d4:	2101      	movs	r1, #1
 80072d6:	fa01 f605 	lsl.w	r6, r1, r5
 80072da:	1d72      	adds	r2, r6, #5
 80072dc:	0092      	lsls	r2, r2, #2
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fc6c 	bl	8007bbc <_calloc_r>
 80072e4:	b160      	cbz	r0, 8007300 <_Balloc+0x64>
 80072e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ea:	e00e      	b.n	800730a <_Balloc+0x6e>
 80072ec:	2221      	movs	r2, #33	@ 0x21
 80072ee:	2104      	movs	r1, #4
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fc63 	bl	8007bbc <_calloc_r>
 80072f6:	69e3      	ldr	r3, [r4, #28]
 80072f8:	60f0      	str	r0, [r6, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e4      	bne.n	80072ca <_Balloc+0x2e>
 8007300:	2000      	movs	r0, #0
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	6802      	ldr	r2, [r0, #0]
 8007306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800730a:	2300      	movs	r3, #0
 800730c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007310:	e7f7      	b.n	8007302 <_Balloc+0x66>
 8007312:	bf00      	nop
 8007314:	08008399 	.word	0x08008399
 8007318:	0800842a 	.word	0x0800842a

0800731c <_Bfree>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	69c6      	ldr	r6, [r0, #28]
 8007320:	4605      	mov	r5, r0
 8007322:	460c      	mov	r4, r1
 8007324:	b976      	cbnz	r6, 8007344 <_Bfree+0x28>
 8007326:	2010      	movs	r0, #16
 8007328:	f7ff fe56 	bl	8006fd8 <malloc>
 800732c:	4602      	mov	r2, r0
 800732e:	61e8      	str	r0, [r5, #28]
 8007330:	b920      	cbnz	r0, 800733c <_Bfree+0x20>
 8007332:	4b09      	ldr	r3, [pc, #36]	@ (8007358 <_Bfree+0x3c>)
 8007334:	4809      	ldr	r0, [pc, #36]	@ (800735c <_Bfree+0x40>)
 8007336:	218f      	movs	r1, #143	@ 0x8f
 8007338:	f000 fc22 	bl	8007b80 <__assert_func>
 800733c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007340:	6006      	str	r6, [r0, #0]
 8007342:	60c6      	str	r6, [r0, #12]
 8007344:	b13c      	cbz	r4, 8007356 <_Bfree+0x3a>
 8007346:	69eb      	ldr	r3, [r5, #28]
 8007348:	6862      	ldr	r2, [r4, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007350:	6021      	str	r1, [r4, #0]
 8007352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	08008399 	.word	0x08008399
 800735c:	0800842a 	.word	0x0800842a

08007360 <__multadd>:
 8007360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007364:	690d      	ldr	r5, [r1, #16]
 8007366:	4607      	mov	r7, r0
 8007368:	460c      	mov	r4, r1
 800736a:	461e      	mov	r6, r3
 800736c:	f101 0c14 	add.w	ip, r1, #20
 8007370:	2000      	movs	r0, #0
 8007372:	f8dc 3000 	ldr.w	r3, [ip]
 8007376:	b299      	uxth	r1, r3
 8007378:	fb02 6101 	mla	r1, r2, r1, r6
 800737c:	0c1e      	lsrs	r6, r3, #16
 800737e:	0c0b      	lsrs	r3, r1, #16
 8007380:	fb02 3306 	mla	r3, r2, r6, r3
 8007384:	b289      	uxth	r1, r1
 8007386:	3001      	adds	r0, #1
 8007388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800738c:	4285      	cmp	r5, r0
 800738e:	f84c 1b04 	str.w	r1, [ip], #4
 8007392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007396:	dcec      	bgt.n	8007372 <__multadd+0x12>
 8007398:	b30e      	cbz	r6, 80073de <__multadd+0x7e>
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	42ab      	cmp	r3, r5
 800739e:	dc19      	bgt.n	80073d4 <__multadd+0x74>
 80073a0:	6861      	ldr	r1, [r4, #4]
 80073a2:	4638      	mov	r0, r7
 80073a4:	3101      	adds	r1, #1
 80073a6:	f7ff ff79 	bl	800729c <_Balloc>
 80073aa:	4680      	mov	r8, r0
 80073ac:	b928      	cbnz	r0, 80073ba <__multadd+0x5a>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <__multadd+0x84>)
 80073b2:	480d      	ldr	r0, [pc, #52]	@ (80073e8 <__multadd+0x88>)
 80073b4:	21ba      	movs	r1, #186	@ 0xba
 80073b6:	f000 fbe3 	bl	8007b80 <__assert_func>
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	3202      	adds	r2, #2
 80073be:	f104 010c 	add.w	r1, r4, #12
 80073c2:	0092      	lsls	r2, r2, #2
 80073c4:	300c      	adds	r0, #12
 80073c6:	f000 fbcd 	bl	8007b64 <memcpy>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff ffa5 	bl	800731c <_Bfree>
 80073d2:	4644      	mov	r4, r8
 80073d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073d8:	3501      	adds	r5, #1
 80073da:	615e      	str	r6, [r3, #20]
 80073dc:	6125      	str	r5, [r4, #16]
 80073de:	4620      	mov	r0, r4
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e4:	08008408 	.word	0x08008408
 80073e8:	0800842a 	.word	0x0800842a

080073ec <__hi0bits>:
 80073ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073f0:	4603      	mov	r3, r0
 80073f2:	bf36      	itet	cc
 80073f4:	0403      	lslcc	r3, r0, #16
 80073f6:	2000      	movcs	r0, #0
 80073f8:	2010      	movcc	r0, #16
 80073fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073fe:	bf3c      	itt	cc
 8007400:	021b      	lslcc	r3, r3, #8
 8007402:	3008      	addcc	r0, #8
 8007404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007408:	bf3c      	itt	cc
 800740a:	011b      	lslcc	r3, r3, #4
 800740c:	3004      	addcc	r0, #4
 800740e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007412:	bf3c      	itt	cc
 8007414:	009b      	lslcc	r3, r3, #2
 8007416:	3002      	addcc	r0, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	db05      	blt.n	8007428 <__hi0bits+0x3c>
 800741c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007420:	f100 0001 	add.w	r0, r0, #1
 8007424:	bf08      	it	eq
 8007426:	2020      	moveq	r0, #32
 8007428:	4770      	bx	lr

0800742a <__lo0bits>:
 800742a:	6803      	ldr	r3, [r0, #0]
 800742c:	4602      	mov	r2, r0
 800742e:	f013 0007 	ands.w	r0, r3, #7
 8007432:	d00b      	beq.n	800744c <__lo0bits+0x22>
 8007434:	07d9      	lsls	r1, r3, #31
 8007436:	d421      	bmi.n	800747c <__lo0bits+0x52>
 8007438:	0798      	lsls	r0, r3, #30
 800743a:	bf49      	itett	mi
 800743c:	085b      	lsrmi	r3, r3, #1
 800743e:	089b      	lsrpl	r3, r3, #2
 8007440:	2001      	movmi	r0, #1
 8007442:	6013      	strmi	r3, [r2, #0]
 8007444:	bf5c      	itt	pl
 8007446:	6013      	strpl	r3, [r2, #0]
 8007448:	2002      	movpl	r0, #2
 800744a:	4770      	bx	lr
 800744c:	b299      	uxth	r1, r3
 800744e:	b909      	cbnz	r1, 8007454 <__lo0bits+0x2a>
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	2010      	movs	r0, #16
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	b909      	cbnz	r1, 800745c <__lo0bits+0x32>
 8007458:	3008      	adds	r0, #8
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	0719      	lsls	r1, r3, #28
 800745e:	bf04      	itt	eq
 8007460:	091b      	lsreq	r3, r3, #4
 8007462:	3004      	addeq	r0, #4
 8007464:	0799      	lsls	r1, r3, #30
 8007466:	bf04      	itt	eq
 8007468:	089b      	lsreq	r3, r3, #2
 800746a:	3002      	addeq	r0, #2
 800746c:	07d9      	lsls	r1, r3, #31
 800746e:	d403      	bmi.n	8007478 <__lo0bits+0x4e>
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	f100 0001 	add.w	r0, r0, #1
 8007476:	d003      	beq.n	8007480 <__lo0bits+0x56>
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	4770      	bx	lr
 800747c:	2000      	movs	r0, #0
 800747e:	4770      	bx	lr
 8007480:	2020      	movs	r0, #32
 8007482:	4770      	bx	lr

08007484 <__i2b>:
 8007484:	b510      	push	{r4, lr}
 8007486:	460c      	mov	r4, r1
 8007488:	2101      	movs	r1, #1
 800748a:	f7ff ff07 	bl	800729c <_Balloc>
 800748e:	4602      	mov	r2, r0
 8007490:	b928      	cbnz	r0, 800749e <__i2b+0x1a>
 8007492:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <__i2b+0x24>)
 8007494:	4805      	ldr	r0, [pc, #20]	@ (80074ac <__i2b+0x28>)
 8007496:	f240 1145 	movw	r1, #325	@ 0x145
 800749a:	f000 fb71 	bl	8007b80 <__assert_func>
 800749e:	2301      	movs	r3, #1
 80074a0:	6144      	str	r4, [r0, #20]
 80074a2:	6103      	str	r3, [r0, #16]
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	bf00      	nop
 80074a8:	08008408 	.word	0x08008408
 80074ac:	0800842a 	.word	0x0800842a

080074b0 <__multiply>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	4614      	mov	r4, r2
 80074b6:	690a      	ldr	r2, [r1, #16]
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bfa8      	it	ge
 80074be:	4623      	movge	r3, r4
 80074c0:	460f      	mov	r7, r1
 80074c2:	bfa4      	itt	ge
 80074c4:	460c      	movge	r4, r1
 80074c6:	461f      	movge	r7, r3
 80074c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074d0:	68a3      	ldr	r3, [r4, #8]
 80074d2:	6861      	ldr	r1, [r4, #4]
 80074d4:	eb0a 0609 	add.w	r6, sl, r9
 80074d8:	42b3      	cmp	r3, r6
 80074da:	b085      	sub	sp, #20
 80074dc:	bfb8      	it	lt
 80074de:	3101      	addlt	r1, #1
 80074e0:	f7ff fedc 	bl	800729c <_Balloc>
 80074e4:	b930      	cbnz	r0, 80074f4 <__multiply+0x44>
 80074e6:	4602      	mov	r2, r0
 80074e8:	4b44      	ldr	r3, [pc, #272]	@ (80075fc <__multiply+0x14c>)
 80074ea:	4845      	ldr	r0, [pc, #276]	@ (8007600 <__multiply+0x150>)
 80074ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074f0:	f000 fb46 	bl	8007b80 <__assert_func>
 80074f4:	f100 0514 	add.w	r5, r0, #20
 80074f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074fc:	462b      	mov	r3, r5
 80074fe:	2200      	movs	r2, #0
 8007500:	4543      	cmp	r3, r8
 8007502:	d321      	bcc.n	8007548 <__multiply+0x98>
 8007504:	f107 0114 	add.w	r1, r7, #20
 8007508:	f104 0214 	add.w	r2, r4, #20
 800750c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007510:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007514:	9302      	str	r3, [sp, #8]
 8007516:	1b13      	subs	r3, r2, r4
 8007518:	3b15      	subs	r3, #21
 800751a:	f023 0303 	bic.w	r3, r3, #3
 800751e:	3304      	adds	r3, #4
 8007520:	f104 0715 	add.w	r7, r4, #21
 8007524:	42ba      	cmp	r2, r7
 8007526:	bf38      	it	cc
 8007528:	2304      	movcc	r3, #4
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	9103      	str	r1, [sp, #12]
 8007530:	428b      	cmp	r3, r1
 8007532:	d80c      	bhi.n	800754e <__multiply+0x9e>
 8007534:	2e00      	cmp	r6, #0
 8007536:	dd03      	ble.n	8007540 <__multiply+0x90>
 8007538:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800753c:	2b00      	cmp	r3, #0
 800753e:	d05b      	beq.n	80075f8 <__multiply+0x148>
 8007540:	6106      	str	r6, [r0, #16]
 8007542:	b005      	add	sp, #20
 8007544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007548:	f843 2b04 	str.w	r2, [r3], #4
 800754c:	e7d8      	b.n	8007500 <__multiply+0x50>
 800754e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007552:	f1ba 0f00 	cmp.w	sl, #0
 8007556:	d024      	beq.n	80075a2 <__multiply+0xf2>
 8007558:	f104 0e14 	add.w	lr, r4, #20
 800755c:	46a9      	mov	r9, r5
 800755e:	f04f 0c00 	mov.w	ip, #0
 8007562:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007566:	f8d9 3000 	ldr.w	r3, [r9]
 800756a:	fa1f fb87 	uxth.w	fp, r7
 800756e:	b29b      	uxth	r3, r3
 8007570:	fb0a 330b 	mla	r3, sl, fp, r3
 8007574:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007578:	f8d9 7000 	ldr.w	r7, [r9]
 800757c:	4463      	add	r3, ip
 800757e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007582:	fb0a c70b 	mla	r7, sl, fp, ip
 8007586:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800758a:	b29b      	uxth	r3, r3
 800758c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007590:	4572      	cmp	r2, lr
 8007592:	f849 3b04 	str.w	r3, [r9], #4
 8007596:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800759a:	d8e2      	bhi.n	8007562 <__multiply+0xb2>
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	f845 c003 	str.w	ip, [r5, r3]
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075a8:	3104      	adds	r1, #4
 80075aa:	f1b9 0f00 	cmp.w	r9, #0
 80075ae:	d021      	beq.n	80075f4 <__multiply+0x144>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	f104 0c14 	add.w	ip, r4, #20
 80075b6:	46ae      	mov	lr, r5
 80075b8:	f04f 0a00 	mov.w	sl, #0
 80075bc:	f8bc b000 	ldrh.w	fp, [ip]
 80075c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075c4:	fb09 770b 	mla	r7, r9, fp, r7
 80075c8:	4457      	add	r7, sl
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075d0:	f84e 3b04 	str.w	r3, [lr], #4
 80075d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075dc:	f8be 3000 	ldrh.w	r3, [lr]
 80075e0:	fb09 330a 	mla	r3, r9, sl, r3
 80075e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075e8:	4562      	cmp	r2, ip
 80075ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ee:	d8e5      	bhi.n	80075bc <__multiply+0x10c>
 80075f0:	9f01      	ldr	r7, [sp, #4]
 80075f2:	51eb      	str	r3, [r5, r7]
 80075f4:	3504      	adds	r5, #4
 80075f6:	e799      	b.n	800752c <__multiply+0x7c>
 80075f8:	3e01      	subs	r6, #1
 80075fa:	e79b      	b.n	8007534 <__multiply+0x84>
 80075fc:	08008408 	.word	0x08008408
 8007600:	0800842a 	.word	0x0800842a

08007604 <__pow5mult>:
 8007604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007608:	4615      	mov	r5, r2
 800760a:	f012 0203 	ands.w	r2, r2, #3
 800760e:	4607      	mov	r7, r0
 8007610:	460e      	mov	r6, r1
 8007612:	d007      	beq.n	8007624 <__pow5mult+0x20>
 8007614:	4c25      	ldr	r4, [pc, #148]	@ (80076ac <__pow5mult+0xa8>)
 8007616:	3a01      	subs	r2, #1
 8007618:	2300      	movs	r3, #0
 800761a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800761e:	f7ff fe9f 	bl	8007360 <__multadd>
 8007622:	4606      	mov	r6, r0
 8007624:	10ad      	asrs	r5, r5, #2
 8007626:	d03d      	beq.n	80076a4 <__pow5mult+0xa0>
 8007628:	69fc      	ldr	r4, [r7, #28]
 800762a:	b97c      	cbnz	r4, 800764c <__pow5mult+0x48>
 800762c:	2010      	movs	r0, #16
 800762e:	f7ff fcd3 	bl	8006fd8 <malloc>
 8007632:	4602      	mov	r2, r0
 8007634:	61f8      	str	r0, [r7, #28]
 8007636:	b928      	cbnz	r0, 8007644 <__pow5mult+0x40>
 8007638:	4b1d      	ldr	r3, [pc, #116]	@ (80076b0 <__pow5mult+0xac>)
 800763a:	481e      	ldr	r0, [pc, #120]	@ (80076b4 <__pow5mult+0xb0>)
 800763c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007640:	f000 fa9e 	bl	8007b80 <__assert_func>
 8007644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007648:	6004      	str	r4, [r0, #0]
 800764a:	60c4      	str	r4, [r0, #12]
 800764c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007654:	b94c      	cbnz	r4, 800766a <__pow5mult+0x66>
 8007656:	f240 2171 	movw	r1, #625	@ 0x271
 800765a:	4638      	mov	r0, r7
 800765c:	f7ff ff12 	bl	8007484 <__i2b>
 8007660:	2300      	movs	r3, #0
 8007662:	f8c8 0008 	str.w	r0, [r8, #8]
 8007666:	4604      	mov	r4, r0
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	f04f 0900 	mov.w	r9, #0
 800766e:	07eb      	lsls	r3, r5, #31
 8007670:	d50a      	bpl.n	8007688 <__pow5mult+0x84>
 8007672:	4631      	mov	r1, r6
 8007674:	4622      	mov	r2, r4
 8007676:	4638      	mov	r0, r7
 8007678:	f7ff ff1a 	bl	80074b0 <__multiply>
 800767c:	4631      	mov	r1, r6
 800767e:	4680      	mov	r8, r0
 8007680:	4638      	mov	r0, r7
 8007682:	f7ff fe4b 	bl	800731c <_Bfree>
 8007686:	4646      	mov	r6, r8
 8007688:	106d      	asrs	r5, r5, #1
 800768a:	d00b      	beq.n	80076a4 <__pow5mult+0xa0>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	b938      	cbnz	r0, 80076a0 <__pow5mult+0x9c>
 8007690:	4622      	mov	r2, r4
 8007692:	4621      	mov	r1, r4
 8007694:	4638      	mov	r0, r7
 8007696:	f7ff ff0b 	bl	80074b0 <__multiply>
 800769a:	6020      	str	r0, [r4, #0]
 800769c:	f8c0 9000 	str.w	r9, [r0]
 80076a0:	4604      	mov	r4, r0
 80076a2:	e7e4      	b.n	800766e <__pow5mult+0x6a>
 80076a4:	4630      	mov	r0, r6
 80076a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076aa:	bf00      	nop
 80076ac:	08008484 	.word	0x08008484
 80076b0:	08008399 	.word	0x08008399
 80076b4:	0800842a 	.word	0x0800842a

080076b8 <__lshift>:
 80076b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076bc:	460c      	mov	r4, r1
 80076be:	6849      	ldr	r1, [r1, #4]
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076c6:	68a3      	ldr	r3, [r4, #8]
 80076c8:	4607      	mov	r7, r0
 80076ca:	4691      	mov	r9, r2
 80076cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076d0:	f108 0601 	add.w	r6, r8, #1
 80076d4:	42b3      	cmp	r3, r6
 80076d6:	db0b      	blt.n	80076f0 <__lshift+0x38>
 80076d8:	4638      	mov	r0, r7
 80076da:	f7ff fddf 	bl	800729c <_Balloc>
 80076de:	4605      	mov	r5, r0
 80076e0:	b948      	cbnz	r0, 80076f6 <__lshift+0x3e>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b28      	ldr	r3, [pc, #160]	@ (8007788 <__lshift+0xd0>)
 80076e6:	4829      	ldr	r0, [pc, #164]	@ (800778c <__lshift+0xd4>)
 80076e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076ec:	f000 fa48 	bl	8007b80 <__assert_func>
 80076f0:	3101      	adds	r1, #1
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	e7ee      	b.n	80076d4 <__lshift+0x1c>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f100 0114 	add.w	r1, r0, #20
 80076fc:	f100 0210 	add.w	r2, r0, #16
 8007700:	4618      	mov	r0, r3
 8007702:	4553      	cmp	r3, sl
 8007704:	db33      	blt.n	800776e <__lshift+0xb6>
 8007706:	6920      	ldr	r0, [r4, #16]
 8007708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800770c:	f104 0314 	add.w	r3, r4, #20
 8007710:	f019 091f 	ands.w	r9, r9, #31
 8007714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007718:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800771c:	d02b      	beq.n	8007776 <__lshift+0xbe>
 800771e:	f1c9 0e20 	rsb	lr, r9, #32
 8007722:	468a      	mov	sl, r1
 8007724:	2200      	movs	r2, #0
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	fa00 f009 	lsl.w	r0, r0, r9
 800772c:	4310      	orrs	r0, r2
 800772e:	f84a 0b04 	str.w	r0, [sl], #4
 8007732:	f853 2b04 	ldr.w	r2, [r3], #4
 8007736:	459c      	cmp	ip, r3
 8007738:	fa22 f20e 	lsr.w	r2, r2, lr
 800773c:	d8f3      	bhi.n	8007726 <__lshift+0x6e>
 800773e:	ebac 0304 	sub.w	r3, ip, r4
 8007742:	3b15      	subs	r3, #21
 8007744:	f023 0303 	bic.w	r3, r3, #3
 8007748:	3304      	adds	r3, #4
 800774a:	f104 0015 	add.w	r0, r4, #21
 800774e:	4584      	cmp	ip, r0
 8007750:	bf38      	it	cc
 8007752:	2304      	movcc	r3, #4
 8007754:	50ca      	str	r2, [r1, r3]
 8007756:	b10a      	cbz	r2, 800775c <__lshift+0xa4>
 8007758:	f108 0602 	add.w	r6, r8, #2
 800775c:	3e01      	subs	r6, #1
 800775e:	4638      	mov	r0, r7
 8007760:	612e      	str	r6, [r5, #16]
 8007762:	4621      	mov	r1, r4
 8007764:	f7ff fdda 	bl	800731c <_Bfree>
 8007768:	4628      	mov	r0, r5
 800776a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007772:	3301      	adds	r3, #1
 8007774:	e7c5      	b.n	8007702 <__lshift+0x4a>
 8007776:	3904      	subs	r1, #4
 8007778:	f853 2b04 	ldr.w	r2, [r3], #4
 800777c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007780:	459c      	cmp	ip, r3
 8007782:	d8f9      	bhi.n	8007778 <__lshift+0xc0>
 8007784:	e7ea      	b.n	800775c <__lshift+0xa4>
 8007786:	bf00      	nop
 8007788:	08008408 	.word	0x08008408
 800778c:	0800842a 	.word	0x0800842a

08007790 <__mcmp>:
 8007790:	690a      	ldr	r2, [r1, #16]
 8007792:	4603      	mov	r3, r0
 8007794:	6900      	ldr	r0, [r0, #16]
 8007796:	1a80      	subs	r0, r0, r2
 8007798:	b530      	push	{r4, r5, lr}
 800779a:	d10e      	bne.n	80077ba <__mcmp+0x2a>
 800779c:	3314      	adds	r3, #20
 800779e:	3114      	adds	r1, #20
 80077a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077b0:	4295      	cmp	r5, r2
 80077b2:	d003      	beq.n	80077bc <__mcmp+0x2c>
 80077b4:	d205      	bcs.n	80077c2 <__mcmp+0x32>
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077ba:	bd30      	pop	{r4, r5, pc}
 80077bc:	42a3      	cmp	r3, r4
 80077be:	d3f3      	bcc.n	80077a8 <__mcmp+0x18>
 80077c0:	e7fb      	b.n	80077ba <__mcmp+0x2a>
 80077c2:	2001      	movs	r0, #1
 80077c4:	e7f9      	b.n	80077ba <__mcmp+0x2a>
	...

080077c8 <__mdiff>:
 80077c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	4689      	mov	r9, r1
 80077ce:	4606      	mov	r6, r0
 80077d0:	4611      	mov	r1, r2
 80077d2:	4648      	mov	r0, r9
 80077d4:	4614      	mov	r4, r2
 80077d6:	f7ff ffdb 	bl	8007790 <__mcmp>
 80077da:	1e05      	subs	r5, r0, #0
 80077dc:	d112      	bne.n	8007804 <__mdiff+0x3c>
 80077de:	4629      	mov	r1, r5
 80077e0:	4630      	mov	r0, r6
 80077e2:	f7ff fd5b 	bl	800729c <_Balloc>
 80077e6:	4602      	mov	r2, r0
 80077e8:	b928      	cbnz	r0, 80077f6 <__mdiff+0x2e>
 80077ea:	4b3f      	ldr	r3, [pc, #252]	@ (80078e8 <__mdiff+0x120>)
 80077ec:	f240 2137 	movw	r1, #567	@ 0x237
 80077f0:	483e      	ldr	r0, [pc, #248]	@ (80078ec <__mdiff+0x124>)
 80077f2:	f000 f9c5 	bl	8007b80 <__assert_func>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077fc:	4610      	mov	r0, r2
 80077fe:	b003      	add	sp, #12
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	bfbc      	itt	lt
 8007806:	464b      	movlt	r3, r9
 8007808:	46a1      	movlt	r9, r4
 800780a:	4630      	mov	r0, r6
 800780c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007810:	bfba      	itte	lt
 8007812:	461c      	movlt	r4, r3
 8007814:	2501      	movlt	r5, #1
 8007816:	2500      	movge	r5, #0
 8007818:	f7ff fd40 	bl	800729c <_Balloc>
 800781c:	4602      	mov	r2, r0
 800781e:	b918      	cbnz	r0, 8007828 <__mdiff+0x60>
 8007820:	4b31      	ldr	r3, [pc, #196]	@ (80078e8 <__mdiff+0x120>)
 8007822:	f240 2145 	movw	r1, #581	@ 0x245
 8007826:	e7e3      	b.n	80077f0 <__mdiff+0x28>
 8007828:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800782c:	6926      	ldr	r6, [r4, #16]
 800782e:	60c5      	str	r5, [r0, #12]
 8007830:	f109 0310 	add.w	r3, r9, #16
 8007834:	f109 0514 	add.w	r5, r9, #20
 8007838:	f104 0e14 	add.w	lr, r4, #20
 800783c:	f100 0b14 	add.w	fp, r0, #20
 8007840:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007844:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	46d9      	mov	r9, fp
 800784c:	f04f 0c00 	mov.w	ip, #0
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007856:	f853 af04 	ldr.w	sl, [r3, #4]!
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	fa1f f38a 	uxth.w	r3, sl
 8007860:	4619      	mov	r1, r3
 8007862:	b283      	uxth	r3, r0
 8007864:	1acb      	subs	r3, r1, r3
 8007866:	0c00      	lsrs	r0, r0, #16
 8007868:	4463      	add	r3, ip
 800786a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800786e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007872:	b29b      	uxth	r3, r3
 8007874:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007878:	4576      	cmp	r6, lr
 800787a:	f849 3b04 	str.w	r3, [r9], #4
 800787e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007882:	d8e5      	bhi.n	8007850 <__mdiff+0x88>
 8007884:	1b33      	subs	r3, r6, r4
 8007886:	3b15      	subs	r3, #21
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	3415      	adds	r4, #21
 800788e:	3304      	adds	r3, #4
 8007890:	42a6      	cmp	r6, r4
 8007892:	bf38      	it	cc
 8007894:	2304      	movcc	r3, #4
 8007896:	441d      	add	r5, r3
 8007898:	445b      	add	r3, fp
 800789a:	461e      	mov	r6, r3
 800789c:	462c      	mov	r4, r5
 800789e:	4544      	cmp	r4, r8
 80078a0:	d30e      	bcc.n	80078c0 <__mdiff+0xf8>
 80078a2:	f108 0103 	add.w	r1, r8, #3
 80078a6:	1b49      	subs	r1, r1, r5
 80078a8:	f021 0103 	bic.w	r1, r1, #3
 80078ac:	3d03      	subs	r5, #3
 80078ae:	45a8      	cmp	r8, r5
 80078b0:	bf38      	it	cc
 80078b2:	2100      	movcc	r1, #0
 80078b4:	440b      	add	r3, r1
 80078b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078ba:	b191      	cbz	r1, 80078e2 <__mdiff+0x11a>
 80078bc:	6117      	str	r7, [r2, #16]
 80078be:	e79d      	b.n	80077fc <__mdiff+0x34>
 80078c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80078c4:	46e6      	mov	lr, ip
 80078c6:	0c08      	lsrs	r0, r1, #16
 80078c8:	fa1c fc81 	uxtah	ip, ip, r1
 80078cc:	4471      	add	r1, lr
 80078ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078d2:	b289      	uxth	r1, r1
 80078d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078d8:	f846 1b04 	str.w	r1, [r6], #4
 80078dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078e0:	e7dd      	b.n	800789e <__mdiff+0xd6>
 80078e2:	3f01      	subs	r7, #1
 80078e4:	e7e7      	b.n	80078b6 <__mdiff+0xee>
 80078e6:	bf00      	nop
 80078e8:	08008408 	.word	0x08008408
 80078ec:	0800842a 	.word	0x0800842a

080078f0 <__d2b>:
 80078f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	460f      	mov	r7, r1
 80078f6:	2101      	movs	r1, #1
 80078f8:	ec59 8b10 	vmov	r8, r9, d0
 80078fc:	4616      	mov	r6, r2
 80078fe:	f7ff fccd 	bl	800729c <_Balloc>
 8007902:	4604      	mov	r4, r0
 8007904:	b930      	cbnz	r0, 8007914 <__d2b+0x24>
 8007906:	4602      	mov	r2, r0
 8007908:	4b23      	ldr	r3, [pc, #140]	@ (8007998 <__d2b+0xa8>)
 800790a:	4824      	ldr	r0, [pc, #144]	@ (800799c <__d2b+0xac>)
 800790c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007910:	f000 f936 	bl	8007b80 <__assert_func>
 8007914:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800791c:	b10d      	cbz	r5, 8007922 <__d2b+0x32>
 800791e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	f1b8 0300 	subs.w	r3, r8, #0
 8007928:	d023      	beq.n	8007972 <__d2b+0x82>
 800792a:	4668      	mov	r0, sp
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	f7ff fd7c 	bl	800742a <__lo0bits>
 8007932:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007936:	b1d0      	cbz	r0, 800796e <__d2b+0x7e>
 8007938:	f1c0 0320 	rsb	r3, r0, #32
 800793c:	fa02 f303 	lsl.w	r3, r2, r3
 8007940:	430b      	orrs	r3, r1
 8007942:	40c2      	lsrs	r2, r0
 8007944:	6163      	str	r3, [r4, #20]
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	9b01      	ldr	r3, [sp, #4]
 800794a:	61a3      	str	r3, [r4, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf0c      	ite	eq
 8007950:	2201      	moveq	r2, #1
 8007952:	2202      	movne	r2, #2
 8007954:	6122      	str	r2, [r4, #16]
 8007956:	b1a5      	cbz	r5, 8007982 <__d2b+0x92>
 8007958:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800795c:	4405      	add	r5, r0
 800795e:	603d      	str	r5, [r7, #0]
 8007960:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007964:	6030      	str	r0, [r6, #0]
 8007966:	4620      	mov	r0, r4
 8007968:	b003      	add	sp, #12
 800796a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800796e:	6161      	str	r1, [r4, #20]
 8007970:	e7ea      	b.n	8007948 <__d2b+0x58>
 8007972:	a801      	add	r0, sp, #4
 8007974:	f7ff fd59 	bl	800742a <__lo0bits>
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	6163      	str	r3, [r4, #20]
 800797c:	3020      	adds	r0, #32
 800797e:	2201      	movs	r2, #1
 8007980:	e7e8      	b.n	8007954 <__d2b+0x64>
 8007982:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007986:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800798a:	6038      	str	r0, [r7, #0]
 800798c:	6918      	ldr	r0, [r3, #16]
 800798e:	f7ff fd2d 	bl	80073ec <__hi0bits>
 8007992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007996:	e7e5      	b.n	8007964 <__d2b+0x74>
 8007998:	08008408 	.word	0x08008408
 800799c:	0800842a 	.word	0x0800842a

080079a0 <__sread>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	460c      	mov	r4, r1
 80079a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a8:	f000 f8a8 	bl	8007afc <_read_r>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	bfab      	itete	ge
 80079b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079b2:	89a3      	ldrhlt	r3, [r4, #12]
 80079b4:	181b      	addge	r3, r3, r0
 80079b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079ba:	bfac      	ite	ge
 80079bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079be:	81a3      	strhlt	r3, [r4, #12]
 80079c0:	bd10      	pop	{r4, pc}

080079c2 <__swrite>:
 80079c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c6:	461f      	mov	r7, r3
 80079c8:	898b      	ldrh	r3, [r1, #12]
 80079ca:	05db      	lsls	r3, r3, #23
 80079cc:	4605      	mov	r5, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	4616      	mov	r6, r2
 80079d2:	d505      	bpl.n	80079e0 <__swrite+0x1e>
 80079d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d8:	2302      	movs	r3, #2
 80079da:	2200      	movs	r2, #0
 80079dc:	f000 f87c 	bl	8007ad8 <_lseek_r>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	4628      	mov	r0, r5
 80079f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f6:	f000 b8a3 	b.w	8007b40 <_write_r>

080079fa <__sseek>:
 80079fa:	b510      	push	{r4, lr}
 80079fc:	460c      	mov	r4, r1
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	f000 f869 	bl	8007ad8 <_lseek_r>
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	bf15      	itete	ne
 8007a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a16:	81a3      	strheq	r3, [r4, #12]
 8007a18:	bf18      	it	ne
 8007a1a:	81a3      	strhne	r3, [r4, #12]
 8007a1c:	bd10      	pop	{r4, pc}

08007a1e <__sclose>:
 8007a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a22:	f000 b849 	b.w	8007ab8 <_close_r>

08007a26 <_realloc_r>:
 8007a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	4615      	mov	r5, r2
 8007a2e:	460c      	mov	r4, r1
 8007a30:	b921      	cbnz	r1, 8007a3c <_realloc_r+0x16>
 8007a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	4611      	mov	r1, r2
 8007a38:	f7ff baf8 	b.w	800702c <_malloc_r>
 8007a3c:	b92a      	cbnz	r2, 8007a4a <_realloc_r+0x24>
 8007a3e:	f000 f8d1 	bl	8007be4 <_free_r>
 8007a42:	2400      	movs	r4, #0
 8007a44:	4620      	mov	r0, r4
 8007a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a4a:	f000 f927 	bl	8007c9c <_malloc_usable_size_r>
 8007a4e:	4285      	cmp	r5, r0
 8007a50:	4606      	mov	r6, r0
 8007a52:	d802      	bhi.n	8007a5a <_realloc_r+0x34>
 8007a54:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007a58:	d8f4      	bhi.n	8007a44 <_realloc_r+0x1e>
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	f7ff fae5 	bl	800702c <_malloc_r>
 8007a62:	4607      	mov	r7, r0
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d0ec      	beq.n	8007a42 <_realloc_r+0x1c>
 8007a68:	42b5      	cmp	r5, r6
 8007a6a:	462a      	mov	r2, r5
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	bf28      	it	cs
 8007a70:	4632      	movcs	r2, r6
 8007a72:	f000 f877 	bl	8007b64 <memcpy>
 8007a76:	4621      	mov	r1, r4
 8007a78:	4640      	mov	r0, r8
 8007a7a:	f000 f8b3 	bl	8007be4 <_free_r>
 8007a7e:	463c      	mov	r4, r7
 8007a80:	e7e0      	b.n	8007a44 <_realloc_r+0x1e>

08007a82 <memmove>:
 8007a82:	4288      	cmp	r0, r1
 8007a84:	b510      	push	{r4, lr}
 8007a86:	eb01 0402 	add.w	r4, r1, r2
 8007a8a:	d902      	bls.n	8007a92 <memmove+0x10>
 8007a8c:	4284      	cmp	r4, r0
 8007a8e:	4623      	mov	r3, r4
 8007a90:	d807      	bhi.n	8007aa2 <memmove+0x20>
 8007a92:	1e43      	subs	r3, r0, #1
 8007a94:	42a1      	cmp	r1, r4
 8007a96:	d008      	beq.n	8007aaa <memmove+0x28>
 8007a98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aa0:	e7f8      	b.n	8007a94 <memmove+0x12>
 8007aa2:	4402      	add	r2, r0
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	428a      	cmp	r2, r1
 8007aa8:	d100      	bne.n	8007aac <memmove+0x2a>
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ab0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ab4:	e7f7      	b.n	8007aa6 <memmove+0x24>
	...

08007ab8 <_close_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d06      	ldr	r5, [pc, #24]	@ (8007ad4 <_close_r+0x1c>)
 8007abc:	2300      	movs	r3, #0
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	f7f9 fe7e 	bl	80017c4 <_close>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_close_r+0x1a>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_close_r+0x1a>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20000424 	.word	0x20000424

08007ad8 <_lseek_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d07      	ldr	r5, [pc, #28]	@ (8007af8 <_lseek_r+0x20>)
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f7f9 fe93 	bl	8001812 <_lseek>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_lseek_r+0x1e>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_lseek_r+0x1e>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000424 	.word	0x20000424

08007afc <_read_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	@ (8007b1c <_read_r+0x20>)
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f7f9 fe21 	bl	8001752 <_read>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_read_r+0x1e>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_read_r+0x1e>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000424 	.word	0x20000424

08007b20 <_sbrk_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d06      	ldr	r5, [pc, #24]	@ (8007b3c <_sbrk_r+0x1c>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	f7f9 fe7e 	bl	800182c <_sbrk>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_sbrk_r+0x1a>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_sbrk_r+0x1a>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	20000424 	.word	0x20000424

08007b40 <_write_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d07      	ldr	r5, [pc, #28]	@ (8007b60 <_write_r+0x20>)
 8007b44:	4604      	mov	r4, r0
 8007b46:	4608      	mov	r0, r1
 8007b48:	4611      	mov	r1, r2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	602a      	str	r2, [r5, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f7f9 fe1c 	bl	800178c <_write>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_write_r+0x1e>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_write_r+0x1e>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	20000424 	.word	0x20000424

08007b64 <memcpy>:
 8007b64:	440a      	add	r2, r1
 8007b66:	4291      	cmp	r1, r2
 8007b68:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b6c:	d100      	bne.n	8007b70 <memcpy+0xc>
 8007b6e:	4770      	bx	lr
 8007b70:	b510      	push	{r4, lr}
 8007b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	d1f9      	bne.n	8007b72 <memcpy+0xe>
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <__assert_func>:
 8007b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b82:	4614      	mov	r4, r2
 8007b84:	461a      	mov	r2, r3
 8007b86:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <__assert_func+0x2c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	68d8      	ldr	r0, [r3, #12]
 8007b8e:	b954      	cbnz	r4, 8007ba6 <__assert_func+0x26>
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <__assert_func+0x30>)
 8007b92:	461c      	mov	r4, r3
 8007b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b98:	9100      	str	r1, [sp, #0]
 8007b9a:	462b      	mov	r3, r5
 8007b9c:	4905      	ldr	r1, [pc, #20]	@ (8007bb4 <__assert_func+0x34>)
 8007b9e:	f000 f885 	bl	8007cac <fiprintf>
 8007ba2:	f000 f8a2 	bl	8007cea <abort>
 8007ba6:	4b04      	ldr	r3, [pc, #16]	@ (8007bb8 <__assert_func+0x38>)
 8007ba8:	e7f4      	b.n	8007b94 <__assert_func+0x14>
 8007baa:	bf00      	nop
 8007bac:	20000018 	.word	0x20000018
 8007bb0:	080086c6 	.word	0x080086c6
 8007bb4:	08008698 	.word	0x08008698
 8007bb8:	0800868b 	.word	0x0800868b

08007bbc <_calloc_r>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	fba1 5402 	umull	r5, r4, r1, r2
 8007bc2:	b93c      	cbnz	r4, 8007bd4 <_calloc_r+0x18>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7ff fa31 	bl	800702c <_malloc_r>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <_calloc_r+0x1e>
 8007bce:	2600      	movs	r6, #0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	220c      	movs	r2, #12
 8007bd6:	6002      	str	r2, [r0, #0]
 8007bd8:	e7f9      	b.n	8007bce <_calloc_r+0x12>
 8007bda:	462a      	mov	r2, r5
 8007bdc:	4621      	mov	r1, r4
 8007bde:	f7fe fa1b 	bl	8006018 <memset>
 8007be2:	e7f5      	b.n	8007bd0 <_calloc_r+0x14>

08007be4 <_free_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4605      	mov	r5, r0
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d041      	beq.n	8007c70 <_free_r+0x8c>
 8007bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf0:	1f0c      	subs	r4, r1, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bfb8      	it	lt
 8007bf6:	18e4      	addlt	r4, r4, r3
 8007bf8:	f7ff fb44 	bl	8007284 <__malloc_lock>
 8007bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8007c74 <_free_r+0x90>)
 8007bfe:	6813      	ldr	r3, [r2, #0]
 8007c00:	b933      	cbnz	r3, 8007c10 <_free_r+0x2c>
 8007c02:	6063      	str	r3, [r4, #4]
 8007c04:	6014      	str	r4, [r2, #0]
 8007c06:	4628      	mov	r0, r5
 8007c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0c:	f7ff bb40 	b.w	8007290 <__malloc_unlock>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d908      	bls.n	8007c26 <_free_r+0x42>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	1821      	adds	r1, r4, r0
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	bf01      	itttt	eq
 8007c1c:	6819      	ldreq	r1, [r3, #0]
 8007c1e:	685b      	ldreq	r3, [r3, #4]
 8007c20:	1809      	addeq	r1, r1, r0
 8007c22:	6021      	streq	r1, [r4, #0]
 8007c24:	e7ed      	b.n	8007c02 <_free_r+0x1e>
 8007c26:	461a      	mov	r2, r3
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	b10b      	cbz	r3, 8007c30 <_free_r+0x4c>
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	d9fa      	bls.n	8007c26 <_free_r+0x42>
 8007c30:	6811      	ldr	r1, [r2, #0]
 8007c32:	1850      	adds	r0, r2, r1
 8007c34:	42a0      	cmp	r0, r4
 8007c36:	d10b      	bne.n	8007c50 <_free_r+0x6c>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	4401      	add	r1, r0
 8007c3c:	1850      	adds	r0, r2, r1
 8007c3e:	4283      	cmp	r3, r0
 8007c40:	6011      	str	r1, [r2, #0]
 8007c42:	d1e0      	bne.n	8007c06 <_free_r+0x22>
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	6053      	str	r3, [r2, #4]
 8007c4a:	4408      	add	r0, r1
 8007c4c:	6010      	str	r0, [r2, #0]
 8007c4e:	e7da      	b.n	8007c06 <_free_r+0x22>
 8007c50:	d902      	bls.n	8007c58 <_free_r+0x74>
 8007c52:	230c      	movs	r3, #12
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	e7d6      	b.n	8007c06 <_free_r+0x22>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	1821      	adds	r1, r4, r0
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	bf04      	itt	eq
 8007c60:	6819      	ldreq	r1, [r3, #0]
 8007c62:	685b      	ldreq	r3, [r3, #4]
 8007c64:	6063      	str	r3, [r4, #4]
 8007c66:	bf04      	itt	eq
 8007c68:	1809      	addeq	r1, r1, r0
 8007c6a:	6021      	streq	r1, [r4, #0]
 8007c6c:	6054      	str	r4, [r2, #4]
 8007c6e:	e7ca      	b.n	8007c06 <_free_r+0x22>
 8007c70:	bd38      	pop	{r3, r4, r5, pc}
 8007c72:	bf00      	nop
 8007c74:	20000420 	.word	0x20000420

08007c78 <__ascii_mbtowc>:
 8007c78:	b082      	sub	sp, #8
 8007c7a:	b901      	cbnz	r1, 8007c7e <__ascii_mbtowc+0x6>
 8007c7c:	a901      	add	r1, sp, #4
 8007c7e:	b142      	cbz	r2, 8007c92 <__ascii_mbtowc+0x1a>
 8007c80:	b14b      	cbz	r3, 8007c96 <__ascii_mbtowc+0x1e>
 8007c82:	7813      	ldrb	r3, [r2, #0]
 8007c84:	600b      	str	r3, [r1, #0]
 8007c86:	7812      	ldrb	r2, [r2, #0]
 8007c88:	1e10      	subs	r0, r2, #0
 8007c8a:	bf18      	it	ne
 8007c8c:	2001      	movne	r0, #1
 8007c8e:	b002      	add	sp, #8
 8007c90:	4770      	bx	lr
 8007c92:	4610      	mov	r0, r2
 8007c94:	e7fb      	b.n	8007c8e <__ascii_mbtowc+0x16>
 8007c96:	f06f 0001 	mvn.w	r0, #1
 8007c9a:	e7f8      	b.n	8007c8e <__ascii_mbtowc+0x16>

08007c9c <_malloc_usable_size_r>:
 8007c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca0:	1f18      	subs	r0, r3, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bfbc      	itt	lt
 8007ca6:	580b      	ldrlt	r3, [r1, r0]
 8007ca8:	18c0      	addlt	r0, r0, r3
 8007caa:	4770      	bx	lr

08007cac <fiprintf>:
 8007cac:	b40e      	push	{r1, r2, r3}
 8007cae:	b503      	push	{r0, r1, lr}
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	4805      	ldr	r0, [pc, #20]	@ (8007ccc <fiprintf+0x20>)
 8007cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	f000 f845 	bl	8007d4c <_vfiprintf_r>
 8007cc2:	b002      	add	sp, #8
 8007cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc8:	b003      	add	sp, #12
 8007cca:	4770      	bx	lr
 8007ccc:	20000018 	.word	0x20000018

08007cd0 <__ascii_wctomb>:
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4608      	mov	r0, r1
 8007cd4:	b141      	cbz	r1, 8007ce8 <__ascii_wctomb+0x18>
 8007cd6:	2aff      	cmp	r2, #255	@ 0xff
 8007cd8:	d904      	bls.n	8007ce4 <__ascii_wctomb+0x14>
 8007cda:	228a      	movs	r2, #138	@ 0x8a
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ce2:	4770      	bx	lr
 8007ce4:	700a      	strb	r2, [r1, #0]
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	4770      	bx	lr

08007cea <abort>:
 8007cea:	b508      	push	{r3, lr}
 8007cec:	2006      	movs	r0, #6
 8007cee:	f000 fa85 	bl	80081fc <raise>
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f7f9 fd22 	bl	800173c <_exit>

08007cf8 <__sfputc_r>:
 8007cf8:	6893      	ldr	r3, [r2, #8]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	b410      	push	{r4}
 8007d00:	6093      	str	r3, [r2, #8]
 8007d02:	da08      	bge.n	8007d16 <__sfputc_r+0x1e>
 8007d04:	6994      	ldr	r4, [r2, #24]
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	db01      	blt.n	8007d0e <__sfputc_r+0x16>
 8007d0a:	290a      	cmp	r1, #10
 8007d0c:	d103      	bne.n	8007d16 <__sfputc_r+0x1e>
 8007d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d12:	f000 b933 	b.w	8007f7c <__swbuf_r>
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	1c58      	adds	r0, r3, #1
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	7019      	strb	r1, [r3, #0]
 8007d1e:	4608      	mov	r0, r1
 8007d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <__sfputs_r>:
 8007d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	18d5      	adds	r5, r2, r3
 8007d30:	42ac      	cmp	r4, r5
 8007d32:	d101      	bne.n	8007d38 <__sfputs_r+0x12>
 8007d34:	2000      	movs	r0, #0
 8007d36:	e007      	b.n	8007d48 <__sfputs_r+0x22>
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ffda 	bl	8007cf8 <__sfputc_r>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d1f3      	bne.n	8007d30 <__sfputs_r+0xa>
 8007d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d4c <_vfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	460d      	mov	r5, r1
 8007d52:	b09d      	sub	sp, #116	@ 0x74
 8007d54:	4614      	mov	r4, r2
 8007d56:	4698      	mov	r8, r3
 8007d58:	4606      	mov	r6, r0
 8007d5a:	b118      	cbz	r0, 8007d64 <_vfiprintf_r+0x18>
 8007d5c:	6a03      	ldr	r3, [r0, #32]
 8007d5e:	b90b      	cbnz	r3, 8007d64 <_vfiprintf_r+0x18>
 8007d60:	f7fe f924 	bl	8005fac <__sinit>
 8007d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d66:	07d9      	lsls	r1, r3, #31
 8007d68:	d405      	bmi.n	8007d76 <_vfiprintf_r+0x2a>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	059a      	lsls	r2, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_vfiprintf_r+0x2a>
 8007d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d72:	f7fe f988 	bl	8006086 <__retarget_lock_acquire_recursive>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	071b      	lsls	r3, r3, #28
 8007d7a:	d501      	bpl.n	8007d80 <_vfiprintf_r+0x34>
 8007d7c:	692b      	ldr	r3, [r5, #16]
 8007d7e:	b99b      	cbnz	r3, 8007da8 <_vfiprintf_r+0x5c>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4630      	mov	r0, r6
 8007d84:	f000 f938 	bl	8007ff8 <__swsetup_r>
 8007d88:	b170      	cbz	r0, 8007da8 <_vfiprintf_r+0x5c>
 8007d8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d8c:	07dc      	lsls	r4, r3, #31
 8007d8e:	d504      	bpl.n	8007d9a <_vfiprintf_r+0x4e>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d94:	b01d      	add	sp, #116	@ 0x74
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	89ab      	ldrh	r3, [r5, #12]
 8007d9c:	0598      	lsls	r0, r3, #22
 8007d9e:	d4f7      	bmi.n	8007d90 <_vfiprintf_r+0x44>
 8007da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007da2:	f7fe f971 	bl	8006088 <__retarget_lock_release_recursive>
 8007da6:	e7f3      	b.n	8007d90 <_vfiprintf_r+0x44>
 8007da8:	2300      	movs	r3, #0
 8007daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dac:	2320      	movs	r3, #32
 8007dae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db6:	2330      	movs	r3, #48	@ 0x30
 8007db8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f68 <_vfiprintf_r+0x21c>
 8007dbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dc0:	f04f 0901 	mov.w	r9, #1
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	469a      	mov	sl, r3
 8007dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dcc:	b10a      	cbz	r2, 8007dd2 <_vfiprintf_r+0x86>
 8007dce:	2a25      	cmp	r2, #37	@ 0x25
 8007dd0:	d1f9      	bne.n	8007dc6 <_vfiprintf_r+0x7a>
 8007dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd6:	d00b      	beq.n	8007df0 <_vfiprintf_r+0xa4>
 8007dd8:	465b      	mov	r3, fp
 8007dda:	4622      	mov	r2, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ffa1 	bl	8007d26 <__sfputs_r>
 8007de4:	3001      	adds	r0, #1
 8007de6:	f000 80a7 	beq.w	8007f38 <_vfiprintf_r+0x1ec>
 8007dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dec:	445a      	add	r2, fp
 8007dee:	9209      	str	r2, [sp, #36]	@ 0x24
 8007df0:	f89a 3000 	ldrb.w	r3, [sl]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 809f 	beq.w	8007f38 <_vfiprintf_r+0x1ec>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e04:	f10a 0a01 	add.w	sl, sl, #1
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e10:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e12:	4654      	mov	r4, sl
 8007e14:	2205      	movs	r2, #5
 8007e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1a:	4853      	ldr	r0, [pc, #332]	@ (8007f68 <_vfiprintf_r+0x21c>)
 8007e1c:	f7f8 f9d8 	bl	80001d0 <memchr>
 8007e20:	9a04      	ldr	r2, [sp, #16]
 8007e22:	b9d8      	cbnz	r0, 8007e5c <_vfiprintf_r+0x110>
 8007e24:	06d1      	lsls	r1, r2, #27
 8007e26:	bf44      	itt	mi
 8007e28:	2320      	movmi	r3, #32
 8007e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e2e:	0713      	lsls	r3, r2, #28
 8007e30:	bf44      	itt	mi
 8007e32:	232b      	movmi	r3, #43	@ 0x2b
 8007e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e38:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3e:	d015      	beq.n	8007e6c <_vfiprintf_r+0x120>
 8007e40:	9a07      	ldr	r2, [sp, #28]
 8007e42:	4654      	mov	r4, sl
 8007e44:	2000      	movs	r0, #0
 8007e46:	f04f 0c0a 	mov.w	ip, #10
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e50:	3b30      	subs	r3, #48	@ 0x30
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	d94b      	bls.n	8007eee <_vfiprintf_r+0x1a2>
 8007e56:	b1b0      	cbz	r0, 8007e86 <_vfiprintf_r+0x13a>
 8007e58:	9207      	str	r2, [sp, #28]
 8007e5a:	e014      	b.n	8007e86 <_vfiprintf_r+0x13a>
 8007e5c:	eba0 0308 	sub.w	r3, r0, r8
 8007e60:	fa09 f303 	lsl.w	r3, r9, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	46a2      	mov	sl, r4
 8007e6a:	e7d2      	b.n	8007e12 <_vfiprintf_r+0xc6>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	1d19      	adds	r1, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9103      	str	r1, [sp, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbb      	ittet	lt
 8007e78:	425b      	neglt	r3, r3
 8007e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e7e:	9307      	strge	r3, [sp, #28]
 8007e80:	9307      	strlt	r3, [sp, #28]
 8007e82:	bfb8      	it	lt
 8007e84:	9204      	strlt	r2, [sp, #16]
 8007e86:	7823      	ldrb	r3, [r4, #0]
 8007e88:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e8a:	d10a      	bne.n	8007ea2 <_vfiprintf_r+0x156>
 8007e8c:	7863      	ldrb	r3, [r4, #1]
 8007e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e90:	d132      	bne.n	8007ef8 <_vfiprintf_r+0x1ac>
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	9203      	str	r2, [sp, #12]
 8007e9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e9e:	3402      	adds	r4, #2
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f78 <_vfiprintf_r+0x22c>
 8007ea6:	7821      	ldrb	r1, [r4, #0]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	4650      	mov	r0, sl
 8007eac:	f7f8 f990 	bl	80001d0 <memchr>
 8007eb0:	b138      	cbz	r0, 8007ec2 <_vfiprintf_r+0x176>
 8007eb2:	9b04      	ldr	r3, [sp, #16]
 8007eb4:	eba0 000a 	sub.w	r0, r0, sl
 8007eb8:	2240      	movs	r2, #64	@ 0x40
 8007eba:	4082      	lsls	r2, r0
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	3401      	adds	r4, #1
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec6:	4829      	ldr	r0, [pc, #164]	@ (8007f6c <_vfiprintf_r+0x220>)
 8007ec8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ecc:	2206      	movs	r2, #6
 8007ece:	f7f8 f97f 	bl	80001d0 <memchr>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d03f      	beq.n	8007f56 <_vfiprintf_r+0x20a>
 8007ed6:	4b26      	ldr	r3, [pc, #152]	@ (8007f70 <_vfiprintf_r+0x224>)
 8007ed8:	bb1b      	cbnz	r3, 8007f22 <_vfiprintf_r+0x1d6>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	3307      	adds	r3, #7
 8007ede:	f023 0307 	bic.w	r3, r3, #7
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee8:	443b      	add	r3, r7
 8007eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eec:	e76a      	b.n	8007dc4 <_vfiprintf_r+0x78>
 8007eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	e7a8      	b.n	8007e4a <_vfiprintf_r+0xfe>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	3401      	adds	r4, #1
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	4619      	mov	r1, r3
 8007f00:	f04f 0c0a 	mov.w	ip, #10
 8007f04:	4620      	mov	r0, r4
 8007f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f0a:	3a30      	subs	r2, #48	@ 0x30
 8007f0c:	2a09      	cmp	r2, #9
 8007f0e:	d903      	bls.n	8007f18 <_vfiprintf_r+0x1cc>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0c6      	beq.n	8007ea2 <_vfiprintf_r+0x156>
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	e7c4      	b.n	8007ea2 <_vfiprintf_r+0x156>
 8007f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e7f0      	b.n	8007f04 <_vfiprintf_r+0x1b8>
 8007f22:	ab03      	add	r3, sp, #12
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	462a      	mov	r2, r5
 8007f28:	4b12      	ldr	r3, [pc, #72]	@ (8007f74 <_vfiprintf_r+0x228>)
 8007f2a:	a904      	add	r1, sp, #16
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f7fd fbd9 	bl	80056e4 <_printf_float>
 8007f32:	4607      	mov	r7, r0
 8007f34:	1c78      	adds	r0, r7, #1
 8007f36:	d1d6      	bne.n	8007ee6 <_vfiprintf_r+0x19a>
 8007f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f3a:	07d9      	lsls	r1, r3, #31
 8007f3c:	d405      	bmi.n	8007f4a <_vfiprintf_r+0x1fe>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	059a      	lsls	r2, r3, #22
 8007f42:	d402      	bmi.n	8007f4a <_vfiprintf_r+0x1fe>
 8007f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f46:	f7fe f89f 	bl	8006088 <__retarget_lock_release_recursive>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	065b      	lsls	r3, r3, #25
 8007f4e:	f53f af1f 	bmi.w	8007d90 <_vfiprintf_r+0x44>
 8007f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f54:	e71e      	b.n	8007d94 <_vfiprintf_r+0x48>
 8007f56:	ab03      	add	r3, sp, #12
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4b05      	ldr	r3, [pc, #20]	@ (8007f74 <_vfiprintf_r+0x228>)
 8007f5e:	a904      	add	r1, sp, #16
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7fd fe57 	bl	8005c14 <_printf_i>
 8007f66:	e7e4      	b.n	8007f32 <_vfiprintf_r+0x1e6>
 8007f68:	08008419 	.word	0x08008419
 8007f6c:	08008423 	.word	0x08008423
 8007f70:	080056e5 	.word	0x080056e5
 8007f74:	08007d27 	.word	0x08007d27
 8007f78:	0800841f 	.word	0x0800841f

08007f7c <__swbuf_r>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	460e      	mov	r6, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	4605      	mov	r5, r0
 8007f84:	b118      	cbz	r0, 8007f8e <__swbuf_r+0x12>
 8007f86:	6a03      	ldr	r3, [r0, #32]
 8007f88:	b90b      	cbnz	r3, 8007f8e <__swbuf_r+0x12>
 8007f8a:	f7fe f80f 	bl	8005fac <__sinit>
 8007f8e:	69a3      	ldr	r3, [r4, #24]
 8007f90:	60a3      	str	r3, [r4, #8]
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	071a      	lsls	r2, r3, #28
 8007f96:	d501      	bpl.n	8007f9c <__swbuf_r+0x20>
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	b943      	cbnz	r3, 8007fae <__swbuf_r+0x32>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f82a 	bl	8007ff8 <__swsetup_r>
 8007fa4:	b118      	cbz	r0, 8007fae <__swbuf_r+0x32>
 8007fa6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007faa:	4638      	mov	r0, r7
 8007fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	1a98      	subs	r0, r3, r2
 8007fb4:	6963      	ldr	r3, [r4, #20]
 8007fb6:	b2f6      	uxtb	r6, r6
 8007fb8:	4283      	cmp	r3, r0
 8007fba:	4637      	mov	r7, r6
 8007fbc:	dc05      	bgt.n	8007fca <__swbuf_r+0x4e>
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f7ff f937 	bl	8007234 <_fflush_r>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d1ed      	bne.n	8007fa6 <__swbuf_r+0x2a>
 8007fca:	68a3      	ldr	r3, [r4, #8]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	60a3      	str	r3, [r4, #8]
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	6022      	str	r2, [r4, #0]
 8007fd6:	701e      	strb	r6, [r3, #0]
 8007fd8:	6962      	ldr	r2, [r4, #20]
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d004      	beq.n	8007fea <__swbuf_r+0x6e>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	07db      	lsls	r3, r3, #31
 8007fe4:	d5e1      	bpl.n	8007faa <__swbuf_r+0x2e>
 8007fe6:	2e0a      	cmp	r6, #10
 8007fe8:	d1df      	bne.n	8007faa <__swbuf_r+0x2e>
 8007fea:	4621      	mov	r1, r4
 8007fec:	4628      	mov	r0, r5
 8007fee:	f7ff f921 	bl	8007234 <_fflush_r>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d0d9      	beq.n	8007faa <__swbuf_r+0x2e>
 8007ff6:	e7d6      	b.n	8007fa6 <__swbuf_r+0x2a>

08007ff8 <__swsetup_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4b29      	ldr	r3, [pc, #164]	@ (80080a0 <__swsetup_r+0xa8>)
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	460c      	mov	r4, r1
 8008002:	b118      	cbz	r0, 800800c <__swsetup_r+0x14>
 8008004:	6a03      	ldr	r3, [r0, #32]
 8008006:	b90b      	cbnz	r3, 800800c <__swsetup_r+0x14>
 8008008:	f7fd ffd0 	bl	8005fac <__sinit>
 800800c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008010:	0719      	lsls	r1, r3, #28
 8008012:	d422      	bmi.n	800805a <__swsetup_r+0x62>
 8008014:	06da      	lsls	r2, r3, #27
 8008016:	d407      	bmi.n	8008028 <__swsetup_r+0x30>
 8008018:	2209      	movs	r2, #9
 800801a:	602a      	str	r2, [r5, #0]
 800801c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008026:	e033      	b.n	8008090 <__swsetup_r+0x98>
 8008028:	0758      	lsls	r0, r3, #29
 800802a:	d512      	bpl.n	8008052 <__swsetup_r+0x5a>
 800802c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800802e:	b141      	cbz	r1, 8008042 <__swsetup_r+0x4a>
 8008030:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008034:	4299      	cmp	r1, r3
 8008036:	d002      	beq.n	800803e <__swsetup_r+0x46>
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff fdd3 	bl	8007be4 <_free_r>
 800803e:	2300      	movs	r3, #0
 8008040:	6363      	str	r3, [r4, #52]	@ 0x34
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	2300      	movs	r3, #0
 800804c:	6063      	str	r3, [r4, #4]
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f043 0308 	orr.w	r3, r3, #8
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	b94b      	cbnz	r3, 8008072 <__swsetup_r+0x7a>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008068:	d003      	beq.n	8008072 <__swsetup_r+0x7a>
 800806a:	4621      	mov	r1, r4
 800806c:	4628      	mov	r0, r5
 800806e:	f000 f83f 	bl	80080f0 <__smakebuf_r>
 8008072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008076:	f013 0201 	ands.w	r2, r3, #1
 800807a:	d00a      	beq.n	8008092 <__swsetup_r+0x9a>
 800807c:	2200      	movs	r2, #0
 800807e:	60a2      	str	r2, [r4, #8]
 8008080:	6962      	ldr	r2, [r4, #20]
 8008082:	4252      	negs	r2, r2
 8008084:	61a2      	str	r2, [r4, #24]
 8008086:	6922      	ldr	r2, [r4, #16]
 8008088:	b942      	cbnz	r2, 800809c <__swsetup_r+0xa4>
 800808a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800808e:	d1c5      	bne.n	800801c <__swsetup_r+0x24>
 8008090:	bd38      	pop	{r3, r4, r5, pc}
 8008092:	0799      	lsls	r1, r3, #30
 8008094:	bf58      	it	pl
 8008096:	6962      	ldrpl	r2, [r4, #20]
 8008098:	60a2      	str	r2, [r4, #8]
 800809a:	e7f4      	b.n	8008086 <__swsetup_r+0x8e>
 800809c:	2000      	movs	r0, #0
 800809e:	e7f7      	b.n	8008090 <__swsetup_r+0x98>
 80080a0:	20000018 	.word	0x20000018

080080a4 <__swhatbuf_r>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	460c      	mov	r4, r1
 80080a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ac:	2900      	cmp	r1, #0
 80080ae:	b096      	sub	sp, #88	@ 0x58
 80080b0:	4615      	mov	r5, r2
 80080b2:	461e      	mov	r6, r3
 80080b4:	da0d      	bge.n	80080d2 <__swhatbuf_r+0x2e>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080bc:	f04f 0100 	mov.w	r1, #0
 80080c0:	bf14      	ite	ne
 80080c2:	2340      	movne	r3, #64	@ 0x40
 80080c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080c8:	2000      	movs	r0, #0
 80080ca:	6031      	str	r1, [r6, #0]
 80080cc:	602b      	str	r3, [r5, #0]
 80080ce:	b016      	add	sp, #88	@ 0x58
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
 80080d2:	466a      	mov	r2, sp
 80080d4:	f000 f848 	bl	8008168 <_fstat_r>
 80080d8:	2800      	cmp	r0, #0
 80080da:	dbec      	blt.n	80080b6 <__swhatbuf_r+0x12>
 80080dc:	9901      	ldr	r1, [sp, #4]
 80080de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080e6:	4259      	negs	r1, r3
 80080e8:	4159      	adcs	r1, r3
 80080ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ee:	e7eb      	b.n	80080c8 <__swhatbuf_r+0x24>

080080f0 <__smakebuf_r>:
 80080f0:	898b      	ldrh	r3, [r1, #12]
 80080f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080f4:	079d      	lsls	r5, r3, #30
 80080f6:	4606      	mov	r6, r0
 80080f8:	460c      	mov	r4, r1
 80080fa:	d507      	bpl.n	800810c <__smakebuf_r+0x1c>
 80080fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	6123      	str	r3, [r4, #16]
 8008104:	2301      	movs	r3, #1
 8008106:	6163      	str	r3, [r4, #20]
 8008108:	b003      	add	sp, #12
 800810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810c:	ab01      	add	r3, sp, #4
 800810e:	466a      	mov	r2, sp
 8008110:	f7ff ffc8 	bl	80080a4 <__swhatbuf_r>
 8008114:	9f00      	ldr	r7, [sp, #0]
 8008116:	4605      	mov	r5, r0
 8008118:	4639      	mov	r1, r7
 800811a:	4630      	mov	r0, r6
 800811c:	f7fe ff86 	bl	800702c <_malloc_r>
 8008120:	b948      	cbnz	r0, 8008136 <__smakebuf_r+0x46>
 8008122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008126:	059a      	lsls	r2, r3, #22
 8008128:	d4ee      	bmi.n	8008108 <__smakebuf_r+0x18>
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	f043 0302 	orr.w	r3, r3, #2
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	e7e2      	b.n	80080fc <__smakebuf_r+0xc>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	6020      	str	r0, [r4, #0]
 800813a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008146:	b15b      	cbz	r3, 8008160 <__smakebuf_r+0x70>
 8008148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800814c:	4630      	mov	r0, r6
 800814e:	f000 f81d 	bl	800818c <_isatty_r>
 8008152:	b128      	cbz	r0, 8008160 <__smakebuf_r+0x70>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	431d      	orrs	r5, r3
 8008164:	81a5      	strh	r5, [r4, #12]
 8008166:	e7cf      	b.n	8008108 <__smakebuf_r+0x18>

08008168 <_fstat_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	@ (8008188 <_fstat_r+0x20>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	f7f9 fb31 	bl	80017dc <_fstat>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d102      	bne.n	8008184 <_fstat_r+0x1c>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	b103      	cbz	r3, 8008184 <_fstat_r+0x1c>
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	bf00      	nop
 8008188:	20000424 	.word	0x20000424

0800818c <_isatty_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	@ (80081a8 <_isatty_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fb30 	bl	80017fc <_isatty>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_isatty_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_isatty_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	20000424 	.word	0x20000424

080081ac <_raise_r>:
 80081ac:	291f      	cmp	r1, #31
 80081ae:	b538      	push	{r3, r4, r5, lr}
 80081b0:	4605      	mov	r5, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	d904      	bls.n	80081c0 <_raise_r+0x14>
 80081b6:	2316      	movs	r3, #22
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081c2:	b112      	cbz	r2, 80081ca <_raise_r+0x1e>
 80081c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081c8:	b94b      	cbnz	r3, 80081de <_raise_r+0x32>
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 f830 	bl	8008230 <_getpid_r>
 80081d0:	4622      	mov	r2, r4
 80081d2:	4601      	mov	r1, r0
 80081d4:	4628      	mov	r0, r5
 80081d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081da:	f000 b817 	b.w	800820c <_kill_r>
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d00a      	beq.n	80081f8 <_raise_r+0x4c>
 80081e2:	1c59      	adds	r1, r3, #1
 80081e4:	d103      	bne.n	80081ee <_raise_r+0x42>
 80081e6:	2316      	movs	r3, #22
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	2001      	movs	r0, #1
 80081ec:	e7e7      	b.n	80081be <_raise_r+0x12>
 80081ee:	2100      	movs	r1, #0
 80081f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081f4:	4620      	mov	r0, r4
 80081f6:	4798      	blx	r3
 80081f8:	2000      	movs	r0, #0
 80081fa:	e7e0      	b.n	80081be <_raise_r+0x12>

080081fc <raise>:
 80081fc:	4b02      	ldr	r3, [pc, #8]	@ (8008208 <raise+0xc>)
 80081fe:	4601      	mov	r1, r0
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	f7ff bfd3 	b.w	80081ac <_raise_r>
 8008206:	bf00      	nop
 8008208:	20000018 	.word	0x20000018

0800820c <_kill_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d07      	ldr	r5, [pc, #28]	@ (800822c <_kill_r+0x20>)
 8008210:	2300      	movs	r3, #0
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	f7f9 fa7f 	bl	800171c <_kill>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d102      	bne.n	8008228 <_kill_r+0x1c>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	b103      	cbz	r3, 8008228 <_kill_r+0x1c>
 8008226:	6023      	str	r3, [r4, #0]
 8008228:	bd38      	pop	{r3, r4, r5, pc}
 800822a:	bf00      	nop
 800822c:	20000424 	.word	0x20000424

08008230 <_getpid_r>:
 8008230:	f7f9 ba6c 	b.w	800170c <_getpid>

08008234 <_init>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	bf00      	nop
 8008238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823a:	bc08      	pop	{r3}
 800823c:	469e      	mov	lr, r3
 800823e:	4770      	bx	lr

08008240 <_fini>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	bf00      	nop
 8008244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008246:	bc08      	pop	{r3}
 8008248:	469e      	mov	lr, r3
 800824a:	4770      	bx	lr
